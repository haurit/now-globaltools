<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.GlobalToolsRecordWriteValidate</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Tools to support (scoped) app development&#13;
Functions are only available for global scope and specific scopes defined in the system properties "now.globaltools.access_from_scope" or "now.globaltools.access_from_scope_custom" for security reasons.</description>
        <mobile_callable>false</mobile_callable>
        <name>GlobalToolsRecordWriteValidate</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var GlobalToolsRecordWriteValidate = Class.create();
GlobalToolsRecordWriteValidate.prototype = {
	initialize: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		gs.include('j2js');
		this._gt = new global.GlobalTools();
		this._gtArray = new global.GlobalToolsArray();
		this._unique = this._gtArray.unique;
		this._isValidArray = this._gtArray.isValidArray;
		this._gtObject = new global.GlobalToolsObject();
		this._getValue = this._gtObject.getValue;
		this._setValue = this._gtObject.setValue;
		this._gtRead = new global.GlobalToolsRecordRead();
		this._gtWrite = new global.GlobalToolsRecordWrite();
		this._gtTable = new global.GlobalToolsTable();
		this._gtCache = new global.GlobalToolsCache();
		this._mappingCfgMgr = '';
		var grScriptInclude = new GlideRecord('sys_script_include'); // gs.isValidScriptFromScope did not work
		if (grScriptInclude.get('api_name', 'x_snc_mapping_cm.MappingConfigManager')) {
			this._mappingCfgMgr = new x_snc_mapping_cm.MappingConfigManager();
		} // if valid mapping config mgr
	}, // function initialize

	checkAccess: function (sCallerScope) {
		var aScopes = String(gs.getProperty('now.globaltools.access_from_scope')).split(',');
		var aCustomScopes = String(gs.getProperty('now.globaltools.access_from_scope_custom')).split(',');
		if ((sCallerScope) && ((sCallerScope == 'rhino.global') || (aScopes.indexOf(sCallerScope) != -1) || (aCustomScopes.indexOf(sCallerScope) != -1))) {
			return true;
		} // if scope is allowed
	}, // function checkAccess

	/***********************************************************************************************************
	*	Externally callable (main) functions
	************************************************************************************************************/

	validateAndWrite: function (oRecordConfig, oRecordValues, oError) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		this._errorHandlerInit(oRecordConfig, oError);
		this._setGlobals(oRecordConfig, oRecordValues);
		if (this._canContinue()) {
			this._getFields();
			this._applyFieldValueConfiguration();
			this._validate();
			if (this._canContinue()) {
				this._apply();
				this._runBusinessLogic();
				this._validateDataPolicy();
				if ((this.bLog) && (this.sLogLevel == 'debug')) {
					gs.debug(this.bLogPrefix + ' sTargetTable: ' + this.sTargetTable + ' canDoAction: ' + this._canDoAction() + ' bDoAction: ' + this._getValue('bDoAction', true, this.oRecordConfig));
				} // if log and debug
				this._runCustomScripts(true);
				if ((this._canDoAction()) && (this._getValue('bDoAction', true, this.oRecordConfig))) {
					if ((this._getValue('bUseIRE', false, this.oRecordConfig)) && ((this.bIsValidRecord) || (!this._getValue('bKeepSysId', false, this.oRecordConfig)))) {
						this._createIREPayload();
						this._runIRE();
					} else {
						this._writeRecord();
					} // if IRE
					if (this._canContinue()) {
						this._runCustomScripts();
					} // if can continue
				} // if can write
			} // if validation passed
			if (new GlideImpersonate().isImpersonating()) {
				this._runImpersonate(true); // end impersonation
			} // if impersonating
		} // if invalid globals
		return this.sRecordId;
	}, // function validateAndWrite

	validateAndReturnIREObject: function (oRecordConfig, oRecordValues, oError) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		this._errorHandlerInit(oRecordConfig, oError);
		this._setGlobals(oRecordConfig, oRecordValues);
		if (this._canContinue()) {
			this._getFields();
			this._applyFieldValueConfiguration();
			this._validate();
			if (this._canContinue()) {
				this._apply();
				this._runBusinessLogic();
				this._validateDataPolicy();
				if ((this.bLog) && (this.sLogLevel == 'debug')) {
					gs.debug(this.bLogPrefix + ' sTargetTable: ' + this.sTargetTable + ' canDoAction: ' + this._canDoAction() + ' bDoAction: ' + this._getValue('bDoAction', true, this.oRecordConfig));
				} // if log and debug
				this._runCustomScripts(true); // run before scripts
				if ((this._canDoAction()) && (this._getValue('bDoAction', true, this.oRecordConfig))) {
					this._createIREPayload();
				} // if can write
			} // if validation passed
			if (new GlideImpersonate().isImpersonating()) {
				this._runImpersonate(true); // end impersonation
			} // if impersonating
		} // if invalid globals
		return this.oIREPayload;
	}, // function validateAndReturnObject

	/***********************************************************************************************************
	*	First level functions
	************************************************************************************************************/

	_setGlobals: function (oRecordConfig, oRecordValues) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		this.sUserCurrentId = gs.getUserID();
		this.sUserInitialId = gs.getUserID();
		this.oRecordConfig = oRecordConfig; // initial config
		this.oRecordValues = oRecordValues; // initial values
		this.sRecordId = '-1'; // new record id
		this.sTargetTable = this._getValue('sTargetTable', '', this.oRecordConfig); // target table from config
		this._validateInput();
		if (!this._canContinue()) {
			return;
		} // if invalid input
		this.bLog = this._getValue('bLog', false, this.oRecordConfig);
		this.sLogLevel = this._getValue('sLogLevel', 'error', this.oRecordConfig);
		this.bLogPrefix = this._getValue('bLogPrefix', 'GlobalToolsRecordWriteValidate - ', this.oRecordConfig);
		this.grRecord = (this._gtTable.isValidTable(this.sTargetTable)) ? new GlideRecord(this.sTargetTable) : ''; // initiate record
		this.bIsValidRecord = false; // false = new record
		this.sAction = this._setAction(); // record action
		this.sImpersonateUserId = '';
		this.aAllRecordValueFields = Object.keys(this.oRecordValues); // all initial values
		this.aRecordValueFields = []; // all record fields that are valid in current instance, not on the ignored list or are a sourcefield
		this.aFields = this._getValue('aFields', [], this.oRecordConfig); // fields in the configuration (simple or complex fields)
		this.aFieldsSimple = []; // fields from aFields with type string
		this.oFieldsObjects = {}; // fields from aFields with type object with valid key sField as object
		this.aFieldsComplex = []; // fields from aFields with type object with valid key sField as string
		this.aFieldsIgnore = []; // fields to be completly ignored with sFieldAction = ignore
		this.aFieldsIgnoreOnInsert = []; // fields to be ignored on insert with sFieldAction = ignore_insert
		this.aFieldsIgnoreOnUpdate = []; // fields to be ignored on update with sFieldAction = ignore_update
		this.aFieldsSource = []; // fields used in sSourceValue parameter
		this.aFieldsKeyFields = []; // fields used in reference fields keys
		this.aRecordKeyFields = []; // fields used in main record keys
		this.aMandatoryFields = this._getValue('aMandatoryFields', [], this.oRecordConfig); // manual mandatory fields, if initial value is allfields all fields are mandatory
		this.bCheckDictionaryMandatory = this._getValue('bCheckDictionaryMandatory', true, this.oRecordConfig); // check dict fields for mandatory fields
		this.bAllFieldsMandatory = ((this._isValidArray(this.aMandatoryFields)) && (this.aMandatoryFields[0] == 'allfields')) ? true : false; // all mandatory fields
		this.aAllFields = [];
		this.aAllRecordFields = [];
		if ((this.bLog) && (this.sLogLevel == 'debug')) {
			gs.debug(this.bLogPrefix + 'input oRecordConfig: ' + JSON.stringify(this.oRecordConfig) + ' oRecordValues: ' + JSON.stringify(this.oRecordValues));
		} // if log and debug
	}, // function _setGlobals

	_getFields: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		this.aFields.forEach(function (oField) {
			var sFieldType = this._gt.getType(oField);
			if (sFieldType == 'string') {
				this.aFieldsSimple.push(oField);
			} else if (this._gtObject.isObject(oField)) {
				if (oField.hasOwnProperty('sField')) {
					if ((oField.hasOwnProperty('sFieldAction')) && (oField['sFieldAction'] == 'ignore')) {
						this.aFieldsIgnore.push(oField['sField']);
					} else {
						this.aFieldsComplex.push(oField['sField']);
						this.oFieldsObjects[oField['sField']] = oField;
						if (oField.hasOwnProperty('aKeys')) {
							this._getFieldsFromKeyArrays(oField['aKeys'], 'field');
						} // if keys
						if (oField.hasOwnProperty('sSourceField')) {
							this.aFieldsSource.push(oField['sSourceField']);
						} // if source field
						if ((oField.hasOwnProperty('sFieldAction')) && (oField['sFieldAction'] == 'ignore_insert')) {
							this.aFieldsIgnoreOnInsert.push(oField['sField']);
						} else if ((oField.hasOwnProperty('sFieldAction')) && (oField['sFieldAction'] == 'ignore_update')) {
							this.aFieldsIgnoreOnUpdate.push(oField['sField']);
						} // if ignore on insert or update
					} // if field action ignore
				} else {
					this._errorHandler('config', '400_031', 'Invalid field configuration in config object (missing field property)', '', [JSON.stringify(oField)], true, false);
				} // if field
			} else {
				this._errorHandler('config', '400_032', 'Invalid field configuration in config object (invalid field type)', '', [JSON.stringify(oField), sFieldType], true, false);
			} // if valid field type
		}, this); // each field
		if (this.grRecord) {
			this.aAllRecordValueFields.forEach(function (sField) {
				if ((this.grRecord.isValidField(sField)) && (this.aFieldsIgnore.indexOf(sField) == -1)) {
					this.aRecordValueFields.push(sField);
				} // if valid field
			}, this); // each record value field
		} // if record
		this._getFieldsFromKeyArrays(this._getValue('aKeys', [], this.oRecordConfig), 'record');
		this.aAllRecordFields = this._unique([].concat(this.aFieldsSimple, this.aFieldsComplex, this.aRecordValueFields), true);
		this.oDependentFields = this._getDependentFields();
		this._sortAllRecordFieldsByDependent();
		if (this.bAllFieldsMandatory) {
			this.aAllFields = this._unique([].concat(this.aAllRecordValueFields, this.aFieldsSimple, this.aFieldsComplex, this.aRecordKeyFields, this.aFieldsKeyFields), true);
			this.aMandatoryFields = this.aAllFields;
		} else {
			this.aAllFields = this._unique([].concat(this.aAllRecordValueFields, this.aFieldsSimple, this.aFieldsComplex, this.aRecordKeyFields, this.aFieldsKeyFields, this.aMandatoryFields), true);
		} // if all fields mandatory
		if (this.bCheckDictionaryMandatory) {
			this.aMandatoryFields = this._unique([].concat(this.aMandatoryFields, this._gtTable.getMandatoryFields(this.sTargetTable)), true);
		} // if check dict mandatory fields
		this.aTemporaryValueFields = [];
		var sTemplateValueField = this._getValue('sTemplateValueField', '', this.oRecordConfig);
		if ((sTemplateValueField) && (this._getValue('bTemplateDeleteFieldValue', false, this.oRecordConfig))) {
			this.aTemporaryValueFields.push(sTemplateValueField);
		} // if template value field
		var sStateFlowActionValueField = this._getValue('sStateFlowActionValueField', 'action', this.oRecordConfig);
		if ((sStateFlowActionValueField) && (this._getValue('bStateFlowActionDeleteFieldValue', false, this.oRecordConfig))) {
			this.aTemporaryValueFields.push(sStateFlowActionValueField);
		} // if action value field
		var sImpersonateValueField = this._getValue('sImpersonateValueField', 'user', this.oRecordConfig);
		if ((sImpersonateValueField) && (this._getValue('bImpersonateDeleteFieldValue', false, this.oRecordConfig))) {
			this.aTemporaryValueFields.push(sImpersonateValueField);
		} // if impersonate value field
		if ((this.bLog) && (this.sLogLevel == 'debug')) {
			gs.debug(this.bLogPrefix + ' aAllRecordValueFields: ' + this.aAllRecordValueFields + ' aRecordValueFields: ' + this.aRecordValueFields + ' aFields: ' + JSON.stringify(this.aFields) + ' aFieldsSimple: ' + this.aFieldsSimple + ' aFieldsComplex: ' + this.aFieldsComplex + ' aFieldsKeyFields: ' + this.aFieldsKeyFields + ' aRecordKeyFields: ' + this.aRecordKeyFields + ' aMandatoryFields: ' + this.aMandatoryFields + ' aAllFields: ' + this.aAllFields + ' aAllRecordFields: ' + this.aAllRecordFields + ' aFieldsSource: ' + this.aFieldsSource + ' aFieldsIgnore: ' + this.aFieldsIgnore + ' this.oFieldsObjects: ' + JSON.stringify(this.oFieldsObjects));
		} // if log and debug
	}, // function _getFields

	_getDependentFields: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var oDependentFields = {};
		var sDependentField = '';
		this.aAllRecordFields.forEach(function (sField) {
			sDependentField = this._gtTable.getDictOrOverrideValue(this.sTargetTable, sField, 'dependent');
			if (sDependentField) {
				oDependentFields[sField] = sDependentField;
			} // if dependent field
		}, this); // each record field
		return oDependentFields;
	}, // function _getDependentFields

	_sortAllRecordFieldsByDependent: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var _sortFieldsByDependent = function (oFirstElement, oSecondElement) {
			if ((this.oDependentFields.hasOwnProperty(oFirstElement)) && (!this.oDependentFields.hasOwnProperty(oSecondElement))) {
				return -1;
			} // if dependent field
		}; // sort function
		var aDependent = [];
		this.aAllRecordFields.forEach(function (sKey) {
			if ((this.oDependentFields.hasOwnProperty(sKey)) && (this.aAllRecordFields.indexOf(this.oDependentFields[sKey]) != -1)) {
				aDependent.push(this.oDependentFields[sKey]);
			} // if dependent
		}, this); // each field
		aDependent.sort(_sortFieldsByDependent);
		this.aAllRecordFields = this._unique([].concat(aDependent, this.aAllRecordFields), true);
	}, // function _sortAllRecordFieldsByDependent

	_applyFieldValueConfiguration: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var oField;
		this.aFieldsComplex.forEach(function (sField) {
			oField = this._getValue(sField, {}, this.oFieldsObjects);
			sValue = this._getValue(sField, '', this.oRecordValues);
			sDefaultValue = this._getValue('sDefaultValue', '', oField);
			if ((sDefaultValue) && (!sValue)) {
				if (sDefaultValue == 'NULL') {
					sValue = ''; // backwards compatibilty
				} else {
					sValue = sDefaultValue;
				} // if set null
			} // if default value
			sRelatedTableResultId = this._getValue('sRelatedTableResultId', '', oField);
			if (sRelatedTableResultId) {
				sValue = this._getValue('oRelatedTableResultIds/' + sRelatedTableResultId, '', this.oRecordConfig);
			} // if related table result
			sPrefix = this._getValue('sPrefix', '', oField);
			sPostfix = this._getValue('sPostfix', '', oField);
			this._setValue(sField, sPrefix + sValue + sPostfix, this.oRecordValues);
		}, this); // each field
	}, // function _applyFieldValueConfiguration

	_validate: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((this.sAction == 'insert') && (!this._getValue('aKeys', undefined, this.oRecordConfig))) {
			this.bIsValidRecord = false;
		} else {
			var aRecordByKeysError = [];
			var bAllowClassChange = this._getValue('bAllowClassChange', false, this.oRecordConfig);
			var grRecord = this._gtRead.getRecordByKeys(this.oRecordConfig, this.oRecordValues, aRecordByKeysError, bAllowClassChange);
			if (aRecordByKeysError.length > 0) {
				this._errorHandler('config', '400_033', 'Invalid key configuration in config object', '', [aRecordByKeysError.join(', ')], false, true);
				return;
			} // if error
			this.bIsValidRecord = ((grRecord) && (this._gt.getType(grRecord).indexOf('gliderecord') != -1) && (grRecord.isValidRecord()) && (grRecord.getValue('sys_id') != -1)) ? true : false;
			if (this.bIsValidRecord) {
				if ((bAllowClassChange) && (this._gtTable.getRecordClass(grRecord) != this.sTargetTable) && (grRecord.isValidField('sys_class_name')) && (this._getValue('bUseIRE', false, this.oRecordConfig)) && (this._getValue('bKeepSysId', false, this.oRecordConfig)) && (this._getValue('sys_id', '', this.oRecordValues))) {
					grRecord.setValue('sys_class_name', this.sTargetTable);
					if (grRecord.update()) {
						var grRecordNewClass = new GlideRecord(this.sTargetTable);
						if (grRecordNewClass.get('sys_id', grRecord.getUniqueValue())) {
							this.sRecordId = grRecordNewClass.getUniqueValue();
							this.grRecord = grRecordNewClass;
						} else {
							this._errorHandler('record', '500_012', 'Error selecting record during class switch', '', [grRecordNewClass.getLastErrorMessage()], false, true);
						} // if new class record found
					} else {
						this._errorHandler('record', '500_011', 'Error updating record during class switch', '', [grRecord.getLastErrorMessage()], false, true);
					} // if class update successful
				} else {
					this.sRecordId = grRecord.getUniqueValue();
					this.grRecord = grRecord;
				} // if class has changed and keep sysid change the record because IRE will not work with SysId
				this.grRecordOld = new GlideRecord(this.sTargetTable);
				this.grRecordOld.get(this.sRecordId);
			} // if is valid record
		} // if action insert
		this._validateRecordAction();
		this._runDynamicFieldConfiguration();
		if (!this._canContinue()) {
			return;
		} // if validate record action
		if (!this.bIsValidRecord) {
			this.grRecord.initialize();
			if ((this.grRecord.isValidField('sys_class_name')) && (!this.grRecord.getValue('sys_class_name'))) {
				this.grRecord.setValue('sys_class_name', this.sTargetTable);
			} // if sys class name is empty on glide record --> workaround for reference qualifiers looking for the class name
		} // if valid record
		this._validateApplyTemplate();
		this._validateImpersonate();
		this._runImpersonate(); // impersonate before checking ACLs
		if (this._getValue('bUseGlideRecordSecure', false, this.oRecordConfig)) {
			this._validateRecordSecurity();
		} // if glide record secure
		if (this._canContinue()) {
			this._validateFields();
		} // if can continue
	}, // function _validate

	_apply: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var oField,
			sValue,
			sSourceField,
			sFixedValue,
			aValues,
			sValueType,
			sInternalType,
			sErrorHandling,
			oTransformConfig,
			bFieldDone,
			bNoActionError,
			geElement,
			edElementDescriptor,
			sDependentField,
			sDependentFieldValue,
			bDependentFieldValueValid,
			sFirstTable,
			grDict,
			aChoicesRetVal,
			aChoices,
			sChoiceTable,
			sChoiceField,
			aDependentValues,
			aChoiceDisplayValues,
			bMatch;
		var sErrorHandlingDefault = this._getValue('oErrorHandling/oFieldType/all/sErrorHandling', 'reject', this.oRecordConfig);
		var bNoTrim = this._getValue('bNoTrim', false, this.oRecordConfig);
		this.aAllRecordFields.forEach(function (sField) {
			oField = this._getValue(sField, {}, this.oFieldsObjects);
			sValue = this._getValue(sField, '', this.oRecordValues);
			sSourceField = this._getValue('sSourceField', '', oField);
			if ((sSourceField) && (sSourceField != sField)) {
				sValue = this._getValue(sSourceField, sValue, this.oRecordValues);
			} // if source field and diff from field (and has value) replace value
			bNoTrim = this._getValue('bNoTrim', bNoTrim, oField);
			if ((bNoTrim === false) && (typeof sValue == 'string')) {
				sValue = sValue.trim();
			} // if trim
			sFixedValue = this._getValue('sFixedValue', '', oField);
			try {
				aValues = [];
				sValueType = this._gt.getType(sValue);
				sInternalType = 'NA';
				bNoActionError = true;
				sErrorHandling = sErrorHandlingDefault;
				bFieldDone = false;
				bDependentFieldValueValid = false;
				if ((this.grRecord.isValidField(sField)) && (((this.bIsValidRecord === false) && (this.aFieldsIgnoreOnInsert.indexOf(sField) == -1)) || ((this.bIsValidRecord === true) && (this.aFieldsIgnoreOnUpdate.indexOf(sField) == -1)))) {
					geElement = this.grRecord.getElement(sField);
					edElementDescriptor = geElement.getED();
					sInternalType = String(edElementDescriptor.getInternalType());
					bVirtualField = edElementDescriptor.isVirtual();
					if (bVirtualField !== true) {
						if (sFixedValue) {
							sValue = sFixedValue;
						} else {
							if (!gs.nil(sInternalType)) {
								//gs.info('GlobalToolsRecordWriteValidate new type sField: ' + sField + ' sInternalType: ' + sInternalType + ' sValue: ' + sValue);
								sErrorHandling = this._getValue('oErrorHandling/oFieldType/' + sInternalType + '/sErrorHandling', sErrorHandling, this.oRecordConfig);
								sErrorHandling = this._getValue('sErrorHandling', sErrorHandling, oField);
								bNoActionError = (sErrorHandling != 'warn');
								if (sValue) {
									oTransformConfig = this._getValue('oTransformConfig/oFieldMap/' + sField, '', this.oRecordConfig);
									if ((oTransformConfig) && (oTransformConfig.hasOwnProperty('oMap'))) {
										sValue = this._getValue('oMap/' + sValue, sValue, oTransformConfig);
									} // transform config
									oTransformConfig = this._getValue('oTransformConfig/oTypeMap/' + sInternalType, '', this.oRecordConfig);
									if ((oTransformConfig) && (oTransformConfig.hasOwnProperty('oMap'))) {
										sValue = this._getValue('oMap/' + sValue, sValue, oTransformConfig);
									} // transform config
									if (sValue != this._getValue(sField, '', this.oRecordValues)) {
										this._setValue(sField, sValue, this.oRecordValues);
									} // if value changed
								} // if value
								if (sInternalType == 'field_list') {
									if (sValueType == 'array') {
										this.grRecord.setValue(sField, sValue.join(','));
										bFieldDone = true;
									} else {
										this._errorHandler('value', '400_022', 'Invalid array value', '', [sField, sValue], bNoActionError, false);
									} // if array
								} // if field list
								if (!gs.nil(sValue)) {
									if ((sInternalType == 'string') && (sValueType == 'array')) {
										if (edElementDescriptor.getLength() > 255) {
											sValue = sValue.join('\n');
										} else {
											sValue = sValue.join(', ');
										} // if length > 255 assume multiline
									} // if string and value is array
									if (sInternalType == 'journal_input') {
										if (sValueType == 'array') {
											this.grRecord[sField].setJournalEntry(sValue.join('\n'));
										} else {
											this.grRecord[sField].setJournalEntry(sValue);
										} // if array
										bFieldDone = true;
									} // if journal
									if (sInternalType == 'reference') {
										sValue = this._validateReferenceFieldValues(sField, oField, sValue, geElement, edElementDescriptor, sInternalType, sValueType);
										this.grRecord.setValue(sField, sValue);
										bFieldDone = true;
									} else if (sInternalType == 'glide_list') {
										aValues.length = 0;
										sValue = (sValueType == 'array') ? sValue : sValue.split(',');
										if ((this.bIsValidRecord) && (this.grRecord.getValue(sField)) && (this._getValue('bAddValues', false, oField) == true)) {
											aValues = this._unique([].concat(sValue, this.grRecord.getValue(sField).split(',')));
										} else {
											aValues = sValue;
										} // if add value
										sValue = this._validateReferenceFieldValues(sField, oField, aValues, geElement, edElementDescriptor, sInternalType, sValueType);
										this.grRecord.setValue(sField, sValue);
										bFieldDone = true;
									} else if ((edElementDescriptor.isChoiceTable()) && (this._getValue('aIgnoreChoiceFields', ['short_description'], this.oRecordConfig).indexOf(sField) == -1) && (['sys_class_name'].indexOf(sInternalType) == -1)) {
										sErrorHandling = this._getValue('oErrorHandling/oFieldType/all/sErrorHandling', 'reject', this.oRecordConfig);
										sErrorHandling = this._getValue('oErrorHandling/oFieldType/choice/sErrorHandling', sErrorHandling, this.oRecordConfig);
										sErrorHandling = this._getValue('sErrorHandling', sErrorHandling, oField);
										if (sErrorHandling != 'ignore') {
											bNoActionError = (sErrorHandling != 'warn');
											sDependentField = (this.oDependentFields.hasOwnProperty(sField)) ? this.oDependentFields[sField] : '';
											sDependentFieldValue = '';
											if (sDependentField) {
												sDependentFieldValue = this._getValue(sDependentField, this.grRecord.getValue(sDependentField), this.oRecordValues);
												if (sDependentFieldValue) {
													aChoicesRetVal = this._gtTable.getFieldChoices(this.sTargetTable, sDependentField);
													aChoices = aChoicesRetVal[0];
													if ((this._isValidArray(aChoices)) && (aChoices.indexOf(sDependentFieldValue) != -1)) {
														bDependentFieldValueValid = true;
													} // if valid dependent value
												} // if dependent value
											} // if dependent field
											aChoicesRetVal = this._gtTable.getFieldChoices(this.sTargetTable, sField, sDependentFieldValue);
											aChoices = aChoicesRetVal[0];
											aDependentValues = aChoicesRetVal[1];
											aChoiceDisplayValues = aChoicesRetVal[2];
											bMatch = false;
											if ((this._isValidArray(aChoices)) || (sDependentField)) {
												bMatch = aChoices.some(function (sChoiceValue, iIndex) {
													if ((String(sValue)) == String(sChoiceValue)) {
														if ((sDependentField) && (!sDependentFieldValue) && (this._isValidArray(aDependentValues)) && (aDependentValues.length >= iIndex)) {
															this.grRecord.setValue(sDependentField, aDependentValues[iIndex]); // set dependent field if empty for first choice match dependent value
															this._setValue(sDependentField, aDependentValues[iIndex], this.oRecordValues);
															bDependentFieldValueValid = true;
														} // if dependent field but no value
														return true;
													} // if same choice
												}, this); // each choice value
												if (!bMatch) {
													if (sErrorHandling == 'replace') {
														sValue = this._getValue('sDefaultValue', this._getValue('oErrorHandling/oFieldType/choice/sChoiceName', 'DataQualityIssue', this.oRecordConfig), oField);
														this._setValue(sField, sValue, this.oRecordValues);
														this.grRecord.setValue(sField, sValue);
														if (bDependentFieldValueValid) {
															this._errorHandler('value', '400_019', 'Invalid value in choice list field (default value)', '', [sField, sValue, aChoiceDisplayValues.join(', ')], false, false);
														} else {
															this._errorHandler('value', '400_019', 'Invalid value in choice list field dependent value (default value)', '', [sField, sValue, aChoiceDisplayValues.join(', ')], false, false);
														} // if dependent valid
													} else if (sErrorHandling == 'leaveempty') {
														this._setValue(sField, '', this.oRecordValues);
														this.grRecord.setValue(sField, '');
														if (bDependentFieldValueValid) {
															this._errorHandler('value', '400_019', 'Invalid value in choice list field (leave empty)', '', [sField, sValue, aChoiceDisplayValues.join(', ')], false, false);
														} else {
															this._errorHandler('value', '400_019', 'Invalid value in choice list field dependent value (leave empty)', '', [sField, sValue, aChoiceDisplayValues.join(', ')], false, false);
														} // if dependent valid
													} else if ((sErrorHandling == 'mapping') && (this._mappingCfgMgr)) {
														sFirstTable = (edElementDescriptor) ? edElementDescriptor.getFirstTableName() : '';
														sFirstTable = (sFirstTable) ? sFirstTable : this.sTargetTable;
														sValue = this._mappingCfgMgr.doMappingValue(sFirstTable, sValue, '', sFirstTable, sField, sDependentField, sDependentFieldValue);
														if (sValue) {
															this._setValue(sField, sValue, this.oRecordValues);
															this.grRecord.setValue(sField, sValue);
														} // if value
													} else {
														if (sErrorHandling == 'warn') {
															this._setValue(sField, sValue, this.oRecordValues);
															this.grRecord.setValue(sField, sValue);
														} // if warn set value
														if (bDependentFieldValueValid) {
															this._errorHandler('value', '400_019', 'Invalid value in choice list field', '', [sField, sValue, aChoiceDisplayValues.join(', ')], bNoActionError, false);
														} else {
															this._errorHandler('value', '400_019', 'Invalid value in choice list field dependent value', '', [sField, sValue, aChoiceDisplayValues.join(', ')], bNoActionError, false);
														} // if dependent valid
													} // if replace
													bFieldDone = true;
												} // if invalid choice
											} else {
												this._errorHandler('system', '400_018', 'Invalid choice list configuration', '', [sField, '-', '-'], true, false);
												bFieldDone = true;
											} // if choice
										} // if ignore do nothing
									} // if value, reference, glide_list or choice
								} // if value is not nil
								if ((!bFieldDone == true) && (sErrorHandling != 'ignore')) {
									if (sInternalType == 'boolean') {
										if (!(sValue == 0 || sValue == 1 || sValue == 'true' || sValue == 'false' || sValue == '0' || sValue == '1' || sValue == true || sValue == false || sValue == '') || (sValueType == 'boolean')) {
											this._errorHandler('value', '400_021', 'Invalid boolean value', '', [sField, sValue], bNoActionError, false);
										} // if value is not boolean
									} // if type is bool
									if (!gs.nil(sValue)) {
										if (sInternalType == 'glide_date_time') {
											var gdtTest = new GlideDateTime(sValue);
											if (!gdtTest.isValid()) {
												this._errorHandler('value', '400_023', 'Invalid date/time value', '', [sField, sValue, gs.getDateTimeFormat()], bNoActionError, false);
											} else {
												this.grRecord[sField].setDisplayValue(sValue);
											} // if date is not valid
											bFieldDone = true;
										} // if type is datetime
										if (sInternalType == 'glide_date') {
											var gdTest = new GlideDate();
											gdTest.setDisplayValue(sValue);
											if (!gdTest.isValid()) {
												this._errorHandler('value', '400_024', 'Invalid date value', '', [sField, sValue, gs.getDateFormat()], bNoActionError, false);
											} else {
												this.grRecord[sField].setDisplayValue(sValue);
											} // if date is not valid
											bFieldDone = true;
										} // if type is date
										if (sInternalType == 'glide_time') {
											var gtTest = new GlideTime();
											gtTest.setDisplayValue(sValue);
											if (!gtTest.isValid()) {
												this._errorHandler('value', '400_025', 'Invalid time value', '', [sField, sValue, gs.getTimeFormat()], bNoActionError, false);
											} else {
												this.grRecord[sField].setDisplayValue(sValue);
											} // if time is not valid
											bFieldDone = true;
										} // if type is time
										if (sInternalType == 'glide_duration') {
											var gduTest = new GlideDuration();
											gduTest.setDisplayValue(sValue);
											if (!gduTest.isValid()) {
												this._errorHandler('value', '400_034', 'Invalid duraction value', '', [sField, sValue, 'd hh:mm:ss'], bNoActionError, false);
											} else {
												this.grRecord[sField].setDisplayValue(sValue);
											} // if duration is not valid
											bFieldDone = true;
										} // if type is time
										if (sInternalType == 'integer') {
											if (isNaN(parseInt(sValue))) {
												this._errorHandler('value', '400_026', 'Invalid integer number value', '', [sField, sValue], bNoActionError, false);
											} else {
												this.grRecord.setValue(sField, parseInt(sValue));
											} // if not integer
											bFieldDone = true;
										} // if type is integer
										if (sInternalType == 'float') {
											if (isNaN(parseFloat(sValue))) {
												this._errorHandler('value', '400_027', 'Invalid floating point number value', '', [sField, sValue], bNoActionError, false);
											} else {
												this.grRecord.setValue(sField, parseFloat(sValue));
											} // if not float
											bFieldDone = true;
										} // if type is float
										if (sInternalType == 'email') {
											var reEmail = new RegExp('^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,15})+$');
											if ((!reEmail.test(sValue)) || (sValue.length < 6) || (sValue.length > 200)) {
												this._errorHandler('value', '400_028', 'Invalid email address value', '', [sField, sValue], bNoActionError, false);
												bFieldDone = true;
											} // if not valid email
										} // if type is email
										if (sInternalType == 'ph_number') {
											var rePhone = /^\+?[1-9]\d{1,14}$/;
											if (!rePhone.test(sValue)) {
												this._errorHandler('value', '400_029', 'Invalid phone number value', '', [sField, sValue], bNoActionError, false);
												bFieldDone = true;
											} // if not valid E.164 phone
										} // if type is phone
										if ((sInternalType == 'ip_addr') || (sInternalType == 'ip_address')) {
											var reIPAddress = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
											if ((!reIPAddress.test(sValue)) || (sValue.length < 3)) {
												this._errorHandler('value', '400_030', 'Invalid ip address value', '', [sField, sValue], bNoActionError, false);
												var sIPDataControl = geElement.getAttribute('ip_data_control');
												if ((sInternalType == 'ip_addr') && ((sIPDataControl == 'canonical') || (sIPDataControl == 'expanded'))) {
													bFieldDone = true;
												} // if attr does not accept wrong entries
											} // if not valid ip address
										} // if type is ip address
										if (sInternalType == 'table_name') {
											if (!this._gtTable.isValidTable(sValue)) {
												this._errorHandler('value', '400_036', 'Invalid table', '', [sField, sValue], bNoActionError, false);
											} // if not valid table
										} // if type is table
										if (sInternalType == 'GUID') {
											var reSysId = new RegExp('([0-9a-f]){32}');
											if ((!reSysId.test(sValue)) && (!String(sValue) == '-1') && (!String(sValue) == 'global')) {
												this._errorHandler('value', '400_037', 'Invalid GUID value', '', [sField, sValue], bNoActionError, false);
												bFieldDone = true;
											} // if not valid GUID
										} // if type is GUID
										if (sInternalType == 'document_id') {
											sDependentField = (this.oDependentFields.hasOwnProperty(sField)) ? this.oDependentFields[sField] : '';
											var sDocumentIdTable = this._getValue(sDependentField, '', this.oRecordValues);
											sDocumentIdTable = (sDocumentIdTable) ? sDocumentIdTable : this.grRecord.getValue(sDependentField);
											if ((!sDocumentIdTable) || (!this._gtTable.isValidTable(sDocumentIdTable)) || (!this._gtRead.checkRecordByField(sDocumentIdTable, 'sys_id', sValue))) {
												this._errorHandler('value', '400_035', 'Invalid document id or table', '', [sField, sValue, '', sDocumentIdTable], bNoActionError, false);
												bFieldDone = true;
											} // if not valid document
										} // if type is document id
									} // if value is not nil
								} // if field not validated
							} else if (this.bLog) {
								gs.warn(this.bLogPrefix + 'sTable: ' + this.sTargetTable + ' sField: ' + sField + ' empty field type!');
							} // if internal type
						} // if fixed value
						if (!bFieldDone) {
							this.grRecord.setValue(sField, sValue);
						} // if field done
					} // if field is not virtual
				} // if valid field
			} catch (oEx) {
				this._errorHandler('runtime', '500_009', 'Error validating and applying field value.', '', [sField, String(sValue), String(oEx)], (sErrorHandling == 'reject'), false);
			} // try stateflow
		}, this); // each field
	}, // function _apply

	_createIREPayload: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		this.oIREPayload = { 'items': [] };
		var sItem = {
			'className': this._gtTable.getRecordClass(this.grRecord),
			'internal_id': this._getValue('sTableSequenceId', '', this.oRecordConfig),
			'lookup': [],
			'values': {},
		}; // item
		var sValue = '';
		this.aAllRecordFields.forEach(function (sField) {
			sValue = this.grRecord.getValue(sField);
			if (sField != 'sys_class_name') {
				sValue = (sValue === null) ? '' : sValue;
				sItem['values'][sField] = sValue;
			} // if not class
		}, this); // each field
		this.oIREPayload['items'].push(sItem);
	}, // function _createIREPayload

	_runIRE: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sIREPayload = JSON.stringify(this.oIREPayload);
		var sDataSourceIRE = this._getValue('sDataSourceIRE', 'Other Automated', this.oRecordConfig);
		if (this._getValue('bDataSourceIREfromValues', false, this.oRecordConfig)) {
			var aChoicesRetVal = this._gtTable.getFieldChoices(this.sTargetTable, 'discovery_source');
			var sDataSourceRecordValues = this._getValue('discovery_source', '', this.oRecordValues);
			if ((this._gtArray.isValidArray(aChoicesRetVal)) && (aChoicesRetVal.indexOf(sDataSourceRecordValues) != -1)) {
				sDataSourceIRE = sDataSourceRecordValues;
			} // if valid choice
		} // if data source from values
		var sIREOutput = sn_cmdb.IdentificationEngine.createOrUpdateCI(sDataSourceIRE, sIREPayload);
		var oIREOutput = this._gtObject.parseJSON(sIREOutput);
		if ((this.bLog) && (this.sLogLevel == 'debug')) {
			gs.debug(this.bLogPrefix + 'sTable: ' + this.sTargetTable + ' sIREPayload: ' + JSON.stringify(oIREOutput, null, 2));
		} // if log and debug
		var aItems = this._getValue('items', [], oIREOutput);
		if ((this._gtArray.isValidArray(aItems)) && (this._gtObject.isObject(aItems[0]))) {
			this.sRecordId = this._getValue('sysId', '-1', aItems[0]);
			if (this.sRecordId == 'Unknown') {
				this.sRecordId = '-1';
			} // if unknown
			var aIREWarnings = this._getValue('warnings', [], aItems[0]);
			if (this._gtArray.isValidArray(aIREWarnings)) {
				aIREWarnings.forEach(function (oIREWarning) {
					this._errorHandler('record', '406_001', 'Warning IRE action', [this._getValue('error', 'N/A', oIREWarning)], [this._getValue('message', 'N/A', oIREWarning)], false, false);
				}, this); // each warning
			} // if errors
			var aIREErrors = this._getValue('errors', [], aItems[0]);
			if (this._gtArray.isValidArray(aIREErrors)) {
				aIREErrors.forEach(function (oIREError) {
					this._errorHandler('record', '406_002', 'Error IRE action', [this._getValue('error', 'N/A', oIREError)], [this._getValue('message', 'N/A', oIREError)], true, false);
				}, this); // each error
			} // if errors
		} // if item
		if (this._getValue('bLogIREOutput', false, this.oRecordConfig)) {
			gs.info(this.bLogPrefix + 'sTable: ' + this.sTargetTable + ' this.sRecordId: ' + this.sRecordId + ' sIREPayload: ' + JSON.stringify(JSON.parse(sIREOutput), null, 2));
		} // if log IRE output
	}, // function _runIRE

	_writeRecord: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var bSaveActionDone = false;
		if ((this.bIsValidRecord) && (this._getValue('oStateFlowActionConfig', '', this.oRecordConfig))) {
			bSaveActionDone = this._validateStateFlowAction();
		} // if state flow action
		if (!bSaveActionDone) {
			if (((this.sAction == 'insert') || (this.sAction == 'save')) && (!this.bIsValidRecord)) {
				if ((this._getValue('bKeepSysId', false, this.oRecordConfig)) && (this._getValue('sys_id', '', this.oRecordValues))) {
					this.grRecord.setNewGuidValue(this._getValue('sys_id', '', this.oRecordValues));
				} // if keep sys_id
				this.sRecordId = this.grRecord.insert();
				if (!this.sRecordId) {
					if (!this._parseRecordError()) {
						this._errorHandler('record', '500_003', 'Error inserting record', '', [this.grRecord.getLastErrorMessage()], false, true);
					} // if parse error not succesful
				} // if error
			} else if (((this.sAction == 'update') || (this.sAction == 'save')) && (this.bIsValidRecord)) {
				if (!this.grRecord.update()) {
					if (!this._parseRecordError()) {
						this._errorHandler('record', '500_004', 'Error updating record', '', [this.grRecord.getLastErrorMessage()], false, true);
					} // if parse error not succesful
				} // if update
			} else if ((this.sAction == 'delete') && (this.bIsValidRecord)) {
				if ((this.grRecord.canDelete()) && (!this.grRecord.deleteRecord())) {
					if (!this._parseRecordError()) {
						this._errorHandler('record', '500_005', 'Error deleting record', '', [this.grRecord.getLastErrorMessage()], false, true);
					} // if parse error not succesful
				} // if delete
			} // if action
		} // if action done
		if ((this.bLog) && (this.sLogLevel == 'debug')) {
			gs.debug(this.bLogPrefix + 'sRecordId: ' + this.sRecordId);
		} // if log
	}, // function _writeRecord

	/***********************************************************************************************************
	*	Second level functions
	************************************************************************************************************/

	_setAction: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sAction = this._getValue('sAction', '', this.oRecordConfig);
		if (sAction == 'insert') {
			this._setValue('bInsert', true, this.oRecordConfig);
			this._setValue('bUpdate', false, this.oRecordConfig);
			this._setValue('bDelete', false, this.oRecordConfig);
		} else if (sAction == 'update') {
			this._setValue('bInsert', false, this.oRecordConfig);
			this._setValue('bUpdate', true, this.oRecordConfig);
			this._setValue('bDelete', false, this.oRecordConfig);
		} else if (sAction == 'save') {
			this._setValue('bInsert', true, this.oRecordConfig);
			this._setValue('bUpdate', true, this.oRecordConfig);
			this._setValue('bDelete', false, this.oRecordConfig);
		} else if (sAction == 'delete') {
			this._setValue('bInsert', false, this.oRecordConfig);
			this._setValue('bUpdate', false, this.oRecordConfig);
			this._setValue('bDelete', true, this.oRecordConfig);
		} else {
			var bInsert = this._getValue('bInsert', false, this.oRecordConfig);
			var bUpdate = this._getValue('bUpdate', false, this.oRecordConfig);
			var bDelete = this._getValue('bDelete', false, this.oRecordConfig);
			if ((bDelete) && ((bInsert) || (bUpdate))) {
				this._errorHandler('config', '405_002', 'Invalid action: conflict', '', '', false, true);
				return;
			} else if ((!bInsert) && (!bUpdate) && (!bDelete)) {
				this._errorHandler('config', '405_003', 'Invalid action: empty', '', '', false, true);
				return;
			} // if invalid actions
			if ((bInsert) && (bUpdate) && (!bDelete)) {
				sAction = 'save';
			} else if ((bInsert) && (!bUpdate) && (!bDelete)) {
				sAction = 'insert';
			} else if ((!bInsert) && (bUpdate) && (!bDelete)) {
				sAction = 'update';
			} else if (bDelete) {
				sAction = 'delete';
			} // if insert, update or delete
		} // if action
		return sAction;
	}, // function _setAction

	_validateInput: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((!this.oRecordConfig) || (!this.sTargetTable)) {
			this._errorHandler('config', '405_001', 'Missing record config object or sTargetTable property', '', '', false, true);
			return;
		} // if no record config or target table
		if ((!this.oRecordValues) || (Object.keys(this.oRecordValues).length < 1)) {
			this._errorHandler('value', '400_001', 'Missing or empty record values object', '', '', false, true);
			return;
		} // if no record values
		var aInputValueChecks = this._getValue('aInputValueChecks', [], this.oRecordConfig);
		if (this._isValidArray(aInputValueChecks)) {
			aInputValueChecks.forEach(function (oInputValueCheck) {
				this._runFieldValueCheck(oInputValueCheck);
			}, this); // each input value check
		} // if valid input value checks
	}, // function _validateInput

	_runFieldValueCheck: function (oFieldValueCheck, bReturnFalseIfNotFound) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sField = this._getValue('sField', '', oFieldValueCheck);
		var sValue = this._getValue(sField, '', this.oRecordValues);
		var sErrorMessage = gs.getMessage(this._getValue('sErrorMessage', '', oFieldValueCheck), [sField, sValue]);
		var sRegExpPattern = this._getValue('sRegExpPattern', '', oFieldValueCheck);
		var sRegExpFlags = this._getValue('sRegExpFlags', '', oFieldValueCheck);
		var sScript = this._getValue('sScript', '', oFieldValueCheck);
		var bCheckValid = (bReturnFalseIfNotFound) ? false : true;
		var oResult = {};
		if (sRegExpPattern) {
			var rePattern = new RegExp(sRegExpPattern, sRegExpFlags);
			bCheckValid = rePattern.test(String(sValue));
		} else if (sScript) {
			sScript = sScript.replaceAll('sValue', sValue);
			oResult = new GlideScriptEvaluator().evaluateString(sScript, true);
			if ((oResult) && (JSON.stringify(oResult).indexOf('error') != -1)) {
				this._errorHandler('runtime', '500_007', 'Error processing input values check script', '', [JSON.stringify(oResult)], true, false);
			} else if ((oResult) && (oResult.hasOwnProperty('bValid'))) {
				bCheckValid = oResult['bValid'];
				if (oResult.hasOwnProperty('sErrorMessage')) {
					sErrorMessage = oResult['sErrorMessage'];
				} // if result has error
			} else {
				bCheckValid = (String(oResult) == 'true') ? true : false;
			} // if results object
		} // if regex or script
		if ((this.bLog) && (this.sLogLevel == 'debug')) {
			gs.debug(this.bLogPrefix + '_runFieldValueCheck oFieldValueCheck: ' + JSON.stringify(oFieldValueCheck) + ' bReturnFalseIfNotFound: ' + bReturnFalseIfNotFound + ' sValue: ' + sValue + ' bCheckValid: ' + bCheckValid);
		} // if log
		if (bReturnFalseIfNotFound) {
			return bCheckValid;
		} // if return result
		if (!bCheckValid) {
			if (sErrorMessage) {
				this._errorHandler('value', '400_038', 'Input values check failed', '', [sErrorMessage], true, false);
			} // if error msg
		} // if not valid
	}, // function _runFieldValueCheck

	_validateRecordAction: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((!this.bIsValidRecord) && (this.sAction == 'delete')) {
			this._errorHandler('record', '404_001', 'Invalid action: record delete', '', [this.sTargetTable], false, true);
		} else if ((this.bIsValidRecord) && (this.sAction == 'insert')) {
			this._errorHandler('record', '404_002', 'Invalid action: record insert', '', [this.sTargetTable, this.sRecordId], false, true);
		} else if ((!this.bIsValidRecord) && (this.sAction == 'update')) {
			this._errorHandler('record', '404_003', 'Invalid action: record update', '', [this.sTargetTable], false, true);
		} // if invalid record and action
	}, // function _validateRecordAction

	_runDynamicFieldConfiguration: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var aDynamicFieldConfig = this._getValue('aDynamicFieldConfig', [], this.oRecordConfig);
		if (this._isValidArray(aDynamicFieldConfig)) {
			var sQueryCondition = '';
			var bMatch = false;
			aDynamicFieldConfig.forEach(function (oDynamicFieldConfig) {
				sQueryCondition = this._getValue('sQueryCondition', '', oDynamicFieldConfig);
				if (sQueryCondition) {
					if (this.grRecordOld) {
						var gfQueryCondition = new GlideFilter(sQueryCondition, '');
						gfQueryCondition.setCaseSensitive(false);
						bMatch = (gfQueryCondition.match(this.grRecordOld, true));
					} // if old record
				} else {
					bMatch = this._runFieldValueCheck(oDynamicFieldConfig, true);
				} // if before query
				if (bMatch) {
					this.aFieldsSimple = this._gtArray.addRemoveFromArray(this.aFieldsSimple, this._getValue('aFields', [], oDynamicFieldConfig), this._getValue('aFieldsRemoval', [], oDynamicFieldConfig));
					this.aFieldsComplex = this._gtArray.addRemoveFromArray(this.aFieldsComplex, [], this._getValue('aFieldsRemoval', [], oDynamicFieldConfig));
					this.aAllRecordFields = this._gtArray.addRemoveFromArray(this.aAllRecordFields, this._getValue('aFields', [], oDynamicFieldConfig), this._getValue('aFieldsRemoval', [], oDynamicFieldConfig));
					this.aMandatoryFields = this._gtArray.addRemoveFromArray(this.aMandatoryFields, this._getValue('aMandatoryFields', [], oDynamicFieldConfig), this._getValue('aMandatoryFieldsRemoval', [], oDynamicFieldConfig));
				} // if match
				if ((this.bLog) && (this.sLogLevel == 'debug')) {
					gs.debug(this.bLogPrefix + '_runDynamicFieldConfiguration oDynamicFieldConfig: ' + JSON.stringify(oDynamicFieldConfig) + ' bMatch: ' + bMatch);
				} // if log
			}, this); // field cfg condition
		} // if is valid array
	}, // function _runDynamicFieldConfiguration

	_validateApplyTemplate: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var bTemplateIsMandatory = this._getValue('bTemplateIsMandatory', false, this.oRecordConfig);
		var sTemplateName = this._getValue('sTemplateName', '', this.oRecordConfig);
		var sTemplateValueField = this._getValue('sTemplateValueField', 'template', this.oRecordConfig);
		var bTemplateDeleteFieldValue = this._getValue('bTemplateDeleteFieldValue', false, this.oRecordConfig);
		var sTemplateValueFieldValue = this._getValue(sTemplateValueField, '', this.oRecordValues);
		if ((bTemplateDeleteFieldValue) && (sTemplateValueField) && (this.oRecordValues.hasOwnProperty(sTemplateValueField))) {
			delete this.oRecordValues[sTemplateValueField];
		} // if delete template value field
		sTemplateName = (sTemplateValueFieldValue) ? sTemplateValueFieldValue : sTemplateName;
		if ((sTemplateName) && (this._gtRead.checkRecordByQuery('sys_template', 'name=' + sTemplateName + '^table=' + this.sTargetTable))) {
			this.grRecord.applyTemplate(sTemplateName);
		} else {
			if (sTemplateName) {
				this._errorHandler('config', '400_003', 'Invalid Template', '', [sTemplateName], false, false);
			} // if template
			if (bTemplateIsMandatory) {
				this._errorHandler('config', '400_002', 'Template is mandatory', '', '', true, false);
			} // if mandatory
		} // if template
	}, // function _validateApplyTemplate

	_validateImpersonate: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sDefaultUser = this._getValue('sDefaultUser', '', this.oRecordConfig); // only for backwards compatibility
		var sImpersonateDefaultUser = this._getValue('sImpersonateDefaultUser', sDefaultUser, this.oRecordConfig);
		var bImpersonateDeleteFieldValue = this._getValue('bImpersonateDeleteFieldValue', false, this.oRecordConfig);
		var sImpersonateValueField = this._getValue('sImpersonateValueField', 'user', this.oRecordConfig);
		var sImpersonateValueFieldValue = this._getValue(sImpersonateValueField, '', this.oRecordValues);
		if ((bImpersonateDeleteFieldValue) && (sImpersonateValueField) && (this.oRecordValues.hasOwnProperty(sImpersonateValueField))) {
			delete this.oRecordValues[sImpersonateValueField];
		} // if delete impersonate value field
		var aImpersonateUsers = [];
		if (sImpersonateValueFieldValue) {
			aImpersonateUsers.push(sImpersonateValueFieldValue);
		} // if default impersonate user
		if (sImpersonateDefaultUser) {
			aImpersonateUsers.push(sImpersonateDefaultUser);
		} // if default impersonate
		aImpersonateUsers.some(function (sImpersonateUser) {
			var grUser = this._gtRead.getRecords('sys_user', 'user_name=' + sImpersonateUser + '^ORsys_id=' + sImpersonateUser + '^ORemail=' + sImpersonateUser, '', '', 1, '', '', this._getValue('bNoDomain', false, this.oRecordConfig));
			if (grUser.next()) {
				this.sImpersonateUserId = grUser.getUniqueValue();
				return true;
			} else {
				this._errorHandler('config', '403_001', 'Invalid impersonate user provided', '', [sImpersonateUser], false, false);
			} // if user 
		}, this); // take first impersonate users
		if ((!this.sImpersonateUserId) && (this._getValue('bImpersonateMandatory', false, this.oRecordConfig))) {
			this._errorHandler('config', '403_002', 'Impersonate user is mandatory', '', [sImpersonateDefaultUser, sImpersonateValueFieldValue], true, false);
		} // if not impersonated and mandatory impersonate
	}, // function _validateImpersonate

	_runImpersonate: function (bEndImpersonation) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sImpersonateUser = (bEndImpersonation) ? this.sUserInitialId : this.sImpersonateUserId;
		if (sImpersonateUser) {
			if (sImpersonateUser != this.sUserCurrentId) {
				gs.getSession().impersonate(sImpersonateUser);
				if (new GlideImpersonate().isImpersonating()) {
					this.sUserCurrentId = this.sImpersonateUserId;
				} else {
					if ((this._getValue('bImpersonateMandatory', false, this.oRecordConfig)) && (!bEndImpersonation)) {
						this._errorHandler('runtime', '403_004', 'Impersonating failed and is mandatory', '', [sImpersonateUser], true, false);
					} else {
						this._errorHandler('runtime', '403_003', 'Impersonating failed', '', [sImpersonateUser, bEndImpersonation], false, false);
					} // if mandatory impersonate
				} // if impersonating
			} // if not current user
		} // if imp user
	}, // function _runImpersonate

	_validateRecordSecurity: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((this.sAction == 'insert') || ((this.sAction == 'save') && (!this.bIsValidRecord))) {
			if (!this.grRecord.canCreate()) {
				this._errorHandler('record', '400_101', 'Access denied: record create', '', [this.sUserCurrentId, this.sTargetTable], false, true);
			} // if no create
		} else if ((this.sAction == 'update') || ((this.sAction == 'save') && (this.bIsValidRecord))) {
			if (!this.grRecord.canWrite()) {
				this._errorHandler('record', '400_102', 'Access denied: record write', '', [this.sUserCurrentId, this.sTargetTable], false, true);
			} // if no write
		} else if (this.sAction == 'delete') {
			if (!this.grRecord.canDelete()) {
				this._errorHandler('record', '400_103', 'Access denied: record delete', '', [this.sUserCurrentId, this.sTargetTable], false, true);
			} // if no delete
		} // if action
	}, // function _validateRecordSecurity

	_validateStateFlowAction: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sStateFlowActionValueField = this._getValue('sStateFlowActionValueField', 'action', this.oRecordConfig);
		var sStateFlowActionValueFieldValue = this._getValue(sStateFlowActionValueField, '', this.oRecordValues);
		var bStateFlowActionIsMandatory = this._getValue('bStateFlowActionIsMandatory', false, this.oRecordConfig);
		var bStateFlowActionDeleteFieldValue = this._getValue('bStateFlowActionDeleteFieldValue', false, this.oRecordConfig);
		var sActionName = this._getValue('oStateFlowActionConfig/' + sStateFlowActionValueFieldValue + '/sStateAction', '', this.oRecordConfig);
		var sActionId = this._getValue('oStateFlowActionConfig/' + sStateFlowActionValueFieldValue + '/sStateActionId', '', this.oRecordConfig);
		var bWorkNotesMandatory = this._getValue('oStateFlowActionConfig/' + sStateFlowActionValueFieldValue + '/bWorkNotesMandatory', false, this.oRecordConfig);
		if ((bStateFlowActionDeleteFieldValue) && (sStateFlowActionValueField) && (this.oRecordValues.hasOwnProperty(sStateFlowActionValueField))) {
			delete this.oRecordValues[sStateFlowActionValueField];
		} // if delete action value field
		if ((bStateFlowActionIsMandatory) && (!sActionId) && (!sActionName)) {
			this._errorHandler('record', '400_006', 'Stateflow action is mandatory', '', '', true, false);
		} // if no action id
		if ((bWorkNotesMandatory) && (!this._getValue('work_notes', '', this.oRecordValues))) {
			this._errorHandler('record', '400_009', 'Stateflow action worknotes are mandatory', '', [sActionName, sActionId, sStateFlowActionValueFieldValue], true, false);
		} // if mandatory work notes
		var aQuery = [];
		if (sActionId) {
			aQuery.push('sys_id=' + sActionId);
		} // if action id
		if (sActionName) {
			aQuery.push('name=' + sActionName);
		} // if action id
		var grStateFlow = this._gtRead.getRecords('sf_state_flow', aQuery.join('^OR'), '', '', 1);
		if (grStateFlow.next()) {
			sActionId = grStateFlow.getUniqueValue();
			try {
				if (new global.StateFlow().validFlow(this.grRecord, sActionId, 'manual')) {
					new global.StateFlow().processFlow(this.grRecord, sActionId, 'manual');
					return true;
				} else {
					this._errorHandler('config', '400_007', 'Stateflow action is not valid', '', [sActionName, sActionId, sStateFlowActionValueFieldValue], true, false);
				} // if action
			} catch (oEx) {
				this._errorHandler('runtime', '500_001', 'Error processing stateflow action', '', [sStateFlowActionValueFieldValue, String(oEx)], true, false);
			} // try stateflow
		} else {
			this._errorHandler('config', '400_008', 'Stateflow action not found', '', [sStateFlowActionValueFieldValue, aQuery.join('^OR')], true, false);
		} // if state flow
	}, // function _validateStateFlowAction

	_getFieldsFromKeyArrays: function (aKeys, sType) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		aKeys.forEach(function (oKey) {
			var aKey = [];
			if (Array.isArray(oKey)) {
				aKey = oKey;
			} else {
				aKey.push(oKey);
			} // if array
			aKey.forEach(function (oKeyPart) {
				if (oKeyPart.hasOwnProperty('sInputField')) {
					if (sType == 'record') {
						this.aRecordKeyFields.push(oKeyPart['sInputField']);
					} else {
						this.aFieldsKeyFields.push(oKeyPart['sInputField']);
					} // if type record
				} else if (sType == 'record') {
					this.aRecordKeyFields.push(oKeyPart);
				} // if type record and valid field
			}, this); // each multipart key
		}, this); // each key
	}, // function _getFieldsFromKeyArrays

	_validateFields: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var grRecordTest = new GlideRecord(this.sTargetTable);
		var bErrorOnAddlFieldsInBody = this._getValue('bErrorOnAddlFieldsInBody', false, this.oRecordConfig); // only for backwards compatibility
		var bErrorOnAddlFieldsInValues = this._getValue('bErrorOnAddlFieldsInValues', bErrorOnAddlFieldsInBody, this.oRecordConfig);
		var bErrorOnInvalidFieldsInValues = this._getValue('bErrorOnInvalidFieldsInValues', true, this.oRecordConfig);
		var aMandatoryFields = this.aMandatoryFields.join(',').split(','); // copy values, not reference
		var iMandatoryField = -1;
		var aAddlFieldsInValues = [];
		this.aAllFields.forEach(function (sField) {
			if (!sField) {
				return;
			} // if field is empty
			iMandatoryField = -1;
			if ((bErrorOnAddlFieldsInValues) && (this.aFieldsSimple.indexOf(sField) == -1) && (this.aMandatoryFields.indexOf(sField) == -1) && (this.aFieldsComplex.indexOf(sField) == -1) && (this.aTemporaryValueFields.indexOf(sField) == -1) && (this.aFieldsSource.indexOf(sField) == -1) && (this.aFieldsKeyFields.indexOf(sField) == -1) && (this.aRecordKeyFields.indexOf(sField) == -1)) {
				aAddlFieldsInValues.push(sField);
			} // if addl field in body
			if (grRecordTest.isValidField(sField)) {
				if (this._getValue('bUseGlideRecordSecure', false, this.oRecordConfig)) {
					this._validateFieldSecurity(sField);
				} // if glide record secure
			} else if ((this.aFieldsKeyFields.indexOf(sField) == -1) && (this.aTemporaryValueFields.indexOf(sField) == -1) && (this.aFieldsSource.indexOf(sField) == -1)) {
				if (this.aMandatoryFields.indexOf(sField) != -1) {
					this._errorHandler('config', '400_012', 'Invalid field in mandatory fields', '', [sField], true, false);
					iMandatoryField = aMandatoryFields.indexOf(sField);
					aMandatoryFields.splice(iMandatoryField, 1);
				} else if (this.aAllRecordValueFields.indexOf(sField) != -1) {
					if (bErrorOnInvalidFieldsInValues) {
						this._errorHandler('value', '400_013', 'Invalid field in values object', '', [sField], true, false);
					} else if (this.oRecordValues.hasOwnProperty(sField)) {
						delete this.oRecordValues[sField];
					} // if field
				} else {
					this._errorHandler('config', '400_011', 'Invalid field in config object', '', [sField], true, false);
				} // if field in array
			} // if field is valid or key input field
			iMandatoryField = aMandatoryFields.indexOf(sField);
			if ((iMandatoryField != -1) && (this.oRecordValues.hasOwnProperty(sField)) && this.oRecordValues[sField] && (this.oRecordValues[sField] != 'NULL')) {
				aMandatoryFields.splice(iMandatoryField, 1);
			} // if mandatory
		}, this); // each field
		if ((bErrorOnAddlFieldsInValues) && (this._isValidArray(aAddlFieldsInValues))) {
			this._errorHandler('config', '400_010', 'Fields that are not configured are not allowed', '', [String(aAddlFieldsInValues)], true, false);
		} // if error addl fields in body
		if (this._isValidArray(aMandatoryFields)) {
			this._errorHandler('record', '400_005', 'Fields are mandatory (Config)', '', [String(aMandatoryFields)], true, false);
		} // if missing mandatory
	}, // function _validateFields

	_validateFieldSecurity: function (sField) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((this.grRecord) && (sField) && (!this.grRecord[sField])) {
			if ((this.sAction == 'insert') || ((this.sAction == 'save') && (!this.bIsValidRecord))) {
				if (!this.grRecord[sField].canCreate()) {
					this._errorHandler('record', '400_106', 'Access denied: field create', '', [this.sUserCurrentId, sField, this.sTargetTable], false, true);
				} // if no create
			} else if ((this.sAction == 'update') || ((this.sAction == 'save') && (this.bIsValidRecord))) {
				if (!this.grRecord[sField].canWrite()) {
					this._errorHandler('record', '400_104', 'Access denied: field write', '', [this.sUserCurrentId, sField, this.sTargetTable], false, true);
				} // if no write
			} // if action
		} // if record and field is readable
	}, // function _validateFieldSecurity

	_validateDataPolicy: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var bCheckDataPolicy = this._getValue('bCheckDataPolicy', true, this.oRecordConfig);
		if (!bCheckDataPolicy) {
			return;
		} // if no check
		var bCheckDataPolicyMandatory = this._getValue('bCheckDataPolicyMandatory', true, this.oRecordConfig);
		var bCheckDataPolicyReadOnly = this._getValue('bCheckDataPolicyReadOnly', true, this.oRecordConfig);
		var sCheckDataPolicyAdditionalQuery = this._getValue('sCheckDataPolicyAdditionalQuery', '', this.oRecordConfig);
		sCheckDataPolicyAdditionalQuery = (sCheckDataPolicyAdditionalQuery) ? '^' + sCheckDataPolicyAdditionalQuery : '';
		var grDataPolicy = new GlideRecord('sys_data_policy2');
		var sDataPolicyQuery = '';
		var grDataPolicyRule = new GlideRecord('sys_data_policy_rule');
		var sDataPolicyCondition = '';
		var gfDataPolicyCondition;
		var bDataPolicyMatch = false;
		var bMandatory = false;
		var aMandatoryFields = [];
		var bReadOnly = false;
		var aReadOnlyFields = [];
		var aTables = this._gtTable.getTableHierarchy(this.sTargetTable);
		aTables.forEach(function (sTable) {
			sDataPolicyQuery = (sTable == this.sTargetTable) ? 'active=true^model_table=' + sTable : 'active=true^inherit=true^model_table=' + sTable;
			grDataPolicy = new GlideRecord('sys_data_policy2');
			grDataPolicy.addEncodedQuery(sDataPolicyQuery + sCheckDataPolicyAdditionalQuery);
			grDataPolicy.query();
			while (grDataPolicy.next()) {
				sDataPolicyCondition = grDataPolicy.getValue('conditions');
				if (sDataPolicyCondition) {
					gfDataPolicyCondition = new GlideFilter(sDataPolicyCondition, 'dpcheck');
					gfDataPolicyCondition.setCaseSensitive(false);
					bDataPolicyMatch = gfDataPolicyCondition.match(this.grRecord, true);
				} else {
					bDataPolicyMatch = true;
				} // if condition
				if ((bDataPolicyMatch) || (grDataPolicy.getValue('reverse_if_false') == '1')) {
					grDataPolicyRule = new GlideRecord('sys_data_policy_rule');
					grDataPolicyRule.addEncodedQuery('sys_data_policy=' + grDataPolicy.getUniqueValue());
					grDataPolicyRule.query();
					while (grDataPolicyRule.next()) {
						sField = grDataPolicyRule.getValue('field');
						if (bCheckDataPolicyMandatory) {
							bMandatory = (((bDataPolicyMatch) && (grDataPolicyRule.getValue('mandatory') == 'true')) || ((!bDataPolicyMatch) && (grDataPolicy.getValue('reverse_if_false') == '1') && (grDataPolicyRule.getValue('mandatory') == 'false'))) ? true : false;
							if ((bMandatory) && (this.grRecord[sField].nil())) {
								aMandatoryFields.push(sField);
							} // if mandatory
						} // if check mandatory
						if (bCheckDataPolicyReadOnly) {
							bReadOnly = (((bDataPolicyMatch) && (grDataPolicyRule.getValue('disabled') == 'true')) || ((!bDataPolicyMatch) && (grDataPolicy.getValue('reverse_if_false') == '1') && (grDataPolicyRule.getValue('disabled') == 'false'))) ? true : false;
							if ((bReadOnly) && (this.grRecord.getValue(sField) != this.grRecordOld.getValue(sField))) {
								aReadOnlyFields.push(sField);
							} // if readonly
						} // if check readonly
					} // while data policy rule
				} // if data policy match or inverse
			} // while data policy
		}, this); // for each table
		if (aMandatoryFields.length > 0) {
			this._errorHandler('record', '400_004', 'Fields are mandatory (Data Policy)', '', [aMandatoryFields.join(', ')], true, false);
		} // if mandatory fields
		if (aReadOnlyFields.length > 0) {
			this._errorHandler('record', '400_105', 'Access denied (Data Policy): field write', '', [this.sUserCurrentId, aReadOnlyFields.join(', '), this.sTargetTable], true, false);
		} // if mandatory fields
	}, // function _validateDataPolicy

	_validateReferenceFieldValues: function (sField, oField, oValue, geElement, edElementDescriptor, sInternalType, sValueType) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var oParams = {};
		var aValues = [];
		var bSingleValue = (sValueType == 'array') ? false : true;
		var aValuesInput = (sValueType == 'array') ? oValue : [oValue];
		var sRefTable = this._getValue('sRefTable', '', oField);
		sRefTable = (sRefTable) ? sRefTable : this._gtTable.getDictOrOverrideValue(this.sTargetTable, sField, 'reference');
		var sRefTableBase = this._gtTable.getAbsoluteBase(sRefTable);
		var sErrorHandling = this._getValue('oErrorHandling/oFieldType/all/sErrorHandling', 'reject', this.oRecordConfig);
		sErrorHandling = this._getValue('oErrorHandling/oFieldType/reference/sErrorHandling', sErrorHandling, this.oRecordConfig);
		var sByReferenceTable = this._getValue('oErrorHandling/oFieldType/reference/oByReferenceTable/' + sRefTable, '', this.oRecordConfig);
		if (!sByReferenceTable) {
			sByReferenceTable = this._getValue('oErrorHandling/oFieldType/reference/oByReferenceTable/' + sRefTableBase, '', this.oRecordConfig);
			if (sByReferenceTable) {
				sErrorHandling = sByReferenceTable;
			} // if base table
		} else {
			sErrorHandling = sByReferenceTable;
		} // if ref table or ref base table
		sErrorHandling = this._getValue('sErrorHandling', sErrorHandling, oField);
		var aRecordByKeysError = [], sRefLookupScript = '', sDefaultValue = '', sFirstTable = '', aTargetFields2 = [];
		aValuesInput.forEach(function (sRefInput, iIndex) {
			aRecordByKeysError = [];
			aTargetFields2 = [];
			iIndex = (sValueType == 'array') ? iIndex : null;
			sRefLookupScript = (oField.hasOwnProperty('sRefLookupScript')) ? oField['sRefLookupScript'] : this._getValue('oTransformConfig/oTypeMap/reference/' + sRefTable + '/sRefLookupScript', '', this.oRecordConfig);
			if (sRefLookupScript) {
				oParams = {
					'bLog': this._getValue('bLog', false, this.oRecordConfig),
					'sField': sField,
					'sValue': sRefInput,
					'sTargetTable': this.sTargetTable,
					'sRefTable': sRefTable,
					'oField': oField,
					'grRecord': this.grRecord,
					'oRecordConfig': this.oRecordConfig,
					'oRecordValues': this.oRecordValues
				}; // vars object
				sRefValue = this._gt.runFunction(sRefLookupScript, oParams);
			} else {
				if (!this._getValue('aKeys', '', oField)) {
					if ((this._getValue('bKeysDefaultReferenceDisplayField', false, this.oRecordConfig)) && (this._gtTable.getDisplayField(sRefTable))) {
						this._setValue('sField', sField, oField);
						this._setValue('aKeys', [this._gtTable.getDisplayField(sRefTable)], oField);
					} else {
						this._setValue('sField', sField, oField);
						this._setValue('aKeys', this._getValue('aKeysDefaultReferenceFields', ['sys_id'], this.oRecordConfig), oField);
					} // if add display field or default key
				} // if no key defined
				sRefValue = this._gtRead.getRelatedRecordByKeys(this.oRecordConfig, this.oRecordValues, aRecordByKeysError, oField, sRefTable, iIndex);
			} // if lookup script
			if (aRecordByKeysError.length > 0) {
				this._errorHandler('config', '500_006', 'Error getting reference field value', '', [sField, sRefTable, String(sRefInput), aRecordByKeysError.join(', ')], true, false);
			} else if (!sRefValue) {
				sDefaultValue = this._getValue('sDefaultValue', '', oField);
				if ((['ignore', 'replace', 'warn'].indexOf(sErrorHandling) != -1) && (sDefaultValue) && (sDefaultValue != 'NULL')) {
					aValues.push(sDefaultValue);
				} else if ((sErrorHandling == 'leaveempty') || (sDefaultValue == 'NULL')) {
					aValues.push('');
				} else if (['ignore', 'warn'].indexOf(sErrorHandling) != -1) {
					aValues.push(sRefInput);
					if (sErrorHandling == 'warn') {
						this._errorHandler('value', '400_015', 'Invalid value in reference field (not found)', '', [sField, String(sRefInput), '', sRefTable], false, false);
					} // if warn
				} else if ((sErrorHandling == 'mapping') && (this._mappingCfgMgr)) {
					sFirstTable = (edElementDescriptor) ? edElementDescriptor.getFirstTableName() : '';
					sFirstTable = (sFirstTable) ? sFirstTable : this.sTargetTable;
					sRefValue = this._mappingCfgMgr.doMappingValue(sFirstTable, sRefInput, '', sRefTable);
					if ((sRefValue) && (sRefValue.hasOwnProperty('sTargetValue'))) {
						aValues.push(sRefValue['sTargetValue']);
						if ((bSingleValue) && (sRefValue.hasOwnProperty('sTargetValue2')) && (sRefValue.hasOwnProperty('aTargetFields2'))) {
							aTargetFields2 = sRefValue['aTargetFields2'];
							aTargetFields2.forEach(function (sTargetField2) {
								this.grRecord.setValue(sTargetField2, sRefValue['sTargetValue2']);
								this.oRecordValues[sTargetField2] = sRefValue['sTargetValue2'];
							}, this); // each target field
						} // if target value 2
					} else if (sRefValue) {
						aValues.push(sRefValue);
					} // if ref value
				} else if (sErrorHandling == 'create') {
					sErrorHandlingRecordName = this._getValue('oErrorHandling/oFieldType/reference/sRecordName', 'DataQualityIssue', this.oRecordConfig);
					sErrorHandlingRecordName = this._getValue('sErrorHandlingRecordName', sErrorHandlingRecordName, oField);
					sRefValue = this._gtWrite.doRecordByName(sRefTable, sErrorHandlingRecordName);
					if (sRefValue) {
						aValues.push(sRefValue);
						this._errorHandler('value', '400_039', 'Invalid value in reference field (not found, created)', '', [sField, String(sRefInput), sRefValue, sRefTable], false, false);
					} else {
						this._errorHandler('value', '400_040', 'Invalid value in reference field (not found, not created)', '', [sField, String(sRefInput), '', sRefTable], true, false);
					} // if error writing record
				} else {
					this._errorHandler('value', '400_015', 'Invalid value in reference field (not found)', '', [sField, String(sRefInput), '', sRefTable], true, false);
				} // if replace with default value
			} else {
				if (['ignore', 'replace', 'create', 'leaveempty'].indexOf(sErrorHandling) != -1) {
					aValues.push(sRefValue);
				} else if (this._validateReferenceEntry(sField, sRefValue, sRefTable, geElement, edElementDescriptor, sInternalType, (['warn', 'mapping'].indexOf(sErrorHandling) == -1))) {
					aValues.push(sRefValue);
				} // if exist and not warn or reject
			} // if not found by key
		}, this); // each ref value
		return aValues.join(',');
	}, // function _validateReferenceFieldValues

	_validateReferenceEntry: function (sField, sValue, sRefTable, geElement, edElementDescriptor, sInternalType, bNoActionError) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sDependentField = (this.oDependentFields.hasOwnProperty(sField)) ? this.oDependentFields[sField] : '';
		bNoActionError = (bNoActionError === false) ? false : true;
		var bMatch = true,
			grRefRecord,
			sReferenceQualifier = '';
		if (sInternalType == 'reference') {
			this.grRecord.setValue(sField, sValue);
			sReferenceQualifier = edElementDescriptor.getReferenceQualifier();
			grRefRecord = geElement.getRefRecord();
		} else if (sInternalType == 'glide_list') {
			sReferenceQualifier = this._gtTable.getDictOrOverrideValue(this.sTargetTable, sField, 'reference_qual');
			if (sRefTable) {
				grRefRecord = new GlideRecord(sRefTable);
				grRefRecord.get(sValue);
			} // if value
		} // if ref
		if ((this.bLog) && (this.sLogLevel == 'debug')) {
			gs.debug(this.bLogPrefix + '_validateReferenceEntry sTargetTable: ' + this.sTargetTable + ' sField: ' + sField + ' sValue: ' + sValue + ' sRefTable: ' + sRefTable + ' sInternalType: ' + sInternalType + ' sReferenceQualifier: ' + sReferenceQualifier + ' grRefRecord: ' + this._gt.getType(grRefRecord) + ' valid refrec: ' + grRefRecord.isValidRecord());
		} // if log
		if (grRefRecord.isValidRecord()) {
			var gfQueryCondition;
			if ((sReferenceQualifier) && (!sReferenceQualifier.startsWith('javascript:'))) {
				gfQueryCondition = new GlideFilter(sReferenceQualifier, '');
				gfQueryCondition.setCaseSensitive(false);
				bMatch = (gfQueryCondition.match(grRefRecord, true));
			} else if ((sReferenceQualifier) && (sReferenceQualifier.startsWith('javascript:'))) {
				var sAdvRefQualifierResult = String(this._evaluateAdvRefQualifier(sField));
				if ((sAdvRefQualifierResult != 'undefined') && (sAdvRefQualifierResult != 'null') && (sAdvRefQualifierResult != '')) {
					gfQueryCondition = new GlideFilter(sAdvRefQualifierResult, '');
					gfQueryCondition.setCaseSensitive(false);
					bMatch = (gfQueryCondition.match(grRefRecord, true));
				} // if adv ref qualifier result
			} // if ref qualifier
			if ((this.bLog) && (this.sLogLevel == 'debug')) {
				gs.debug(this.bLogPrefix + '_validateReferenceEntry sTargetTable: ' + this.sTargetTable + ' sField: ' + sField + ' sValue: ' + sValue + ' bMatch: ' + bMatch + ' sDependentField: ' + sDependentField);
			} // if log
			if ((bMatch) && (sDependentField)) {
				var sDependentOnField = '';
				var bIsDependentGroup = false;
				var grDict = new GlideRecord('sys_dictionary');
				if (grDict.get(edElementDescriptor.getUniqueID())) {
					sDependentOnField = grDict.getValue('dependent_on_field');
				} // if dict
				sDependentOnField = (sDependentOnField) ? sDependentOnField : sDependentField;
				if (this.grRecord.isValidField(sDependentOnField)) {
					var geDependentElement = this.grRecord.getElement(sDependentField);
					var edDependentElementDescriptor = geDependentElement.getED();
					var sDependentInternalType = String(edDependentElementDescriptor.getInternalType());
					if (sDependentInternalType == 'reference') {
						var sDependentTable = geDependentElement.getReferenceTable();
						if ((sDependentTable == 'sys_user_group') && (this._gtTable.getAbsoluteBase(grRefRecord.getTableName()) == 'sys_user')) {
							bIsDependentGroup = true;
							var grGroupMember = new GlideRecord('sys_user_grmember');
							grGroupMember.addEncodedQuery('group=' + this.grRecord.getValue(sDependentField) + '^user=' + grRefRecord.getUniqueValue());
							grGroupMember.query();
							if (!grGroupMember.next()) {
								this._errorHandler('value', '400_020', 'User is not a member of the group', '', [sField, grRefRecord.getDisplayValue(), grRefRecord.getTableName(), this.grRecord[sDependentField].getDisplayValue(), sDependentOnField], bNoActionError, false);
								return (bNoActionError === false);
							} // if user is member												
						} // if user group
					} // if reference
				} else {
					this._errorHandler('system', '400_016', 'Invalid dependent reference field configuration', '', [this.sTargetTable, sField, sDependentOnField], true, false);
					return false;
				} // if dependent element is valid
				if ((!bIsDependentGroup) && (this.grRecord.getValue(sDependentField)) && (grRefRecord.getValue(sDependentOnField) != this.grRecord.getValue(sDependentField))) {
					bMatch = false;
				} // if value in dependent record is not value in dependent field
			} // if match
		} // if valid ref record
		if ((this.bLog) && (this.sLogLevel == 'debug')) {
			gs.debug(this.bLogPrefix + '_validateReferenceEntry sTargetTable: ' + this.sTargetTable + ' sField: ' + sField + ' sValue: ' + sValue + ' bMatch: ' + bMatch + ' isValidRecord: ' + grRefRecord.isValidRecord());
		} // if log
		if ((!grRefRecord.isValidRecord()) || (!bMatch)) {
			var sDisplayValue = (grRefRecord.isValidRecord()) ? grRefRecord.getDisplayValue() : '';
			sDisplayValue = (sDisplayValue) ? sDisplayValue + ' [' + sValue + ']' : sValue;
			this._errorHandler('value', '400_017', 'Invalid value in reference field (ref qualifier)', '', [sField, sDisplayValue, '', sRefTable], bNoActionError, false);
			return (bNoActionError === false);
		} // if ref not valid
		return true;
	}, // function _validateReferenceEntry

	_evaluateAdvRefQualifier: function (sField) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var oVars = {
			'current': this.grRecord
		}; // vars object
		var gsEvaluator = new GlideScopedEvaluator();
		var grDictOrOverride = this._gtTable.getDictOrOverrideValue(this.sTargetTable, sField, 'reference_qual', true, '^use_reference_qualifier=advanced');
		return gsEvaluator.evaluateScript(grDictOrOverride, 'reference_qual', oVars);
	}, // function _evaluateAdvRefQualifier

	_runBusinessLogic: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		try {
			var aUpdateBusinessLogicChecks = this._getValue('aUpdateBusinessLogicChecks', [], this.oRecordConfig);
			aUpdateBusinessLogicChecks = (this._isValidArray(aUpdateBusinessLogicChecks)) ? aUpdateBusinessLogicChecks : [aUpdateBusinessLogicChecks];
			var sBeforeQuery = '',
				bBeforeMatch = false,
				sAfterQuery = '',
				bAfterMatch = false,
				sErrorMessage = '',
				bError = false;
			aUpdateBusinessLogicChecks.forEach(function (oUpdateBusinessLogicCheck) {
				sBeforeQuery = this._getValue('sBeforeQuery', '', oUpdateBusinessLogicCheck);
				sAfterQuery = this._getValue('sAfterQuery', '', oUpdateBusinessLogicCheck);
				sErrorMessage = this._getValue('sErrorMessage', '', oUpdateBusinessLogicCheck);
				if (sBeforeQuery) {
					var gfBeforeQuery = new GlideFilter(sBeforeQuery, '');
					gfBeforeQuery.setCaseSensitive(false);
					bBeforeMatch = gfBeforeQuery.match(this.grRecordOld, true);
				} // if before query
				if (sAfterQuery) {
					var gfAfterQuery = new GlideFilter(sAfterQuery, '');
					gfAfterQuery.setCaseSensitive(false);
					bAfterMatch = gfAfterQuery.match(this.grRecord, true);
				} // if after query
				if ((sBeforeQuery) && (sAfterQuery)) {
					if ((bBeforeMatch) && (bAfterMatch)) {
						bError = true;
					} // if before and after match
				} else {
					if (bBeforeMatch) {
						bError = true;
					} else if (bAfterMatch) {
						bError = true;
					} // if error
				} // if before and after
				if (bError) {
					this._errorHandler('record', '400_014', 'Update business logic check failed', '', [gs.getMessage(sErrorMessage)], true, false);
				} // if error
			}, this); // bl check
		} catch (oEx) {
			this._errorHandler('runtime', '500_002', 'Error processing business logic', '', [String(oEx)], true, false);
		} // try
		return (!this.bError);
	}, // function _runBusinessLogic

	_runCustomScripts: function (bRunBefore) {
		bRunBefore = (bRunBefore === true) ? true : false;
		var aCustomScripts = this._getValue('aCustomScripts', [], this.oRecordConfig);
		var oParams = {
			bLog: this._getValue('bLog', false, this.oRecordConfig),
			sAction: this.sAction,
			bIsValidRecord: this.bIsValidRecord,
			oRecordConfig: this.oRecordConfig,
			oRecordValues: this.oRecordValues,
			sTargetTable: this.sTargetTable,
			grRecord: this.grRecord,
			grRecordOld: this.grRecordOld
		}; // params
		var bScriptRunBefore = false;
		aCustomScripts.forEach(function (oCustomScript) {
			bScriptRunBefore = ((oCustomScript.hasOwnProperty('bRunBefore')) && (oCustomScript['bRunBefore'] === true)) ? true : false;
			if (bScriptRunBefore === bRunBefore) {
				if ((oCustomScript.hasOwnProperty('sScript')) && (oCustomScript['sScript'])) {
					try {
						sErrorMessage = this._gt.runFunction(oCustomScript['sScript'], oParams);
					} catch (oEx) {
						this._errorHandler('runtime', '500_010', 'Error processing custom script.', '', [JSON.stringify(oCustomScript), String(oEx)], false, false);
					} // try stateflow
				} // if script
			} // if run before
		}, this); // each custom script
	}, // function _runCustomScripts

	/***********************************************************************************************************
	*	Error handling functions
	************************************************************************************************************/

	_errorHandlerInit: function (oRecordConfig, oError) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		gs.flushMessages(); // flush messages before transaction
		this.oError = oError;
		this.sErrorReturnType = this._getValue('sErrorReturnType', 'normal', oRecordConfig);
		this.sTableSequenceId = this._getValue('sTableSequenceId', 'default', oRecordConfig);
		if (!this._gtObject.isObject(this.oError)) {
			this.oError = {};
		} // if error obj
		if (!this.oError.hasOwnProperty(this.sTableSequenceId)) {
			this.oError[this.sTableSequenceId] = {};
		}
		if (!this.oError[this.sTableSequenceId].hasOwnProperty('bError')) {
			this.oError[this.sTableSequenceId]['bError'] = false;
		} // if no action error
		if (!this.oError[this.sTableSequenceId].hasOwnProperty('bNoActionError')) {
			this.oError[this.sTableSequenceId]['bNoActionError'] = false;
		} // if no action error
		if (!this.oError[this.sTableSequenceId].hasOwnProperty('bFatalError')) {
			this.oError[this.sTableSequenceId]['bFatalError'] = false;
		} // if no fatal error
		if (!this.oError[this.sTableSequenceId].hasOwnProperty('aErrorMessages')) {
			this.oError[this.sTableSequenceId]['aErrorMessages'] = [];
		} // if no error msg
	}, // function _errorHandlerInit

	// sErrorType: runtime (exceptions), system (target instance config), config (object), record (security, save, stateflow etc.), value (single value or empty object)
	// aErrorDetailArgs of type "value" should have the following order: field, value, expected value or format, lookup table, others...
	_errorHandler: function (sErrorType, sErrorCode, sErrorMessage, aErrorMessageArgs, aErrorDetailArgs, bNoActionError, bFatalError) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		this.oError[this.sTableSequenceId]['bError'] = true;
		var sErrorHandlingType = this._getValue('oErrorHandling/oErrorType/' + sErrorType, 'reject', this.oRecordConfig);
		var sErrorHandlingCode = this._getValue('oErrorHandling/oErrorCode/' + sErrorCode, '', this.oRecordConfig);
		if ((sErrorHandlingType == 'ignore') || (sErrorHandlingCode == 'ignore')) {
			return '';
		} // if ignore
		if ((bNoActionError) && ((sErrorHandlingType.indexOf('reject') != -1) || (sErrorHandlingCode.indexOf('reject') != -1))) {
			this.oError[this.sTableSequenceId]['bNoActionError'] = true;
			if ((sErrorHandlingType == 'ignore_reject') || (sErrorHandlingCode == 'ignore_reject')) {
				return '';
			} // if ignore_reject
		} // if no action
		if ((bFatalError) && ((sErrorHandlingType.indexOf('reject') != -1) || (sErrorHandlingCode.indexOf('reject') != -1))) {
			this.oError[this.sTableSequenceId]['bFatalError'] = true;
			if ((sErrorHandlingType == 'ignore_reject') || (sErrorHandlingCode == 'ignore_reject')) {
				return '';
			} // if ignore_reject
		} // if fatal
		sErrorCode = (sErrorCode) ? sErrorCode : -1;
		aErrorMessageArgs = (this._isValidArray(aErrorMessageArgs)) ? aErrorMessageArgs : [];
		aErrorDetailArgs = ((this._isValidArray(aErrorDetailArgs))) ? aErrorDetailArgs : [];
		var sTranslatedErrorMessage = gs.getMessage('GlobalToolsRecordWriteValidate_' + sErrorCode + '_ErrorMessage', aErrorMessageArgs);
		sTranslatedErrorMessage = (sTranslatedErrorMessage) ? sTranslatedErrorMessage : sErrorMessage;
		var sTranslatedErrorDetail = gs.getMessage('GlobalToolsRecordWriteValidate_' + sErrorCode + '_ErrorDetail', aErrorDetailArgs);
		if (this.sErrorReturnType == 'code') {
			this.oError[this.sTableSequenceId]['aErrorMessages'].push(sErrorCode);
		} else if (this.sErrorReturnType == 'message') {
			this.oError[this.sTableSequenceId]['aErrorMessages'].push(sTranslatedErrorDetail);
		} else {
			var oErrorObj = {};
			oErrorObj['sCode'] = sErrorCode;
			oErrorObj['sMessage'] = sTranslatedErrorMessage;
			oErrorObj['sMessageDetail'] = sTranslatedErrorDetail;
			if (this.sErrorReturnType == 'full') {
				oErrorObj['sErrorType'] = sErrorType;
				oErrorObj['aMessageArgs'] = aErrorMessageArgs;
				oErrorObj['aMessageDetailArgs'] = aErrorDetailArgs;
			} // if error level full
			this.oError[this.sTableSequenceId]['aErrorMessages'].push(oErrorObj);
		} // if error level code	
	}, // function errorHandler

	_canContinue: function () {
		return !this.oError[this.sTableSequenceId]['bFatalError'];
	}, // function _canContinue

	_canDoAction: function () {
		return !this.oError[this.sTableSequenceId]['bNoActionError'];
	}, // function _canContinue

	_parseRecordError: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var bParsedError = false;
		var aGSErrorMessages = j2js(gs.getErrorMessages());
		if (aGSErrorMessages.length > 0) {
			var reTranslate = /&(nbsp|amp|quot|lt|gt);/g;
			var oTranslate = { 'nbsp': ' ', 'amp': '&', 'quot': '"', 'lt': '<', 'gt': '>' };
			var sErrorMessage = aGSErrorMessages.join('\n').replace(reTranslate, function (aMatch, sEntity) {
				return oTranslate[sEntity];
			}).replace(/&#(\d+);/gi, function (aMatch, iStr) {
				var iNum = parseInt(iStr, 10);
				return String.fromCharCode(iNum);
			}); // replace
			this._errorHandler('runtime', '500_008', 'Error processing business rules and engine', '', [String(sErrorMessage)], false, true);
			gs.flushMessages(); // flush messages after transaction
			bParsedError = true;
		} // if gs error messages
		var sErrorHandlingCacheName = this._getValue('oErrorHandling/sErrorHandlingCacheName', 'GlobalTools/oErrorMessages', this.oRecordConfig);
		if (this._gtCache.checkValue(sErrorHandlingCacheName)) {
			var oErrorMessages = this._gtCache.getValue(sErrorHandlingCacheName);
			var sErrorType = this._gt.getType(oErrorMessages);
			if ((sErrorType == 'string') && (oErrorMessages)) {
				this._errorHandler('runtime', '500_008', 'Error processing business rules and engine', '', [oErrorMessages], false, true);
			} else if ((sErrorType == 'array') && (oErrorMessages)) {
				this._errorHandler('runtime', '500_008', 'Error processing business rules and engine', '', [oErrorMessages.join('\n')], false, true);
			} else if ((sErrorType == 'object') && (oErrorMessages)) {
				this._errorHandler('runtime', '500_008', 'Error processing business rules and engine', '', [JSON.stringify(oErrorMessages)], false, true);
			} // if error type		
			this._gtCache.clearValue(sErrorHandlingCacheName);
			bParsedError = true;
		} // if cached error messages
		return bParsedError;
	}, // function _parseRecordError

	type: 'GlobalToolsRecordWriteValidate',
	version: '1.0.8',
	author: 'Tom Hauri',
	email: 'tom@hauri.biz'

};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-08-18 10:19:54</sys_created_on>
        <sys_id>a3321d6c1bb47150d5be777d8b4bcb80</sys_id>
        <sys_mod_count>750</sys_mod_count>
        <sys_name>GlobalToolsRecordWriteValidate</sys_name>
        <sys_package display_value="Global Tools" source="a39b8f3697816110b434f5f3a253af25">a39b8f3697816110b434f5f3a253af25</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global Tools">a39b8f3697816110b434f5f3a253af25</sys_scope>
        <sys_update_name>sys_script_include_a3321d6c1bb47150d5be777d8b4bcb80</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-11-24 06:49:22</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>a3321d6c1bb47150d5be777d8b4bcb80</id>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2024-08-13 13:39:13</sys_created_on>
        <sys_id>f6c5c9701b801610e50ddc61ab4bcb2c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-08-13 13:39:13</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
