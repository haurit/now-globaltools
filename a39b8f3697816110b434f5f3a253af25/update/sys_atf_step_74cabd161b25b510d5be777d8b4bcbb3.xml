<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step">
    <sys_atf_step action="INSERT_OR_UPDATE">
        <active>true</active>
        <callable_outputs/>
        <copied_from/>
        <description>Run Server Side Validation Script</description>
        <display_name>Run Server Side Script</display_name>
        <inputs/>
        <mugshots_cache_json/>
        <notes/>
        <order>1</order>
        <step_config display_value="Run Server Side Script">41de4a935332120028bc29cac2dc349a</step_config>
        <sys_class_name>sys_atf_step</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-09-30 06:33:46</sys_created_on>
        <sys_id>74cabd161b25b510d5be777d8b4bcbb3</sys_id>
        <sys_mod_count>381</sys_mod_count>
        <sys_name>Run Server Side Script</sys_name>
        <sys_package display_value="Global Tools" source="a39b8f3697816110b434f5f3a253af25">a39b8f3697816110b434f5f3a253af25</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global Tools">a39b8f3697816110b434f5f3a253af25</sys_scope>
        <sys_update_name>sys_atf_step_74cabd161b25b510d5be777d8b4bcbb3</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2025-06-25 11:39:19</sys_updated_on>
        <table/>
        <test display_value="GlobalToolsRecordWriteValidate Tests">a44784251b6db110d5be777d8b4bcb92</test>
        <timeout/>
        <warning_message/>
    </sys_atf_step>
    <sys_variable_value action="delete_multiple" query="document_key=74cabd161b25b510d5be777d8b4bcbb3"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>74cabd161b25b510d5be777d8b4bcbb3</document_key>
        <order>200</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-09-30 06:33:46</sys_created_on>
        <sys_id>56dabd161b25b510d5be777d8b4bcb3a</sys_id>
        <sys_mod_count>381</sys_mod_count>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2025-06-25 11:39:19</sys_updated_on>
        <value>(function (outputs, steps, params, stepResult, assertEqual) {&#13;
&#13;
	var bLog = false;&#13;
	var bRunSingleTest = false;&#13;
	var _gtWriteValidate = new global.GlobalToolsRecordWriteValidate();&#13;
	var _gt = new global.GlobalTools();&#13;
	var _gtArray = new global.GlobalToolsArray();&#13;
	var _gtObject = new global.GlobalToolsObject();&#13;
&#13;
	var _gtATF = new global.GlobalToolsATF('GlobalToolsRecordWriteValidate', _gtWriteValidate, bLog, outputs, steps, params, stepResult, assertEqual);&#13;
	var grRecord;&#13;
&#13;
	var oRecordConfig = {};&#13;
	var oRecordValues = {};&#13;
	var oError = {};&#13;
	var oIREPayloadExpected = {&#13;
		'items': [{&#13;
			'internal_id': '',&#13;
			'lookup': [],&#13;
			'values': {}&#13;
		}]&#13;
	};&#13;
	var aErrorArray = [];&#13;
	var aFunctions = ['validateAndWrite', 'validateAndReturnIREObject'];&#13;
	var oExpectedResult = {};&#13;
&#13;
	/***********************************************************************************************************&#13;
	*	Fatal Errors&#13;
	************************************************************************************************************/&#13;
	if (!bRunSingleTest) {&#13;
		aFunctions.forEach(function (sFunction) {&#13;
&#13;
			oRecordConfig = {};&#13;
			oRecordValues = {};&#13;
			oExpectedResult = (sFunction == 'validateAndWrite') ? '-1' : undefined;&#13;
&#13;
			// 405_001 Missing record config object or sTargetTable property&#13;
			oError = {};&#13;
			_gtATF.runATF(sFunction, oExpectedResult);&#13;
&#13;
			// 405_001 Missing record config object or sTargetTable property&#13;
			oError = {};&#13;
			_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			if ((!_gtArray.isValidArray(aErrorArray)) || (_gtObject.getValue('sCode', '', aErrorArray[0]) != '405_001')) {&#13;
				_gtATF.addError(sFunction, 'Test 002 did not return error "405_001 - Missing or empty configuration object or target table".');&#13;
			} // if error&#13;
&#13;
			// 400_001 Missing or empty record values object&#13;
			oRecordConfig = {&#13;
				'sTargetTable': 'incident',&#13;
				'sErrorReturnType': 'code',&#13;
			}; // config&#13;
			oError = {};&#13;
			_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_001'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 003 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
&#13;
			// 400_033 Invalid key configuration in config object&#13;
			oRecordConfig = {&#13;
				'sTargetTable': 'incident',&#13;
				'sErrorReturnType': 'code',&#13;
				'bUpdate': true,&#13;
			}; // config&#13;
			oRecordValues = {&#13;
				'active': 'true',&#13;
			}; // values&#13;
			oError = {};&#13;
			_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_033'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 004 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
&#13;
			// 405_003 Invalid action: empty&#13;
			oRecordConfig = {&#13;
				'sTargetTable': 'incident',&#13;
				'sErrorReturnType': 'code',&#13;
			}; // config&#13;
			oRecordValues = {&#13;
				'sys_id': '-1',&#13;
				'active': 'true',&#13;
			}; // values&#13;
			oError = {};&#13;
			_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['405_003'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 005 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
&#13;
			// 404_001 Invalid action: record delete&#13;
			oRecordConfig = {&#13;
				'sTargetTable': 'incident',&#13;
				'sErrorReturnType': 'code',&#13;
				'bDelete': true,&#13;
			}; // config&#13;
			oRecordValues = {&#13;
				'sys_id': '-1',&#13;
				'active': 'true',&#13;
			}; // values&#13;
			oError = {};&#13;
			_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['404_001'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 006 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
&#13;
			// 405_002 Invalid action: conflict&#13;
			oRecordConfig = {&#13;
				'sTargetTable': 'incident',&#13;
				'sErrorReturnType': 'code',&#13;
				'bDelete': true,&#13;
				'bUpdate': true,&#13;
			}; // config&#13;
			oRecordValues = {&#13;
				'sys_id': '-1',&#13;
				'active': 'true',&#13;
			}; // values&#13;
			oError = {};&#13;
			_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['405_002'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 007 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
&#13;
			// 404_003 Invalid action: record update&#13;
			oRecordConfig = {&#13;
				'sTargetTable': 'incident',&#13;
				'sErrorReturnType': 'code',&#13;
				'bDelete': false,&#13;
				'bUpdate': true,&#13;
			}; // config&#13;
			oRecordValues = {&#13;
				'sys_id': '-1',&#13;
				'active': 'true',&#13;
			}; // values&#13;
			oError = {};&#13;
			_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['404_003'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 008 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
&#13;
			// 404_002 Invalid action: record insert&#13;
			grRecord = _gtATF.getRecord('incident', 'active=true');&#13;
			oRecordConfig = {&#13;
				'sTargetTable': 'incident',&#13;
				'sErrorReturnType': 'code',&#13;
				'aKeys': 'sys_id',&#13;
				'bDelete': false,&#13;
				'bUpdate': false,&#13;
				'bInsert': true,&#13;
			}; // config&#13;
			oRecordValues = {&#13;
				'sys_id': grRecord.getUniqueValue(),&#13;
				'active': 'true',&#13;
			}; // values&#13;
			oError = {};&#13;
			if (grRecord) {&#13;
				oExpectedResult = (sFunction == 'validateAndWrite') ? grRecord.getUniqueValue() : undefined;&#13;
				_gtATF.runATF(sFunction, oExpectedResult, oRecordConfig, oRecordValues, oError);&#13;
				aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
				aErrorsExpected = ['404_002'];&#13;
				if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
					oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
					_gtATF.addError('validateAndWrite', 'Test 009 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
				} // if same error&#13;
			} else {&#13;
				_gtATF.addError('validateAndWrite', 'Test 009 test data error (incident with query "active=true" did not return a valid record).');&#13;
			} // if valid test data&#13;
&#13;
			// 400_102 Access denied: record write&#13;
			grRecord = _gtATF.getRecord('incident', 'state=2^caller_id.name!=abraham.lincoln');&#13;
			oRecordConfig = {&#13;
				'sTargetTable': 'incident',&#13;
				'aKeys': ['number'],&#13;
				'bUseGlideRecordSecure': true,&#13;
				'sErrorReturnType': 'code',&#13;
				'sImpersonateDefaultUser': 'abraham.lincoln',&#13;
				'aMandatoryFields': ['caller_id'],&#13;
				'sAction': 'update',&#13;
			}; // config&#13;
			oRecordValues = {&#13;
				'number': grRecord.getDisplayValue(),&#13;
				'short_description': 'sugus0',&#13;
			}; // values&#13;
			oError = {};&#13;
			if (grRecord) {&#13;
				oExpectedResult = (sFunction == 'validateAndWrite') ? '-1' : undefined;&#13;
				_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
				aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
				aErrorsExpected = ['400_102'];&#13;
				if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
					oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
					_gtATF.addError('validateAndWrite', 'Test 010 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
				} // if same error&#13;
			} else {&#13;
				_gtATF.addError('validateAndWrite', 'Test 010 test data error (incident with query "state=2^caller_id.name!=abraham.lincoln" did not return a valid record).');&#13;
			} // if valid test data&#13;
&#13;
			grRecord = _gtATF.getRecord('incident', 'state=2^caller_id.name!=abraham.lincoln');&#13;
			oRecordConfig = {&#13;
				'sTargetTable': 'incident',&#13;
				'bUseGlideRecordSecure': true,&#13;
				'aKeys': ['number'],&#13;
				'sErrorReturnType': 'code',&#13;
				'sImpersonateDefaultUser': 'abraham.lincoln',&#13;
				'sAction': 'delete',&#13;
			}; // config&#13;
			oRecordValues = {&#13;
				'number': grRecord.getDisplayValue(),&#13;
			}; // values&#13;
			oError = {};&#13;
			if (grRecord) {&#13;
				_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
				aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
				aErrorsExpected = ['400_103'];&#13;
				if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
					oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
					_gtATF.addError('validateAndWrite', 'Test 011 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
				} // if same error&#13;
			} else {&#13;
				_gtATF.addError('validateAndWrite', 'Test 011 test data error (incident with query "state=2^caller_id.name!=abraham.lincoln" did not return a valid record).');&#13;
			} // if valid test data&#13;
&#13;
		}, this); // each function&#13;
&#13;
		//500_003 Error inserting record&#13;
		//500_004 Error updating record&#13;
		//500_005 Error deleting record&#13;
&#13;
		/***********************************************************************************************************&#13;
		*	Validation Errors&#13;
		************************************************************************************************************/&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'sys_user',&#13;
			'sAction': 'insert',&#13;
			'aMandatoryFields': ['user_name', 'sugus10'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sTemplateName': 'sugus11',&#13;
			'bTemplateIsMandatory': true,&#13;
			'aFields': ['sugus12', { 'aKeys': ['name'] }, 1],&#13;
			'sImpersonateDefaultUser': 'sugus13',&#13;
			'bImpersonateMandatory': true,&#13;
			'bErrorOnAddlFieldsInValues': true,&#13;
			'aUpdateBusinessLogicChecks': [{ 'sBeforeQuery': {} }],&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'active': 'sugus0',&#13;
			'last_login': 'sugus1',&#13;
			'last_login_time': 'sugus2',&#13;
			'failed_attempts': 'sugus3',&#13;
			'email': 'sugus4',&#13;
			'phone': 'sugus5',&#13;
			'company': 'sugus6',&#13;
			'notification': 'sugus8',&#13;
			'sugus13': 'sugus9'&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		var aErrorsExpected = ['400_005', '400_010', '400_011', '400_021', '400_024', '400_023', '400_026', '400_028', '400_029', '400_015', '400_019', '400_002', '400_003', '400_012', '400_013', '400_031', '403_001', '403_002', '400_032', '500_002'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			var oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			gs.info('tomtom: ' + JSON.stringify(oErrorDiff) + ' aErrorsExpected: ' + aErrorsExpected + ' aErrorArray: ' + aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 101 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		grUser = _gtATF.getRecord('sys_user', 'user_name=abraham.lincoln');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'sys_user',&#13;
			'sAction': 'insert',&#13;
			'aMandatoryFields': ['user_name'],&#13;
			'sErrorReturnType': 'code',&#13;
			'aFields': [{ 'sField': 'manager', 'aKeys': ['user_name'] }],&#13;
			'sImpersonateDefaultUser': grUser.getUniqueValue(),&#13;
			'bImpersonateMandatory': true,&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'active': 'true',&#13;
			'last_login': '2023-12-31',&#13;
			'last_login_time': '31.12.2022 17:00',&#13;
			'failed_attempts': '10',&#13;
			'email': 'tom@hauri.biz',&#13;
			'phone': '+41787979787',&#13;
			'company': '93d4ecfac0a8000b6294d71b733977fb', // ServiceNow&#13;
			'manager': grUser.getValue('user_name'),&#13;
			'notification': 1&#13;
		};&#13;
&#13;
		oError = {};&#13;
		if (grUser) {&#13;
			_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_005'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 102 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 102 test data error (sys_user with query "user_name=abraham.lincoln" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'sys_holiday',&#13;
			'aMandatoryFields': ['name'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'start_time1': 'sugus0',&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_005', '400_025'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 103 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'start_time1': '22:59:59',&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_005'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 104 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		grRecord = _gtATF.getRecord('core_company', 'vendor=false');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'cmdb_ci_server',&#13;
			'aMandatoryFields': ['name'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'ip_address': 'sugus0',&#13;
			'vendor': grRecord.getUniqueValue(),&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_005', '400_030', '400_017'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 105 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 105 test data error (core_company with query "vendor=false" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'ip_address': '192.168.0.1',&#13;
			'vendor': '93d4ecfac0a8000b6294d71b733977fb', // ServiceNow is a vendor&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_005'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 106 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aMandatoryFields': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
			'aFields': [{ 'sField': 'assignment_group', 'aKeys': ['name'] }, { 'sField': 'assigned_to', 'aKeys': ['user_name'] }],&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'origin_id': 'sugus0',&#13;
			'origin_table': 'sugus1',&#13;
			'calendar_duration': 'sugus2',&#13;
			'assignment_group': 'Hardware',&#13;
			'assigned_to': 'luke.wilson'&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_005', '400_020', '400_035', '400_036', '400_034'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 107 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'active=true');&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'origin_id': grRecord.getUniqueValue(),&#13;
			'origin_table': 'incident',&#13;
			'calendar_duration': '1 23:59:59',&#13;
			'assignment_group': 'Hardware',&#13;
			'assigned_to': 'fred.luddy',&#13;
			'close_code': 'Duplicate',&#13;
			'close_notes': 'sugus6',&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_005'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 108 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 108 test data error (incident with query "active=true" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'request_filter',&#13;
			'aMandatoryFields': ['short_description'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'secondary_display': 'sugus0',&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_005', '400_022'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 109 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'request_filter',&#13;
			'aMandatoryFields': ['short_description'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'secondary_display': ['sugus0'],&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_005'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 110 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'active=true^stateNOT IN6,7');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aKeys': ['number'],&#13;
			'bUseGlideRecordSecure': true,&#13;
			'aMandatoryFields': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'bTemplateDeleteFieldValue': true,&#13;
			'bStateFlowActionDeleteFieldValue': true,&#13;
			'bImpersonateDeleteFieldValue': true,&#13;
			'bStateFlowActionIsMandatory': true,&#13;
			'sStateFlowActionValueField': 'test_action',&#13;
			'oStateFlowAction': {&#13;
				'sugus7': {&#13;
					'sStateAction': 'sugus8'&#13;
				}&#13;
			},&#13;
			'sImpersonateValueField': 'test_imp_user',&#13;
			'sTemplateValueField': 'test_template',&#13;
			'aIgnoreChoiceFields': [],&#13;
			'bErrorOnAddlFieldsInValues': true,&#13;
			'aKeysDefaultReferenceFields': 'name',&#13;
			'sAction': 'update',&#13;
			'aFields': ['company', { 'sField': 'short_description', 'sPrefix': 'PRE - ', 'sPostfix': ' - POST' }, { 'sField': 'assigned_to', 'sRefTable': 'sys_user', 'aKeys': 'user_name', 'sDefaultValue': 'fred.luddy' }, { 'sField': 'caller_id', 'sRefLookupScript': 'function (oParams) {if (oParams["sValue"] == "sugus4") {var grUser = new GlideRecord("sys_user");if(grUser.get("user_name", "beth.anglin")) {return grUser.getUniqueValue();}}}' }, 'assignment_group', 'needs_attention', 'impact', 'sys_id', 'sugus'],&#13;
			'oTransformConfig': {&#13;
				'oFieldMap': {&#13;
					'impact': {&#13;
						'oMap': {&#13;
							'sugus5': '1'&#13;
						}&#13;
					}&#13;
				},&#13;
				'oTypeMap': {&#13;
					'boolean': {&#13;
						'oMap': {&#13;
							'sugus6': true&#13;
						}&#13;
					},&#13;
					'reference': {&#13;
						'sys_user_group': {&#13;
							'sRefLookupScript': 'function (oParams) {if (oParams["sValue"] == "sugus7") {var grGroup = new GlideRecord("sys_user_group");if(grGroup.get("name", "Hardware")) {return grGroup.getUniqueValue();}}}',&#13;
						}&#13;
					}&#13;
				}&#13;
			},&#13;
			'aUpdateBusinessLogicChecks': {&#13;
				'sBeforeQuery': 'activeISEMPTY',&#13;
				'sAfterQuery': 'activeISEMPTY',&#13;
				'sErrorMsg': 'raider1'&#13;
			}&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'number': grRecord.getDisplayValue(),&#13;
			'company': 'ACME North America',&#13;
			'test_template': 'sugus0',&#13;
			'test_imp_user': 'sugus1',&#13;
			'test_action': 'sugus2',&#13;
			'short_description': 'sugus3',&#13;
			'caller_id': 'sugus4',&#13;
			'impact': 'sugus5',&#13;
			'assignment_group': 'sugus6',&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_003', '403_001', '400_011', '400_015', '400_020'];&#13;
&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 111 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
				gs.error('oError: ' + JSON.stringify(oError));&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 111 test data error (incident with query "active=true^stateNOT IN6,7" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'state=2');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aKeys': ['number'],&#13;
			'bUseGlideRecordSecure': true,&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'update',&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'number': grRecord.getDisplayValue(),&#13;
			'state': 6,&#13;
			'incident_state': 6,&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_004'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 112 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 112 test data error (incident with query "state=2" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'state=2');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aKeys': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'update',&#13;
			'aMandatoryFields': ['caller_id'],&#13;
			'aUpdateBusinessLogicChecks': [&#13;
				{&#13;
					'sBeforeQuery': 'state!=3',&#13;
					'sAfterQuery': 'state!=3',&#13;
					'sErrorMsg': 'raider1'&#13;
				}&#13;
			]&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'number': grRecord.getDisplayValue(),&#13;
			'state': 6,&#13;
			'incident_state': 6,&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_004', '400_005', '400_014'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 113 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 113 test data error (incident with query "state=2" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'state=2');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aKeys': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'update',&#13;
			'aMandatoryFields': ['caller_id'],&#13;
			'aUpdateBusinessLogicChecks': [&#13;
				{&#13;
					'sBeforeQuery': 'state!=3',&#13;
					'sAfterQuery': 'state!=3',&#13;
					'sErrorMsg': 'raider1'&#13;
				}&#13;
			]&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'number': grRecord.getDisplayValue(),&#13;
			'state': 3,&#13;
			'incident_state': 3,&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_005'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 114 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 114 test data error (incident with query "state=2" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'interaction',&#13;
			//'aKeys': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
			'aMandatoryFields': ['caller_id'],&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			//'number': grRecord.getDisplayValue(),&#13;
			'short_description': 'sugus0',&#13;
			'state_reason': 'sugus1',&#13;
			'type': 'video',&#13;
			'sys_mod_count': 1,&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_004', '400_012', '400_105', '400_019'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 115 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'bUseGlideRecordSecure': true,&#13;
			'sErrorReturnType': 'code',&#13;
			'sImpersonateDefaultUser': 'abraham.lincoln',&#13;
			'aFields': [{ 'sField': 'caller_id', 'aKeys': 'user_name' }],&#13;
			'sAction': 'insert',&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			//'number': grRecord.getDisplayValue(),&#13;
			'caller_id': 'abraham.lincoln',&#13;
			'short_description': 'sugus0',&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_106'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 116 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		grRecord = _gtATF.getRecord('cmn_location', 'nameISNOTEMPTY^companyISNOTEMPTY');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'sErrorReturnType': 'code',&#13;
			'bKeysDefaultReferenceDisplayField': true,&#13;
			'aMandatoryFields': ['caller_id'],&#13;
			'sAction': 'insert',&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'company': grRecord.getValue('company'),&#13;
			'location': grRecord.getDisplayValue(),&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_005'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 117 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 117 test data error (cmn_location with query "nameISNOTEMPTY^companyISNOTEMPTY" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'cmn_location',&#13;
			'sErrorReturnType': 'code',&#13;
			'aMandatoryFields': ['name'],&#13;
			'sAction': 'insert',&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'latitude': 'sugus1',&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_005', '400_027'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 118 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'cmn_location',&#13;
			'sErrorReturnType': 'code',&#13;
			'aMandatoryFields': ['name'],&#13;
			'sAction': 'insert',&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'latitude': '1.0123',&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_005'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 119 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		// 400_038 Input values check failed&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
			'aInputValueChecks': [&#13;
				{&#13;
					'sField': 'short_description',&#13;
					'sRegExpPattern': '^[a-z0-9\\s]{6,}$',&#13;
					'sRegExpFlags': 'gi',&#13;
					'sErrorMessage': 'Title should not contain special characters and must be 6 characters long: {1}'&#13;
				},&#13;
				{&#13;
					'sField': 'impact',&#13;
					'sScript': 'var i="sValue";if((!Number.isNaN(i))&amp;&amp;(i&gt;=1)&amp;&amp;(i&lt;=3)){bValid = true;};',&#13;
					'sErrorMessage': 'Impact must be a integer number from 1-3 (Field is: {0} Value is: {1})'&#13;
				}&#13;
			],&#13;
		}; // config&#13;
		oRecordValues = {&#13;
			'active': 'true',&#13;
			'short_description': 'sg!?_',&#13;
			'impact': 99,&#13;
		}; // values&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_019', '400_038'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 120 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		// 400_038 Input values check failed&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
			'aInputValueChecks': [&#13;
				{&#13;
					'sField': 'short_description',&#13;
					'sRegExpPattern': '^[a-z0-9\\s]{6,}$',&#13;
					'sRegExpFlags': 'gi',&#13;
					'sErrorMessage': 'Title should not contain special characters and must be 6 characters long: {1}'&#13;
				},&#13;
				{&#13;
					'sField': 'impact',&#13;
					'sScript': 'var i="sValue";if((!Number.isNaN(i))&amp;&amp;(i&gt;=1)&amp;&amp;(i&lt;=3)){bValid = true;};',&#13;
					'sErrorMessage': 'Impact must be a integer number from 1-3 (Field is: {0} Value is: {1})'&#13;
				}&#13;
			],&#13;
			'aMandatoryFields': ['caller_id'],&#13;
		}; // config&#13;
		oRecordValues = {&#13;
			'active': 'true',&#13;
			'short_description': 'this is a valid title',&#13;
			'impact': 2,&#13;
		}; // values&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_005'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 121 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'state=2');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aKeys': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'update',&#13;
			'aDynamicFieldConfig': [&#13;
				{&#13;
					'sField': 'incident_state',&#13;
					'sRegExpPattern': '^3$',&#13;
					'sRegExpFlags': 'gi',&#13;
					'aMandatoryFields': ['hold_reason', 'work_notes'], // impact is mandatory additionally &#13;
				}, // conditional field cfg&#13;
			], // conditional field cfgs&#13;
		}; // config&#13;
		oRecordValues = {&#13;
			'active': 'true',&#13;
			'number': grRecord.getDisplayValue(),&#13;
			'incident_state': 3,&#13;
		}; // values&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_005'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 122 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 122 test data error (incident with query "state=2" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'state=2');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aKeys': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'update',&#13;
			'aDynamicFieldConfig': [&#13;
				{&#13;
					'sField': 'incident_state',&#13;
					'sRegExpPattern': '^3$',&#13;
					'sRegExpFlags': 'gi',&#13;
					'aMandatoryFields': ['hold_reason', 'work_notes'], // impact is mandatory additionally &#13;
				}, // conditional field cfg&#13;
			], // conditional field cfgs&#13;
		}; // config&#13;
		oRecordValues = {&#13;
			'active': 'true',&#13;
			'number': grRecord.getDisplayValue(),&#13;
			'incident_state': 1,&#13;
			'sugus0': 'sugus1',&#13;
		}; // values&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_013'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 123 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 123 test data error (incident with query "state=2" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		oRecordConfig['bErrorOnInvalidFieldsInValues'] = false;&#13;
		oRecordValues = {&#13;
			'active': 'true',&#13;
			'number': grRecord.getDisplayValue(),&#13;
			'incident_state': 'sugus1',&#13;
			'sugus0': 'sugus1',&#13;
		}; // values&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_019'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 124 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'state=2');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aKeys': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'update',&#13;
			'aDynamicFieldConfig': [&#13;
				{&#13;
					'sField': 'incident_state',&#13;
					'sScript': 'bValid = ("sValue" == "3") ? true : false;',&#13;
					'aMandatoryFields': ['hold_reason', 'work_notes'], // impact is mandatory additionally &#13;
				}, // conditional field cfg&#13;
			], // conditional field cfgs&#13;
		}; // config&#13;
		oRecordValues = {&#13;
			'active': 'true',&#13;
			'number': grRecord.getDisplayValue(),&#13;
			'incident_state': 3,&#13;
		}; // values&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_005'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 125 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 125 test data error (incident with query "state=2" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'state=2');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aKeys': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'update',&#13;
			'aDynamicFieldConfig': [&#13;
				{&#13;
					'sField': 'incident_state',&#13;
					'sScript': 'bValid = ("sValue" == "3") ? true : false;',&#13;
					'aMandatoryFields': ['hold_reason', 'work_notes'], // impact is mandatory additionally &#13;
				}, // conditional field cfg&#13;
			], // conditional field cfgs&#13;
		}; // config&#13;
		oRecordValues = {&#13;
			'active': 'true',&#13;
			'number': grRecord.getDisplayValue(),&#13;
			'incident_state': 1,&#13;
			'sugus0': 'sugus1',&#13;
		}; // values&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_013'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 126 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 126 test data error (incident with query "state=2" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'incident_state=1');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aKeys': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'bTemplateIsMandatory': true,&#13;
			'sAction': 'update',&#13;
			'bErrorOnAddlFieldsInValues': true,&#13;
			'aFields': ['active', 'number'],&#13;
			'aDynamicFieldConfig': [&#13;
				{&#13;
					'sQueryCondition': 'incident_state=1', // if query on old record returns true, use below config&#13;
					'aFields': ['caller_id'], // caller must be provided&#13;
				}, // conditional field cfg&#13;
			], // conditional field cfgs&#13;
		}; // config&#13;
		oRecordValues = {&#13;
			'active': 'true',&#13;
			'number': grRecord.getDisplayValue(),&#13;
			'caller_id': grRecord.getValue('caller_id'),&#13;
		}; // values&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_002'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 127 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 127 test data error (incident with query "incident_state=1" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'incident_state=1');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aKeys': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'bTemplateIsMandatory': true,&#13;
			'sAction': 'update',&#13;
			'bErrorOnAddlFieldsInValues': true,&#13;
			'aFields': ['active', 'number', 'caller_id'],&#13;
			'aDynamicFieldConfig': [&#13;
				{&#13;
					'sQueryCondition': 'incident_state=1', // if query on old record returns true, use below config&#13;
					'aFieldsRemoval': ['caller_id'], // caller must be provided&#13;
				}, // conditional field cfg&#13;
			], // conditional field cfgs&#13;
		}; // config&#13;
		oRecordValues = {&#13;
			'active': 'true',&#13;
			'number': grRecord.getDisplayValue(),&#13;
			'caller_id': grRecord.getValue('caller_id'),&#13;
		}; // values&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_002', '400_010'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 128 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 128 test data error (incident with query "incident_state=1" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'incident_state=2');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aKeys': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'bTemplateIsMandatory': true,&#13;
			'sAction': 'update',&#13;
			'aFields': ['active', 'number'],&#13;
			'aMandatoryFields': ['caller_id'],&#13;
			'aDynamicFieldConfig': [&#13;
				{&#13;
					'sQueryCondition': 'incident_state=1', // if query returns true, use below config&#13;
					'aMandatoryFieldsRemoval': ['caller_id'], // caller must be provided&#13;
				}, // conditional field cfg&#13;
			], // conditional field cfgs&#13;
		}; // config&#13;
		oRecordValues = {&#13;
			'active': 'true',&#13;
			'number': grRecord.getDisplayValue(),&#13;
		}; // values&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_002', '400_005'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 129 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 129 test data error (incident with query "incident_state=2" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'incident_state=1');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aKeys': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'bTemplateIsMandatory': true,&#13;
			'sAction': 'update',&#13;
			'aFields': ['active', 'number'],&#13;
			'aMandatoryFields': ['caller_id'],&#13;
			'aDynamicFieldConfig': [&#13;
				{&#13;
					'sQueryCondition': 'incident_state=1', // if query returns true, use below config&#13;
					'aMandatoryFieldsRemoval': ['caller_id'], // caller must not be provided&#13;
				}, // conditional field cfg&#13;
			], // conditional field cfgs&#13;
		}; // config&#13;
		oRecordValues = {&#13;
			'active': 'true',&#13;
			'number': grRecord.getDisplayValue(),&#13;
		}; // values&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_002'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 130 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 130 test data error (incident with query "incident_state=1" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		// Test source field and mandatory field have errors&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
			'aFields': [&#13;
				{&#13;
					'sField': 'short_description',&#13;
					'sSourceField': 'sugus1'&#13;
				}, // field&#13;
			], // fields&#13;
			'aMandatoryFields': ['sugus0'],&#13;
		}; // config&#13;
		oRecordValues = {&#13;
			'sugus1': 'sugus1',&#13;
		}; // values&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_012'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 131 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		// Test dedicated choice tables&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'cmdb_ci_appl',&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
			'oErrorHandling': {&#13;
				'oErrorCode': {&#13;
					'404_003': 'ignore', // ignore errors for CIs that don't exist (sAction: update)&#13;
				}, // by error code&#13;
			} // error handling&#13;
		}; // config&#13;
		oRecordValues = {&#13;
			'used_for': 'Production',&#13;
			'impact': 99,&#13;
		}; // values&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_013'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 132 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		// Error handling ignore_reject&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'sErrorReturnType': 'code',&#13;
			'bDelete': false,&#13;
			'bUpdate': true,&#13;
			oErrorHandling: { // generically the following error handling options can be configure: reject (default), ignore, warn&#13;
				oErrorCode: {&#13;
					'404_003': 'ignore_reject', // ignore errors for CIs that don't exist (sAction: update)&#13;
				}, // by error code&#13;
			} // error handling&#13;
		}; // config&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'active': 'true',&#13;
		}; // values&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = [];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 133 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		grRecord = _gtATF.getRecord('incident', 'state=2');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'incident',&#13;
			'aKeys': ['number'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'update',&#13;
			//'bErrorOnInvalidFieldsInValues': false,&#13;
			'bErrorOnAddlFieldsInValues': true,&#13;
			'aFields': [&#13;
				{ 'sField': 'short_description', 'sSourceField': 'u_title' },&#13;
			], // fields&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'number': grRecord.getDisplayValue(),&#13;
			'u_title': 'sugus',&#13;
			//'short_description': 'test1'&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', grRecord.getUniqueValue(), oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = [];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 134 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 134 test data error (incident with query "state=2" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		if (grRecord.getUniqueValue() == 'sugus') {&#13;
			_gtATF.addError('validateAndWrite', 'Test 134 did not map value correctly from source field to field.');&#13;
		} // if source field not applied to field correctly&#13;
&#13;
		// Test Dependent Field Ref Qualifier (Correct)&#13;
		grRecord = _gtATF.getRecord('sys_user', 'companyISNOTEMPTY^company.customer=true');&#13;
&#13;
		var grCompany = _gtATF.getRecord('core_company', 'sys_id=' + grRecord.getValue('company'));&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'cmn_department',&#13;
			'aMandatoryFields': ['name'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'company': grCompany.getUniqueValue(),&#13;
			'primary_contact': grRecord.getUniqueValue(),&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			if (grCompany) {&#13;
				_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
				aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
				aErrorsExpected = ['400_005'];&#13;
				if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
					oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
					_gtATF.addError('validateAndWrite', 'Test 135 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
				} // if same error&#13;
			} else {&#13;
				_gtATF.addError('validateAndWrite', 'Test 135 test data error (core_company with query "sys_id!=' + grRecord.getValue('company') + '^customer=true" did not return a valid record).');&#13;
			} // if valid test data&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 135 test data error (sys_user with query "companyISNOTEMPTY^company.customer=true" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		grCompany = _gtATF.getRecord('core_company', 'sys_id!=' + grRecord.getValue('company') + '^customer=true');&#13;
&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'cmn_department',&#13;
			'aMandatoryFields': ['name'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'company': grCompany.getUniqueValue(),&#13;
			'primary_contact': grRecord.getUniqueValue(),&#13;
		}; // values&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			if (grCompany) {&#13;
				_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
				aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
				aErrorsExpected = ['400_005', '400_017'];&#13;
				if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
					oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
					_gtATF.addError('validateAndWrite', 'Test 136 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
				} // if same error&#13;
			} else {&#13;
				_gtATF.addError('validateAndWrite', 'Test 136 test data error (core_company with query "sys_id!=' + grRecord.getValue('company') + '^customer=true" did not return a valid record).');&#13;
			} // if valid test data&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 136 test data error (sys_user with query "companyISNOTEMPTY^company.customer=true" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		// Test Dependent Field Ref Qualifier (No error on empty dependent field, same as UI behavior)&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'cmn_department',&#13;
			'aMandatoryFields': ['name'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'company': '',&#13;
			'primary_contact': grRecord.getUniqueValue(),&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
		aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
		aErrorsExpected = ['400_005'];&#13;
		if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
			oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
			_gtATF.addError('validateAndWrite', 'Test 137 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
		} // if same error&#13;
&#13;
		// Test Dependent Field Ref Qualifier (No error when both are empty)&#13;
		grRecord = _gtATF.getRecord('sys_user', 'companyISEMPTY');&#13;
		oRecordConfig = {&#13;
			'sTargetTable': 'cmn_department',&#13;
			'aMandatoryFields': ['name'],&#13;
			'sErrorReturnType': 'code',&#13;
			'sAction': 'insert',&#13;
		}; // config&#13;
&#13;
		oRecordValues = {&#13;
			'sys_id': '-1',&#13;
			'company': '',&#13;
			'primary_contact': grRecord.getUniqueValue(),&#13;
		}; // values&#13;
&#13;
		oError = {};&#13;
		if (grRecord) {&#13;
			_gtATF.runATF('validateAndWrite', '-1', oRecordConfig, oRecordValues, oError);&#13;
			aErrorArray = _gtArray.unique(_gtObject.getValue('default/aErrorMessages', '', oError));&#13;
			aErrorsExpected = ['400_005'];&#13;
			if (!_gt.isEqual(aErrorArray, aErrorsExpected)) {&#13;
				oErrorDiff = _gtArray.getAddRemoveFromArrays(aErrorsExpected, aErrorArray);&#13;
				_gtATF.addError('validateAndWrite', 'Test 138 did not return error(s) "' + oErrorDiff['add'] + '" but had additional error(s) "' + oErrorDiff['remove'] + '".');&#13;
			} // if same error&#13;
		} else {&#13;
			_gtATF.addError('validateAndWrite', 'Test 138 test data error (sys_user with query "companyEMPTY" did not return a valid record).');&#13;
		} // if valid test data&#13;
&#13;
		if (grRecord) {&#13;
			gs.info('GlobalToolsRecordWriteValidate Tests record: ' + grRecord.getDisplayValue() + ' oError: ' + JSON.stringify(oError));&#13;
		} else {&#13;
			gs.info('GlobalToolsRecordWriteValidate Tests oError: ' + JSON.stringify(oError));&#13;
		} // if record&#13;
&#13;
&#13;
	} // if not add new test&#13;
&#13;
	/* TODO TESTS:&#13;
&#13;
	// In a baseline instance without CSM there is no state mgmt&#13;
	400_006: Stateflow action is mandatory&#13;
	400_007: Stateflow action is not valid&#13;
	400_008: Stateflow action not found&#13;
	400_009: Stateflow action worknotes are mandatory&#13;
&#13;
	// This is a mis-configuration that occurs only on wrongly customized instances, difficult to test&#13;
	400_016: Invalid dependent reference field configuration&#13;
	400_018: Invalid choice list configuration&#13;
&#13;
	400_101: Access denied: record create&#13;
&#13;
	// These failures are hard to tests against a working setup&#13;
	403_003: Impersonating failed&#13;
	403_004: Impersonating failed and is mandatory&#13;
&#13;
	500_001: Error processing stateflow action&#13;
	500_002: Error processing business logic&#13;
	500_003: Error inserting record&#13;
	500_004: Error updating record&#13;
	500_005: Error deleting record&#13;
	500_006: Error getting reference field value&#13;
&#13;
	*/&#13;
&#13;
	/* Other tests that are missing&#13;
&#13;
		oErrorHandling (type, field)&#13;
		sSourceField&#13;
		sFixedValue&#13;
		sFieldAction&#13;
&#13;
		Other options to be compared to documentation&#13;
	*/&#13;
&#13;
	if (bRunSingleTest) {&#13;
&#13;
		var sFunction = 'validateAndWrite'; // validateAndReturnIREObject&#13;
		oExpectedResult = (sFunction == 'validateAndWrite') ? '-1' : undefined;&#13;
&#13;
		// Put single test here for debugging START&#13;
&#13;
&#13;
		// Put single test here for debugging END&#13;
&#13;
	} // if new test&#13;
&#13;
	return _gtATF.endATF();&#13;
&#13;
})(outputs, steps, params, stepResult, assertEqual);&#13;
</value>
        <variable display_value="Test script">989d9e235324220002c6435723dc3484</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>74cabd161b25b510d5be777d8b4bcbb3</document_key>
        <order>100</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-09-30 06:33:46</sys_created_on>
        <sys_id>92dabd161b25b510d5be777d8b4bcb3a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2023-09-30 06:33:46</sys_updated_on>
        <value>3.1</value>
        <variable display_value="Jasmine version">42f2564b73031300440211d8faf6a777</variable>
    </sys_variable_value>
</record_update>
