<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step">
    <sys_atf_step action="INSERT_OR_UPDATE">
        <active>true</active>
        <callable_outputs/>
        <copied_from/>
        <description>Run Server Side Validation Script</description>
        <display_name>Run Server Side Script</display_name>
        <inputs/>
        <mugshots_cache_json/>
        <notes/>
        <order>1</order>
        <step_config display_value="Run Server Side Script">41de4a935332120028bc29cac2dc349a</step_config>
        <sys_class_name>sys_atf_step</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-09-30 06:31:57</sys_created_on>
        <sys_id>1f3a75161b25b510d5be777d8b4bcbc3</sys_id>
        <sys_mod_count>96</sys_mod_count>
        <sys_name>Run Server Side Script</sys_name>
        <sys_package display_value="Global Tools" source="a39b8f3697816110b434f5f3a253af25">a39b8f3697816110b434f5f3a253af25</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global Tools">a39b8f3697816110b434f5f3a253af25</sys_scope>
        <sys_update_name>sys_atf_step_1f3a75161b25b510d5be777d8b4bcbc3</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2025-06-14 18:30:49</sys_updated_on>
        <table/>
        <test display_value="GlobalToolsRecordRead Tests">a7e640251b6db110d5be777d8b4bcbef</test>
        <timeout/>
        <warning_message/>
    </sys_atf_step>
    <sys_variable_value action="delete_multiple" query="document_key=1f3a75161b25b510d5be777d8b4bcbc3"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>1f3a75161b25b510d5be777d8b4bcbc3</document_key>
        <order>200</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-09-30 06:31:57</sys_created_on>
        <sys_id>736a79161b25b510d5be777d8b4bcb58</sys_id>
        <sys_mod_count>96</sys_mod_count>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2025-06-14 18:30:49</sys_updated_on>
        <value>(function (outputs, steps, params, stepResult, assertEqual) {&#13;
&#13;
	var bLog = false;&#13;
	var _gtArray = new global.GlobalToolsArray();&#13;
	var _gtRead = new global.GlobalToolsRecordRead();&#13;
	var _gtTable = new global.GlobalToolsTable();&#13;
	var _gtATF = new global.GlobalToolsATF('GlobalToolsRecordRead', _gtRead, bLog, outputs, steps, params, stepResult, assertEqual);&#13;
	var grRecord;&#13;
&#13;
	_gtATF.runATF('isValidQuery', false);&#13;
	_gtATF.runATF('isValidQuery', false, 'invalidtable');&#13;
	_gtATF.runATF('isValidQuery', false, '', 'invalidquery');&#13;
	_gtATF.runATF('isValidQuery', false, 'invalidtable', 'invalidquery');&#13;
	_gtATF.runATF('isValidQuery', false, 'incident');&#13;
	_gtATF.runATF('isValidQuery', false, 'incident', 'invalidquery');&#13;
	_gtATF.runATF('isValidQuery', true, 'incident', 'active=true');&#13;
&#13;
	_gtATF.runATF('countRecords', undefined);&#13;
	_gtATF.runATF('countRecords', undefined, 'invalidtable');&#13;
	_gtATF.runATF('countRecords', 0, 'v_search_genius_result');&#13;
	_gtATF.runATF('countRecords', '&gt;1', 'task', 'active=true');&#13;
	var _validateCountRecordsGroupByResult = function (oResult, sResultType) {&#13;
		if ((sResultType != 'array') || (oResult.length != 2)) { return 'Result is not valid array or length is not 2: ' + oResult; }&#13;
		if ((oResult[0][2] &lt; 1) || (oResult[1][2] &lt; 1)) { return 'Count for active or inactive tasks is lower than 1: ' + oResult; }&#13;
	}; // function _validateCountRecordsGroupByResult&#13;
	_gtATF.runATF('countRecords', _validateCountRecordsGroupByResult, 'task', '', 'active');&#13;
	var _validateCountRecordsGroupByDVResult = function (oResult, sResultType) {&#13;
		if ((sResultType != 'array') || (oResult.length != 2)) { return 'Result is not valid array or length is not 2: ' + oResult; }&#13;
		if ((oResult[0][2].length &lt; 1) || (oResult[1][2] &lt; 1)) { return 'Count for active or inactive tasks is lower than 1: ' + oResult; }&#13;
		if (oResult[0].length &lt; 4) { return 'Display value is missing in array: ' + oResult; }&#13;
	}; // function _validateCountRecordsGroupByResult&#13;
	_gtATF.runATF('countRecords', _validateCountRecordsGroupByDVResult, 'task', '', 'active', true);&#13;
&#13;
	_gtATF.runATF('sumRecordsField', undefined);&#13;
	_gtATF.runATF('sumRecordsField', undefined, 'sugus');&#13;
	_gtATF.runATF('sumRecordsField', undefined, 'task');&#13;
	_gtATF.runATF('sumRecordsField', undefined, 'task', 'sugus');&#13;
	_gtATF.runATF('sumRecordsField', 0, 'v_search_genius_result', 'sys_mod_count');&#13;
	_gtATF.runATF('sumRecordsField', '&gt;1', 'task', 'sys_mod_count');&#13;
	_gtATF.runATF('sumRecordsField', '&gt;1', 'task', 'sys_mod_count', 'active=true');&#13;
&#13;
	grRecord = _gtATF.getRecord('cmdb_ci_computer');&#13;
	_gtATF.runATF('getRecord', undefined);&#13;
	_gtATF.runATF('getRecord', undefined, 'sugus');&#13;
	_gtATF.runATF('getRecord', undefined, 'cmdb_ci_server', 'sugus');&#13;
	_gtATF.runATF('getRecord', undefined, 'cmdb_ci_server', '01234567890123456789012345678912');&#13;
	_gtATF.runATF('getRecord', grRecord.getUniqueValue(), 'cmdb_ci', grRecord.getUniqueValue(), true, true, true);&#13;
&#13;
	grRecord = _gtRead.getRecord('cmdb_ci', grRecord.getUniqueValue());&#13;
	if ((!grRecord) || (_gtTable.getRecordClass(grRecord) == 'cmdb_ci')) {&#13;
		_gtATF.addError('getRecord', 'Record return invalid or in the base class.');&#13;
	} // if ci base class&#13;
&#13;
	_gtATF.runATF('getRecords', '&gt;1', 'task', 'active=true');&#13;
	_gtATF.runATF('getRecords', 1, 'task', 'active=true', [], [], 1);&#13;
&#13;
	_gtATF.runATF('getRecordsFields', null);&#13;
	_gtATF.runATF('getRecordsFields', null, 'task');&#13;
	_gtATF.runATF('getRecordsFields', null, 'task1');&#13;
	_gtATF.runATF('getRecordsFields', null, 'task', '');&#13;
	_gtATF.runATF('getRecordsFields', null, 'task', '', []);&#13;
	_gtATF.runATF('getRecordsFields', '&gt;1', 'task', '', ['sys_id']);&#13;
&#13;
	_gtATF.runATF('checkRecordByField', true, 'task', 'active', 'true');&#13;
	_gtATF.runATF('checkRecordByField', false, 'task', 'number', 'invalidnumber');&#13;
&#13;
	_gtATF.runATF('getSysIdByQuery', '087310061ba17510c1ecdc61ab4bcb55', 'sys_script_include', 'name=GlobalToolsATF', true);&#13;
&#13;
	_gtATF.runATF('checkRecordByQuery', true, 'task', 'active=true');&#13;
	_gtATF.runATF('checkRecordByQuery', false, 'task', 'number=invalidnumber');&#13;
&#13;
	grRecord = _gtATF.getRecord('incident', 'active=true^caller_idISNOTEMPTY^caller_id.emailISNOTEMPTY');&#13;
	var sSysId = grRecord.getUniqueValue();&#13;
	var oRecordConfig = {&#13;
		'aKeys': ['number'],&#13;
	};&#13;
	var oRecordValues = {&#13;
		'number': grRecord.getValue('number'),&#13;
	};&#13;
	_gtATF.runATF('getRecordByKeys', undefined, oRecordConfig, oRecordValues);&#13;
	oRecordConfig['sTargetTable'] = 'incident';&#13;
	_gtATF.runATF('getRecordByKeys', 1, oRecordConfig, oRecordValues);&#13;
	_gtATF.runATF('getRecordByKeys', sSysId, oRecordConfig, oRecordValues);&#13;
	oRecordConfig['aKeys'] = ['sys_id', ['number', 'active']];&#13;
	oRecordValues['active'] = 'false';&#13;
	_gtATF.runATF('getRecordByKeys', undefined, oRecordConfig, oRecordValues);&#13;
	oRecordValues['active'] = 'true';&#13;
	_gtATF.runATF('getRecordByKeys', sSysId, oRecordConfig, oRecordValues);&#13;
	oRecordValues['caller_email'] = String(grRecord.caller_id.email);&#13;
	oRecordConfig['aKeys'] = [['number', 'active', { sInputField: 'caller_email', sTargetField: 'caller_id.email' }]];&#13;
	_gtATF.runATF('getRecordByKeys', sSysId, oRecordConfig, oRecordValues);&#13;
	oRecordConfig['aKeys'] = [['number', 'active', { sInputField: 'caller_email', sTargetField: 'caller_id.email', sAddlQuery: 'caller_idISNOTEMPTY' }]];&#13;
	_gtATF.runATF('getRecordByKeys', sSysId, oRecordConfig, oRecordValues);&#13;
	oRecordConfig['aKeys'] = [['number', 'active', { sInputField: 'caller_email', sTargetField: 'caller_id.email', sAddlQuery: '^caller_idISNOTEMPTY' }]];&#13;
	_gtATF.runATF('getRecordByKeys', sSysId, oRecordConfig, oRecordValues);&#13;
&#13;
	grRecord = _gtATF.getRecord('incident', 'active=true^caller_idISNOTEMPTY^caller_id.emailISNOTEMPTY');&#13;
	var oRefRecordConfig = {};&#13;
	var oRefRecordValues = {};&#13;
	var aError = [];&#13;
	_gtATF.runATF('getRelatedRecordByKeys', '', oRefRecordConfig, oRefRecordValues, aError);&#13;
	if ((!_gtArray.isValidArray(aError)) &amp;&amp; (aError != 'Field is empty!')) {&#13;
		_gtATF.addError('getRelatedRecordByKeys', 'Did not return error "Field is empty!" on empty field.');&#13;
	} // if no error&#13;
	aError.length = 0;&#13;
	_gtATF.runATF('getRelatedRecordByKeys', '', oRefRecordConfig, oRefRecordValues, aError, 'caller_id');&#13;
	if ((!_gtArray.isValidArray(aError)) &amp;&amp; (aError != 'Table is empty!')) {&#13;
		_gtATF.addError('getRelatedRecordByKeys', 'Did not return error "Table is empty!" on empty table.');&#13;
	} // if no error&#13;
	aError.length = 0;&#13;
	oRefRecordConfig['sTargetTable'] = 'incident';&#13;
	var sCallerId = grRecord.getValue('caller_id');&#13;
	oRefRecordValues['caller_id'] = String(grRecord.caller_id.email);&#13;
	_gtATF.runATF('getRelatedRecordByKeys', sCallerId, oRefRecordConfig, oRefRecordValues, aError, { 'sField': 'caller_id', 'aKeys': ['email'] });&#13;
	_gtATF.runATF('getRelatedRecordByKeys', sCallerId, oRefRecordConfig, oRefRecordValues, aError, { 'sField': 'caller_id', 'sRefTable': 'sys_user', 'aKeys': ['email'] });&#13;
&#13;
	var _validateGRtoJSON = function (oResult, sResultType) {&#13;
		if (sResultType == 'object') {&#13;
			if (Object.keys(oResult).length &lt; 20) { return 'Result is not valid object or less than 20 properties: ' + JSON.stringify(oResult); }&#13;
			if ((!oResult.hasOwnProperty('sys_id')) || (!oResult.hasOwnProperty('number'))) { return 'Result does not contain sys_id or number field: ' + JSON.stringify(oResult); }&#13;
		} else if (sResultType == 'string') {&#13;
			if ((oResult.indexOf('sys_id') == -1) || (oResult.indexOf('number') == -1)) { return 'Result does not contain sys_id or number field: ' + JSON.stringify(oResult); }&#13;
		} // result type&#13;
	}; // function _validateGRtoJSON&#13;
	grRecord = _gtATF.getRecord('incident', 'active=true');&#13;
	_gtATF.runATF('convertGRtoJSON', _validateGRtoJSON, grRecord);&#13;
	_gtATF.runATF('convertGRtoJSON', _validateGRtoJSON, grRecord, true, false);&#13;
&#13;
	grRecord = _gtATF.getRecord('incident', 'active=true');&#13;
	_gtATF.runATF('convertGRtoXML', undefined);&#13;
	_gtATF.runATF('convertGRtoXML', /version="1.0"/gi, grRecord);&#13;
&#13;
&#13;
	_gtATF.runATF('makeQueryADotWalkQuery', undefined);&#13;
	_gtATF.runATF('makeQueryADotWalkQuery', undefined, '', 'parent');&#13;
	_gtATF.runATF('makeQueryADotWalkQuery', undefined, 'sys_class_name=cmdb_ci_server');&#13;
	_gtATF.runATF('makeQueryADotWalkQuery', 'parent.sys_created_on&gt;javascript:gs.endOfLastWeek()^parent.sys_class_nameINSTANCEOFcmdb_ci_service^ORparent.sys_class_nameINSTANCEOFcmdb_ci_server^NQparent.sys_created_onONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()^parent.sys_class_name=cmdb_ci_service^ORparent.sys_class_name=cmdb_ci_server', 'sys_created_on&gt;javascript:gs.endOfLastWeek()^sys_class_nameINSTANCEOFcmdb_ci_service^ORsys_class_nameINSTANCEOFcmdb_ci_server^NQsys_created_onONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()^sys_class_name=cmdb_ci_service^ORsys_class_name=cmdb_ci_server', 'parent');&#13;
&#13;
	_gtATF.runATF('combineQueries', '');&#13;
	_gtATF.runATF('combineQueries', 'name=test', 'name=test');&#13;
	_gtATF.runATF('combineQueries', 'name=test', '', 'name=test');&#13;
	_gtATF.runATF('combineQueries', 'false', 'name=test^NQname=test1', 'name=test2^NQname=test3');&#13;
	_gtATF.runATF('combineQueries', 'name=test^name=test2^ORname=test3^NQname=test1^name=test2^ORname=test3', 'name=test^NQname=test1', 'name=test2^ORname=test3');&#13;
	_gtATF.runATF('combineQueries', 'name=test2^name=test^ORname=test1^NQname=test3^name=test^ORname=test1', 'name=test^ORname=test1', 'name=test2^NQname=test3');&#13;
&#13;
	return _gtATF.endATF();&#13;
&#13;
})(outputs, steps, params, stepResult, assertEqual);&#13;
</value>
        <variable display_value="Test script">989d9e235324220002c6435723dc3484</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>1f3a75161b25b510d5be777d8b4bcbc3</document_key>
        <order>100</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-09-30 06:31:57</sys_created_on>
        <sys_id>bf6a79161b25b510d5be777d8b4bcb57</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2023-09-30 06:31:57</sys_updated_on>
        <value>3.1</value>
        <variable display_value="Jasmine version">42f2564b73031300440211d8faf6a777</variable>
    </sys_variable_value>
</record_update>
