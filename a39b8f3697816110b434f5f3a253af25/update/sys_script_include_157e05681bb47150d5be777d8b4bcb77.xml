<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.GlobalToolsTable</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Tools to support (scoped) app development&#13;
Functions are only available for global scope and specific scopes defined in the system properties "now.globaltools.access_from_scope" or "now.globaltools.access_from_scope_custom" for security reasons.</description>
        <mobile_callable>false</mobile_callable>
        <name>GlobalToolsTable</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var GlobalToolsTable = Class.create();
GlobalToolsTable.prototype = {
	initialize: function (gtCache, oTimer) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (gtCache instanceof GlobalToolsCache) {
			this._gtCache = gtCache;
		} else {
			this._gtCache = new global.GlobalToolsCache();
		} // if cache
		this.bTimer = ((oTimer) && ((oTimer === true) || (oTimer instanceof GlobalToolsDateTime))) ? true : false;
		if (this.bTimer) {
			if (oTimer === true) {
				this._gtDateTime = new global.GlobalToolsDateTime('gtt');
				this._sTimerPrefix = '';
			} else {
				this._gtDateTime = oTimer;
				this._sTimerPrefix = 'gtt/';
			} // if true
		} // initialize timer
		gs.include('j2js');
		this._gt = new global.GlobalTools();
		this._gtArray = new global.GlobalToolsArray();
		this._gtObject = new global.GlobalToolsObject();
	}, // function initialize

	checkAccess: function (sCallerScope) {
		var aScopes = String(gs.getProperty('now.globaltools.access_from_scope')).split(',');
		var aCustomScopes = String(gs.getProperty('now.globaltools.access_from_scope_custom')).split(',');
		if ((sCallerScope) && ((sCallerScope == 'rhino.global') || (aScopes.indexOf(sCallerScope) != -1) || (aCustomScopes.indexOf(sCallerScope) != -1))) {
			return true;
		} // if scope is allowed
	}, // function checkAccess

	/***********************************************************************************************************
	*	Table Functions
	************************************************************************************************************/

	getTableId: function (oTable) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (oTable) {
			var bArray = this._gtArray.isValidArray(oTable);
			var aTableIds = [];
			var aTables = (bArray) ? oTable : [oTable];
			aTables.forEach(function (sTable) {
				if (sTable) {
					var grDbObject = new GlideRecord('sys_db_object');
					if (grDbObject.get('name', sTable)) {
						aTableIds.push(grDbObject.getUniqueValue());
					} // if table record
				} // if tablename
			}, this); // each table
			return (bArray) ? aTableIds : aTableIds[0];
		} // if tablename
	}, // function getTableId

	getTableName: function (oTableId) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (oTableId) {
			var bArray = this._gtArray.isValidArray(oTableId);
			var aTables = [];
			var aTableIds = (bArray) ? oTableId : [oTableId];
			aTableIds.forEach(function (sTableId) {
				if (sTableId) {
					var grDbObject = new GlideRecord('sys_db_object');
					if (grDbObject.get('sys_id', sTableId)) {
						aTables.push(grDbObject.getValue('name'));
					} // if table record
				} // if tablename
			}, this); // each table
			return (bArray) ? aTables : aTables[0];
		} // if table id
	}, // function getTableName

	isValidTable: function (sTable) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((sTable) && (new GlideRecord(String(sTable)).isValid())) {
			return true;
		} // if table is valid
	}, // function isValidTable

	isValidDBView: function (sTable) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (sTable) {
			var grDBView = new GlideRecord('sys_db_view');
			grDBView.addEncodedQuery('name=' + sTable);
			grDBView.setLimit(1);
			grDBView.query();
			if (grDBView.hasNext()) {
				return true;
			} // if db view exists
		} // if table
	}, // function isValidDBView

	getRecordClass: function (grRecord) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (this._gt.getType(grRecord).indexOf('gliderecord') != -1) {
			var sClassName = grRecord.getValue('sys_class_name');
			sClassName = (sClassName) ? sClassName : grRecord.getTableName();
			if (sClassName) {
				return sClassName;
			} // if class name
		} // if valid record
	}, // function getRecordClass

	getAbsoluteBase: function (sTable) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		try {
			if (this.isValidTable(sTable)) {
				return String(GlideDBObjectManager.get().getAbsoluteBase(sTable));
			} // if valid table
		} catch (oExeption) {
			gs.error('global.GlobalToolsTable.getAbsoluteBase Exception during function for sTable: ' + sTable + ' oExeption: ' + String(oExeption));
		} // catch errors
	}, // function getAbsoluteBase

	getTableHierarchy: function (sTable) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		try {
			if (this.isValidTable(sTable)) {
				return j2js(GlideDBObjectManager.get().getTables(sTable));
			} // if valid table
		} catch (oExeption) {
			gs.error('global.GlobalToolsTable.getTableHierarchy Exception during function for sTable: ' + sTable + ' oExeption: ' + String(oExeption));
		} // catch errors
	}, // function getTableHierarchy

	getTableExtensions: function (sTable, bAllExtensions) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		try {
			if (this.isValidTable(sTable)) {
				if (bAllExtensions) {
					return j2js(GlideDBObjectManager.get().getAllExtensions(sTable));
				} // if all extentions
				return j2js(GlideDBObjectManager.get().getTableExtensions(sTable));
			} // if valid table
		} catch (oExeption) {
			gs.error('global.GlobalToolsTable.getTableExtensions Exception during function for sTable: ' + sTable + ' oExeption: ' + String(oExeption));
		} // catch errors
	}, // function getTableExtensions

	isTableUpdateSynched: function (sTable) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		try {
			if (this.isValidTable(sTable)) {
				var aTableHierarchy = this.getTableHierarchy(sTable);
				var bIsMetaData = (aTableHierarchy.indexOf('sys_metadata') != -1) ? true : false;
				if (bIsMetaData) {
					var grDict = new GlideRecord('sys_dictionary');
					grDict.addEncodedQuery('internal_type=collection^name=' + sTable + '^attributesLIKEupdate_synch');
					grDict.query();
					if (grDict.hasNext()) {
						return true;
					} // if has attr update synch
				} // if metadata
			} // if valid table
		} catch (oExeption) {
			gs.error('global.GlobalToolsTable.isTableUpdateSynched Exception during function for sTable: ' + sTable + ' oExeption: ' + String(oExeption));
		} // catch errors
	}, // function isTableUpdateSynched

	getTableScopeInfo: function (sTable) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (!this.isValidTable(sTable)) {
			return;
		} // if not valid table
		var oScopeInfo = {
			'id': '',
			'access': '',
			'read': false,
			'create': false,
			'write': false,
			'delete': false
		}; // scope info object
		var grTable = new GlideRecord('sys_db_object');
		if (grTable.get('name', sTable)) {
			oScopeInfo['id'] = grTable.getValue('sys_scope');
			oScopeInfo['access'] = grTable.getValue('access');
			if ((grTable.getValue('access') == 'public') || ((!grTable.getValue('access')))) {
				oScopeInfo['read'] = (grTable.getValue('read_access') == '1') ? true : false;
				oScopeInfo['create'] = (grTable.getValue('create_access') == '1') ? true : false;
				oScopeInfo['write'] = (grTable.getValue('update_access') == '1') ? true : false;
				oScopeInfo['delete'] = (grTable.getValue('delete_access') == '1') ? true : false;
			} // if public
		} // if table
		return oScopeInfo;
	}, // function getTableScopeInfo

	/***********************************************************************************************************
	*	Field Functions
	************************************************************************************************************/

	getInternalType: function (grRecord, sField) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (this._gt.getType(grRecord).indexOf('gliderecord') != -1) {
			if (grRecord.isValidField(sField)) {
				var geElement = grRecord.getElement(sField);
				if (geElement) {
					var edElementDescriptor = geElement.getED();
					if (edElementDescriptor) {
						return String(edElementDescriptor.getInternalType());
					} // if element descriptor
				} // if element
			} // if valid field
		} // if valid record
	}, // function getInternalType

	getDisplayField: function (sTable) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (this.isValidTable(sTable)) {
			var grDictOrOverride = this.getDictOrOverrideValue(sTable, '', 'display_override', true, 'display=true');
			if (grDictOrOverride) {
				return grDictOrOverride.getValue('element');
			} // if dict or override
		} // if valid table
	}, // function getDisplayField

	getFieldLabel: function (oTableOrRecord, sField) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sType = this._gt.getType(oTableOrRecord);
		var grRecord;
		if ((sType == 'string') && (this.isValidTable(oTableOrRecord))) {
			grRecord = new GlideRecord(oTableOrRecord);
			grRecord.initialize();
		} else if (sType.indexOf('gliderecord') != -1) {
			grRecord = oTableOrRecord;
		} else {
			return sField;
		} // if string or gliderecord
		sFieldLabel = (grRecord.isValidField(sField)) ? grRecord[sField].getLabel() : '';
		sFieldLabel = (sFieldLabel) ? sFieldLabel : sField;
		return sFieldLabel;
	}, // function getFieldLabel

	getFields: function (oTableOrRecord, bOmitSysId, bReturnDictId) {
		if (this.bTimer) { this._gtDateTime.startTimer(this._sTimerPrefix + 'getFields'); }
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sType = this._gt.getType(oTableOrRecord);
		var aResultFields = [];
		var grTable, geField;
		if ((sType == 'string') && (this.isValidTable(oTableOrRecord))) {
			grTable = new GlideRecord(oTableOrRecord);
			grTable.initialize();
		} else if (sType.indexOf('gliderecord') != -1) {
			grTable = oTableOrRecord;
		} else {
			if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getFields'); }
			return [];
		} // if string or gliderecord
		var aFields = grTable.getFields();
		var grDict = new GlideRecord('sys_dictionary');
		for (var i = 0; i < aFields.size(); i++) {
			geField = aFields.get(i);
			if (bReturnDictId) {
				grDict = new GlideRecord('sys_dictionary');
				grDict.setLimit(1);
				grDict.addEncodedQuery('name=' + geField.getTableName() + '^element=' + geField.getName());
				grDict.query();
				if (grDict.next()) {
					aResultFields.push(grDict.getUniqueValue());
				} // if dict
			} else {
				aResultFields.push(geField.getName());
			} // if return id
		} // each field
		if ((!bOmitSysId) && (grTable.isValidField('sys_id'))) {
			if (bReturnDictId) {
				grDict = new GlideRecord('sys_dictionary');
				grDict.setLimit(1);
				grDict.addEncodedQuery('name=' + grTable.getTableName() + '^element=sys_id');
				grDict.query();
				if (grDict.next()) {
					aResultFields.push(grDict.getUniqueValue());
				} // if dict
			} else {
				if (aResultFields.indexOf('sys_id') == -1) {
					aResultFields.push('sys_id');
				} // if sys id
			} // if return id
		} // if return sys_id
		if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getFields'); }
		return aResultFields.sort();
	}, // function getFields

	getFieldParentTable: function (oTableOrRecord, sField) {
		if (this.bTimer) { this._gtDateTime.startTimer(this._sTimerPrefix + 'getFieldParentTable'); }
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sTable = '';
		var sType = this._gt.getType(oTableOrRecord);
		if ((sType == 'string') && (this.isValidTable(oTableOrRecord))) {
			sTable = oTableOrRecord;
		} else if (sType.indexOf('gliderecord') != -1) {
			sTable = this.getRecordClass(oTableOrRecord);
		} else {
			gs.warn('global.GlobalToolsTable.getFieldParentTable invalid oTableOrRecord parameter: ' + oTableOrRecord);
			if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getFieldParentTable'); }
			return;
		} // if valid table
		var grTable = new GlideRecord(sTable);
		if (grTable.isValidField(sField)) {
			var gTableDesc = GlideTableDescriptor.get(sTable);
			var edField = gTableDesc.getElementDescriptor(sField);
			if (edField) {
				var sFirstTableName = String(edField.getFirstTableName());
				if (sFirstTableName) {
					if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getFieldParentTable'); }
					return sFirstTableName;
				} else {
					if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getFieldParentTable'); }
					return sTable;
				} // if first table name
			} else {
				gs.warn('global.GlobalToolsTable.getFieldParentTable error retrieving element descriptor for table: ' + sTable + ' and field: ' + sField);
			} // if element desc
		} else {
			gs.warn('global.GlobalToolsTable.getFieldParentTable invalid sField parameter: ' + sField);
		} // if valid field
		if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getFieldParentTable'); }
	}, // function getFieldParentTable

	/***********************************************************************************************************
	*	Reference Field Functions
	************************************************************************************************************/
	getRefTable: function (sTable, sField) {
		if (this.bTimer) { this._gtDateTime.startTimer(this._sTimerPrefix + 'getRefTable'); }
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((sTable) && (this.isValidTable(sTable)) && (sField)) {
			var aTables = this.getTableHierarchy(sTable);
			var grDict = new GlideRecord('sys_dictionary');
			grDict.addEncodedQuery('element=' + sField + '^nameIN' + aTables.join(',') + '^internal_type=reference');
			grDict.setLimit(1);
			grDict.query();
			if (grDict.next()) {
				if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getRefTable'); }
				return grDict.getValue('reference');
			} // if dict
		} else {
			gs.warn('global.GlobalToolsTable.getRefTable no table or field provided!');
		} // if table and field
		if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getRefTable'); }
	}, // function getRefTable

	getRefFieldName: function (grRecord, sRefTable, bCheckRefTableHierarchy, sReturnType) {
		if (this.bTimer) { this._gtDateTime.startTimer(this._sTimerPrefix + 'getRefFieldName'); }
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sReturnField = '';
		var aReturnFields = [];
		if (((grRecord)) && (this._gt.getType(grRecord).indexOf('gliderecord') != -1)) {
			var sTable = grRecord.getTableName();
			if ((sTable) && (sRefTable) && (this.isValidTable(sRefTable))) {
				var aTables = this.getTableHierarchy(sTable);
				var aRefTables = [sRefTable];
				if (bCheckRefTableHierarchy) {
					aRefTables = j2js(GlideDBObjectManager.get().getHierarchy(sRefTable));
				} // if check extended ref tables
				var grDict = new GlideRecord('sys_dictionary');
				grDict.addEncodedQuery('nameIN' + aTables.join(',') + '^internal_type=reference^referenceIN' + aRefTables.join(','));
				grDict.orderBy('element');
				grDict.query();
				while ((grDict.next()) && (sReturnField == '')) {
					if (sReturnType == 'array') {
						aReturnFields.push(grDict.getValue('element'));
					} else {
						sReturnField = grDict.getValue('element');
					} // if return array
				} // while dict
				if (sReturnType == 'array') {
					if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getRefFieldName'); }
					return aReturnFields;
				} else {
					if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getRefFieldName'); }
					return sReturnField;
				} // if return array
			} // if table and reftable
		} // if valid record
	}, // function getRefFieldName

	/***********************************************************************************************************
	*	Dictionary Functions
	************************************************************************************************************/

	getDictOrOverrideValue: function (sTable, sField, sAttributeName, bReturnRecord, sAddlDictQuery) {
		if (this.bTimer) { this._gtDateTime.startTimer(this._sTimerPrefix + 'getDictOrOverrideValue'); }
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var oReturnValue, sPath;
		if ((sTable) && ((sField) || (sAttributeName))) {
			if (sAttributeName) {
				sPath = (sAttributeName == 'display_override') ? 'display_override' : sField + '/' + sAttributeName;
			} else {
				sPath = sField;
			} // if attribute name
			sPath = (sAddlDictQuery) ? sPath + '/' + sAddlDictQuery : sPath;
			var oDictOrOverrideValue = this._gtCache.getValue('gtt_doov/' + sTable + '/' + sPath);
			if (oDictOrOverrideValue) {
				if (bReturnRecord) {
					if ((oDictOrOverrideValue.hasOwnProperty('_t_')) && (oDictOrOverrideValue.hasOwnProperty('_s_'))) {
						var sDictOrOverrideTable = (oDictOrOverrideValue['_t_'] == 'd') ? 'sys_dictionary' : 'sys_dictionary_override';
						var sDictOrOverrideId = oDictOrOverrideValue['_s_'];
						if ((sDictOrOverrideTable) && (sDictOrOverrideId)) {
							var grDictOrOverride = new GlideRecord(sDictOrOverrideTable);
							if (grDictOrOverride.get(sDictOrOverrideId)) {
								if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getDictOrOverrideValue'); }
								return grDictOrOverride;
							} // if record
						} // if table and id
					} // if obj has table and id
				} else if (oDictOrOverrideValue.hasOwnProperty('_v_')) {
					if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getDictOrOverrideValue'); }
					return oDictOrOverrideValue['_v_'];
				} // if return record
				if (oDictOrOverrideValue === true) {
					if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getDictOrOverrideValue'); }
					return oReturnValue;
				} // if empty
			} // if cache value
			oDictOrOverrideValue = {};
			if ((this.isValidTable(sTable)) && ((sField) || (sAttributeName == 'display_override'))) {
				var grDictionary = new GlideRecord('sys_dictionary');
				sAddlDictQuery = ((sAddlDictQuery) && (grDictionary.isValidEncodedQuery(sAddlDictQuery))) ? sAddlDictQuery : '';
				var sAttributeBooleanQuery = (sAttributeName != 'display_override') ? '^' + sAttributeName + '_override=true' : '^' + sAttributeName + '=true';
				var aOverrideFields = ['attributes', 'calculation', 'default_value', 'dependent', 'mandatory', 'read_only', 'reference_qual', 'display_override'];
				var grDictOverride = new GlideRecord('sys_dictionary_override');
				var aTableHierarchy = this.getTableHierarchy(sTable);
				aTableHierarchy.some(function (sTable) {
					grDictionary = new GlideRecord('sys_dictionary');
					if (sAttributeName == 'display_override') {
						grDictionary.addEncodedQuery('name=' + sTable + '^' + sAddlDictQuery);
					} else {
						grDictionary.addEncodedQuery('name=' + sTable + '^element=' + sField + '^' + sAddlDictQuery);
					} // if display
					grDictionary.query();
					if (grDictionary.next()) {
						if (!grDictionary[sAttributeName].nil()) {
							if (bReturnRecord) {
								oReturnValue = grDictionary;
							} else {
								oReturnValue = grDictionary.getValue(sAttributeName);
								oDictOrOverrideValue['_v_'] = oReturnValue;
							} // if return record
							oDictOrOverrideValue['_t_'] = 'd';
							oDictOrOverrideValue['_s_'] = grDictionary.getUniqueValue();
							return true;
						} // if attribute not nil
					} else if (aOverrideFields.indexOf(sAttributeName) != -1) {
						grDictOverride = new GlideRecord('sys_dictionary_override');
						if (sAttributeName == 'display_override') {
							grDictOverride.addEncodedQuery('name=' + sTable + sAttributeBooleanQuery);
						} else {
							grDictOverride.addEncodedQuery('name=' + sTable + '^element=' + sField + sAttributeBooleanQuery);
						} // if display
						grDictOverride.query();
						if (grDictOverride.next()) {
							if (bReturnRecord) {
								oReturnValue = grDictOverride;
							} else {
								oReturnValue = grDictOverride.getValue(sAttributeName);
								oDictOrOverrideValue['_v_'] = oReturnValue;
							} // if return record
							oDictOrOverrideValue['_t_'] = 'o';
							oDictOrOverrideValue['_s_'] = grDictOverride.getUniqueValue();
							return true;
						} // if dict override
					} // if dict
				}, this); // some table
			} // if tablename and fieldname
			if (!oReturnValue) {
				oDictOrOverrideValue = true;
			} // if no return value
			this._gtCache.setValue('gtt_doov/' + sTable + '/' + sPath, oDictOrOverrideValue);
		} // if table and attribute
		if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getDictOrOverrideValue'); }
		return oReturnValue;
	}, // function getDictOrOverrideValue

	getFieldChoices: function (sTable, sField, sDependentFieldValue) {
		if (this.bTimer) { this._gtDateTime.startTimer(this._sTimerPrefix + 'getFieldChoices'); }
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var aChoices = [],
			aDependentValues = [],
			aChoiceDisplayValues = [],
			bFound = false;
		var sPath = (sDependentFieldValue) ? sTable + '/' + sField : sTable + '/' + sField + '/' + sDependentFieldValue;
		var oChoiceValues = this._gtCache.getValue('gtt_gfc/' + sPath);
		if ((oChoiceValues) && (oChoiceValues.hasOwnProperty('_c_'))) {
			aChoices = oChoiceValues['_c_'];
			aDependentValues = (oChoiceValues.hasOwnProperty('_d_')) ? oChoiceValues['_d_'] : [];
			aChoiceDisplayValues = (oChoiceValues.hasOwnProperty('_v_')) ? oChoiceValues['_v_'] : [];
		} else {
			if ((sTable) && (this.isValidTable(sTable)) && (sField)) {
				var grDict = this.getDictOrOverrideValue(sTable, sField, '', true);
				var sChoiceTable = grDict.getValue('choice_table');
				var sChoiceField = grDict.getValue('choice_field');
				if ((sChoiceTable) && (this.isValidTable(sChoiceTable)) && (sChoiceField)) {
					sTable = sChoiceTable;
					sField = sChoiceField;
				} else {
					sChoiceTable = '';
				} // if valid choice table				
				var aTableHierarchy = (sChoiceTable) ? [sChoiceTable] : this.getTableHierarchy(sTable);
				var sDependentFieldValueQuery = (sDependentFieldValue) ? '^dependent_value=' + sDependentFieldValue : '';
				var grChoice = new GlideRecord('sys_choice');
				aTableHierarchy.some(function (sTable) {
					grChoice = new GlideRecord('sys_choice');
					grChoice.addEncodedQuery('name=' + sTable + '^element=' + sField + '^inactive=false^language=en' + sDependentFieldValueQuery);
					grChoice.query();
					while (grChoice.next()) {
						aChoices.push(grChoice.getValue('value'));
						aDependentValues.push(grChoice.getValue('dependent_value'));
						aChoiceDisplayValues.push(grChoice.getValue('value') + ' (' + grChoice.getValue('label') + ')');
						bFound = true;
					} // while choices
					return bFound;
				}, this); // some tables
				oChoiceValues = {};
				oChoiceValues['_c_'] = aChoices;
				oChoiceValues['_d_'] = aDependentValues;
				oChoiceValues['_v_'] = aChoiceDisplayValues;
				this._gtCache.setValue('gtt_gfc/' + sPath, oChoiceValues);
			} // if tablename and fieldname
		} // if cached value
		if (this.bTimer) { this._gtDateTime.stopTimer(this._sTimerPrefix + 'getFieldChoices'); }
		return [aChoices, aDependentValues, aChoiceDisplayValues];
	}, // function getFieldChoices

	getMandatoryFields: function (sTable) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var aMandatoryFields = [];
		if (this.isValidTable(sTable)) {
			var grRecord = new GlideRecord(sTable);
			grRecord.initialize();
			var aFields = this.getFields(grRecord);
			var geElement, geElementDescriptor;
			aFields.forEach(function (sField) {
				geElement = grRecord.getElement(sField);
				geElementDescriptor = geElement.getED();
				if ((sField != 'sys_id') && (geElementDescriptor.isMandatory())) {
					aMandatoryFields.push(sField);
				} // if mandatory
			}, this); // each field
		} // if tablename and fieldname
		return this._gtArray.unique(aMandatoryFields, true).sort();
	}, // function getMandatoryFields

	/***********************************************************************************************************
	*	Generate Lucid Chart ERD Input
	************************************************************************************************************/

	generateLucidChartERDInput: function (oConfig) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((!oConfig) || (!this._gtObject.isObject(oConfig))) {
			return '';
		} // check input
		var sTablesInput = this._gtObject.getValue('sTables', '', oConfig); // string of tables
		var aTablesInput = this._gtObject.getValue('aTables', [], oConfig); // array of tables
		var aPackagesInput = this._gtObject.getValue('aPackages', [], oConfig); // array of packages (sys_id, short_name)
		var aAppsInput = this._gtObject.getValue('aApps', [], oConfig); // array of scoped apps (sys_id, short_name)
		var bOnlyTableWithoutHierarchy = this._gtObject.getValue('bOnlyTableWithoutHierarchy', false, oConfig); // if true will only show reference fields
		var bOnlyReferenceFields = this._gtObject.getValue('bOnlyReferenceFields', true, oConfig); // if true will only show reference fields
		var bFollowReferences = this._gtObject.getValue('bFollowReferences', false, oConfig); // if true will follow references
		var iMaxNumberOfReferencesToFollow = this._gtObject.getValue('iMaxNumberOfReferencesToFollow', 1, oConfig); // will follow references this deep
		var aExcludeTables = this._gtObject.getValue('aExcludeTables', ['sys_metadata'], oConfig); // tables to exclude
		var sTableSchema = this._gtObject.getValue('sTableSchema', 'now', oConfig); // name of table schema
		var sSchemaType = this._gtObject.getValue('sSchemaType', '', oConfig); // use sTableSchema for all (default) or take sys_scope (app) or sys_package (package)
		var aTables = [];
		if (sTablesInput) {
			var aTmpTables = sTablesInput.split(',');
			if (this._gtArray.isValidArray(aTmpTables)) {
				aTables = this._gtArray.mergeArray(aTables, aTmpTables, true);
			} // if valid array
		} // if table input string
		if (this._gtArray.isValidArray(aTablesInput)) {
			aTables = this._gtArray.mergeArray(aTables, aTablesInput, true);
		} // if table input array
		if (this._gtArray.isValidArray(aPackagesInput)) {
			aPackagesInput.forEach(function (sPackageNameOrId) {
				var grTable = new GlideRecord('sys_db_object');
				grTable.addEncodedQuery('sys_package=' + sPackageNameOrId + '^ORsys_package.sourceSTARTSWITH' + sPackageNameOrId);
				grTable.query();
				while (grTable.next()) {
					if (aTables.indexOf(grTable.getValue('name') == -1)) {
						aTables.push(grTable.getValue('name'));
					} // if not exist
				} // while apps table
			}, this); // while apps input
		} // if table input package
		if (this._gtArray.isValidArray(aAppsInput)) {
			aAppsInput.forEach(function (sAppNameOrId) {
				var grTable = new GlideRecord('sys_db_object');
				grTable.addEncodedQuery('sys_scope=' + sAppNameOrId + '^ORsys_scope.scopeSTARTSWITH' + sAppNameOrId);
				grTable.query();
				while (grTable.next()) {
					if (aTables.indexOf(grTable.getValue('name') == -1)) {
						aTables.push(grTable.getValue('name'));
					} // if not exist
				} // while apps table
			}, this); // while apps input
		} // if table input app
		this.aLucidChartERDResults = [];
		this.iLucidChartERDOrdinalPosition = 0;
		this.aLucidChartERDTableCache = [];
		if (this._gtArray.isValidArray(aTables)) {
			aTables.forEach(function (sTable) {
				this._generateLucidChartERDDictData(sTable, bOnlyTableWithoutHierarchy, bOnlyReferenceFields, aExcludeTables, sTableSchema, sSchemaType, bFollowReferences, iMaxNumberOfReferencesToFollow, 0);
			}, this); // each table
		} else {
			return '';
		} // if no table
		return this.aLucidChartERDResults.join('\n');
	}, // function generateLucidChartERDInput

	_generateLucidChartERDDictData: function (sTable, bOnlyTableWithoutHierarchy, bOnlyReferenceFields, aExcludeTables, sTableSchema, sSchemaType, bFollowReferences, iMaxNumberOfReferencesToFollow, iCurrentNumberOfReferences, bFollowReferenceCall) {
		if (this.aLucidChartERDTableCache.indexOf(sTable) == -1) {
			this.aLucidChartERDTableCache.push(sTable);
			if (bFollowReferenceCall) {
				iCurrentNumberOfReferences++;
			} // if reference followed
			var _getTableInfo = function (sTable, sType) {
				var grTable = new GlideRecord('sys_db_object');
				grTable.addEncodedQuery('name=' + sTable);
				grTable.setLimit(1);
				grTable.query();
				if (grTable.next()) {
					if (sType == 'package') {
						return String(grTable.sys_package.source);
					} else {
						return String(grTable.sys_scope.scope);
					} // if table
				} // if table
			}; // function _getTableInfo
			var aAllTablesFiltered = [];
			if (bOnlyTableWithoutHierarchy) {
				aAllTablesFiltered.push(sTable);
			} else {
				aAllTablesFiltered = this.getTableHierarchy(sTable);
			} // if without hierarchy
			var sQuery = (bOnlyReferenceFields) ? 'internal_typeINreference,glide_list,GUID' : 'internal_type!=collection';
			var grDict = new GlideRecord('sys_dictionary');
			grDict.addEncodedQuery(sQuery + '^internal_typeISNOTEMPTY^element!=NULL^nameIN' + aAllTablesFiltered.join(',') + '^nameNOT IN' + aExcludeTables.join(','));
			grDict.query();
			while (grDict.next()) {
				this.iLucidChartERDOrdinalPosition++;
				var sRealTable = grDict.getValue('name');
				var sElement = grDict.getValue('element');
				var sDataType = grDict.getValue('internal_type');
				var sConstraintType = 'PRIMARY KEY';
				sTableSchemaLocal = (sSchemaType) ? _getTableInfo(sTable, sSchemaType) : sTableSchema;
				if (sElement == 'sys_id') {
					sTableSchemaForeign = (sSchemaType) ? _getTableInfo(sTable, sSchemaType) : sTableSchema;
				} else {
					sTableSchemaForeign = (sSchemaType) ? _getTableInfo(grDict.getValue('reference'), sSchemaType) : sTableSchema;
					sConstraintType = ((sDataType == 'reference') || (sDataType == 'glide_list')) ? 'FOREIGN KEY' : sConstraintType;
				} // if id
				this.aLucidChartERDResults.push('| mysql | ' + sTableSchemaLocal + ' | ' + sTable + ' | ' + sElement + ' | ' + this.iLucidChartERDOrdinalPosition + ' | ' + sDataType + ' | ' + grDict.getValue('max_length') + ' | ' + sConstraintType + ' | ' + sTableSchemaForeign + ' | ' + grDict.getValue('reference') + ' | sys_id |');
				if ((bFollowReferences) && (['reference', 'glide_list'].indexOf(sDataType) != -1) && (iMaxNumberOfReferencesToFollow >= iCurrentNumberOfReferences)) {
					this._generateLucidChartERDDictData(grDict.getValue('reference'), bOnlyTableWithoutHierarchy, bOnlyReferenceFields, aExcludeTables, sTableSchema, sSchemaType, bFollowReferences, iMaxNumberOfReferencesToFollow, iCurrentNumberOfReferences, true);
				} // if follow reference
			} // while dict
		} // if new table
	}, // function _generateLucidChartERDDictData

	type: 'GlobalToolsTable',
	version: '1.0.10',
	author: 'Tom Hauri',
	email: 'tom@hauri.biz'

};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-08-18 10:03:21</sys_created_on>
        <sys_id>157e05681bb47150d5be777d8b4bcb77</sys_id>
        <sys_mod_count>178</sys_mod_count>
        <sys_name>GlobalToolsTable</sys_name>
        <sys_package display_value="Global Tools" source="a39b8f3697816110b434f5f3a253af25">a39b8f3697816110b434f5f3a253af25</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global Tools">a39b8f3697816110b434f5f3a253af25</sys_scope>
        <sys_update_name>sys_script_include_157e05681bb47150d5be777d8b4bcb77</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2025-02-14 14:20:07</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>157e05681bb47150d5be777d8b4bcb77</id>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2024-08-15 19:08:13</sys_created_on>
        <sys_id>fd44acad1bc41a10e50ddc61ab4bcbe4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-08-15 19:08:13</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
