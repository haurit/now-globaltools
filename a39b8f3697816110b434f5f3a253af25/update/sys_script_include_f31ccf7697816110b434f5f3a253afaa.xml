<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.GlobalTools</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Tools to support (scoped) app development&#13;
Functions are only available for global scope and specific scopes defined in the system properties "now.globaltools.access_from_scope" or "now.globaltools.access_from_scope_custom" for security reasons.</description>
        <mobile_callable>false</mobile_callable>
        <name>GlobalTools</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var GlobalTools = Class.create();
GlobalTools.prototype = {
	initialize: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
	}, // function initialize

	checkAccess: function (sCallerScope) {
		var aScopes = String(gs.getProperty('now.globaltools.access_from_scope')).split(',');
		var aCustomScopes = String(gs.getProperty('now.globaltools.access_from_scope_custom')).split(',');
		if ((sCallerScope) && ((sCallerScope == 'rhino.global') || (aScopes.indexOf(sCallerScope) != -1) || (aCustomScopes.indexOf(sCallerScope) != -1))) {
			return true;
		} // if scope is allowed
	}, // function checkAccess

	// Substitute null values in simple types
	// DEPRECATED: sObjKey --> use GlobalToolsObject.getValue instead!
	nsub: function (sValue, sSubstitute, sType, sObjKey) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (sObjKey) {
			if (sValue.hasOwnProperty(sObjKey)) {
				sValue = sValue[sObjKey];
			} else {
				sValue = null;
			} // if has property
		} // if obj and objkey
		sType = (sType) ? sType : this.getType(sValue);
		var sSubstituteType = this.getType(sSubstitute);
		if ((sValue) || (sValue === false) || (sValue === 0)) {
			if ((sType == 'array') || (Array.isArray(sSubstitute))) {
				if (Array.isArray(sValue)) {
					return sValue;
				} else {
					return sValue.split(',');
				} // if is array
			} else if (sType == 'number') {
				return sValue;
			} else if ((sType == 'object') || (sSubstituteType == 'object')) {
				return sValue;
			} else if ((sType == 'boolean') || ((sSubstitute === true || sSubstitute === false || sSubstituteType === 'boolean'))) {
				return Boolean(sValue);
			} else {
				return String(sValue);
			} // if array, bool, string
		} else if (((sSubstitute !== undefined)) && (sSubstitute !== null)) {
			if (sType == 'string') {
				return String(sSubstitute);
			} else {
				return sSubstitute;
			} // if force string
		} else {
			if (sType == 'array') {
				return [];
			} else if (sType == 'object') {
				return {};
			} else if (sType == 'number') {
				return -1;
			} else if (sType == 'boolean') {
				return false;
			} else {
				return '';
			} // if array
		} // if value
	}, // function nsub

	getType: function (oValue, bDoNotConvertCase) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (oValue === null) {
			return 'null';
		}
		var sType = typeof oValue;
		if (sType == 'object') {
			var sObjectType = String(Object.prototype.toString.call(oValue));
			var aType = sObjectType.match(/^\[object\s(.*)\]$/);
			sType = ((aType) && (Array.isArray(aType)) && (aType.length > 0)) ? aType[1] : '';
			if (sType == 'JavaObject') {
				var sJavaClassName = GlideJSUtil.getJavaClassName(oValue);
				if (sJavaClassName) {
					sType = sJavaClassName.substring(sJavaClassName.lastIndexOf('.') + 1);
				} // if java class name
			} // if java object
			if (sType) {
				return (bDoNotConvertCase) ? sType : String(sType).toLowerCase();
			} // if type
		} // if obj
		return sType;
	}, // function getType

	isEqual: function (oValue1, oValue2) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (((oValue1) && (!oValue2)) || ((!oValue1) && (oValue2))) {
			return false;
		} else if ((!oValue1) && (!oValue2)) {
			return true;
		} // if one is empty or both
		var sValue1Type = this.getType(oValue1);
		var sValue2Type = this.getType(oValue2);
		if (sValue1Type != sValue2Type) {
			return false;
		} else if (sValue1Type == 'array') {
			if (oValue1.length !== oValue2.length) {
				return false;
			} // if not same length
			//oValue1.sort();
			//oValue2.sort();
			oValue1 = this.deepSort(oValue1);
			oValue2 = this.deepSort(oValue2);
			return (String(oValue1) == String(oValue2));
		} else if (sValue1Type == 'object') {
			var aKeys1 = Object.keys(oValue1);
			var aKeys2 = Object.keys(oValue2);
			if (aKeys1.length !== aKeys2.length) {
				return false;
			} // if not same keys length
			if (!this.isEqual(aKeys1, aKeys2)) {
				return false;
			} // if not same keys
			var bDifferent = false;
			aKeys1.some(function (sKey) {
				if (!this.isEqual(oValue1[sKey], oValue2[sKey])) {
					bDifferent = true;
					return true;
				} // if not same keys
			}, this); // some keys
			if (bDifferent) {
				return false;
			} else {
				return true;
			} // if different
		} // if not same type, array or obj
		if ((sValue1Type == 'string') && (sValue1Type == 'string')) {
			return String(oValue1) == String(oValue2);
		} // if string convert to overcome character set issues
		return oValue1 === oValue2;
	}, // function isEqual

	// Not to be used with more than 2 levels of nested structures and works fine for small arrays objects only. 
	deepSort: function (oValue) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sValueType = this.getType(oValue);
		if (sValueType == 'array') {
			var sCommonType = new global.GlobalToolsArray().getCommonTypeFromArray(oValue);
			if (sCommonType == 'string') {
				oValue.sort(function (a, b) { return a.localeCompare(b, 'en', { 'sensitivity': 'base' }); });
			} else if (sCommonType == 'number') {
				oValue.sort(function (a, b) { return a - b; });
			} else if (sCommonType == 'array') {
				oValue.forEach(function (aTmpValue, iIndex) {
					oValue[iIndex] = this.deepSort(aTmpValue);
				}, this); // each object key
				oValue.sort(function (a, b) { return String(a).localeCompare(String(b), 'en', { 'sensitivity': 'base' }); });
			} else if (sCommonType == 'object') {
				oValue.forEach(function (oTmpValue, iIndex) {
					oValue[iIndex] = this.deepSort(oTmpValue);
				}, this); // each object key
				oValue.sort(function (a, b) { return JSON.stringify(a).localeCompare(JSON.stringify(b), 'en', { 'sensitivity': 'base' }); });
			} else {
				oValue.sort();
			} // if expected common type
		} else if (sValueType == 'object') {
			var oValueKeys = this.deepSort(Object.keys(oValue));
			var oTmpValue = {};
			oValueKeys.forEach(function (sValueKey) {
				oTmpValue[sValueKey] = this.deepSort(oValue[sValueKey]);
			}, this); // each object key
			oValue = JSON.parse(JSON.stringify(oTmpValue));
		} // if valid array
		return oValue;
	}, // function deepSort

	// Encode new line to tag
	encodeNewLineToTag: function (sValue) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sResult = (sValue) ? String(sValue).replace(/\n/g, '!^br^!') : '';
		return sResult;
	}, // function encodeNewLineToTag

	// Decode tag to new line
	decodeTagToNewLine: function (sValue) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sResult = String(sValue).replace(/!\^br\^!/g, '\n');
		return sResult;
	}, // function decodeTagToNewLine

	// Pad number
	padNumber: function (iNumber, iDigits) {
		if ((iNumber) || (iNumber === 0)) {
			iDigits = ((iDigits) && (!isNaN(iDigits))) ? iDigits : 8;
			var sNumber = String(iNumber);
			while (sNumber.length < iDigits)
				sNumber = '0' + sNumber;
			return sNumber;
		} // if number
	}, // function padNumber

	// Format bytes user friendly
	formatBytes: function (iNumber, sNotation, iDecimals) {
		if ((this.getType(iNumber) != 'number') && (this.getType(iNumber) != 'integer')) {
			iNumber = parseInt(iNumber);
			if (isNaN(iNumber)) {
				return;
			} // if not number
		} // if not number
		iDecimals = ((iDecimals) && (!isNaN(iDecimals))) ? parseInt(iDecimals) : 2;
		if (iNumber < 0) { return; } // if less than zero
		sNotation = (sNotation == 'iec') ? 'iec' : 'si';
		var aPrefixes = {
			'si': ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
			'iec': ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']
		}; // Prefixes
		var iBase = (sNotation == 'iec') ? 1024 : 1000;
		if (iNumber === 0) {
			return '0 ' + aPrefixes[sNotation][0];
		} // if zero
		var iExponent = Math.floor(Math.log(iNumber) / Math.log(iBase));
		var iResult = (iNumber / Math.pow(iBase, iExponent)).toFixed(iDecimals);
		return String(iResult).replace('.' + this.padNumber(0, iDecimals), '') + ' ' + aPrefixes[sNotation][iExponent];
	}, // function formatBytes

	// Function to replace placeholders
	replacePlaceholders: function (sInputValue, oRecord, sValue, bJSON) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((sInputValue) && (oRecord)) {
			var bIsRecord = (this.getType(oRecord).indexOf('gliderecord') != -1);
			var reGetFields = /(\[[A-Za-z_0-9]*\])(?!.*")/gi;
			if (this.getType(sInputValue) == 'object') {
				sInputValue = JSON.stringify(sInputValue);
				bJSON = true;
			} // if object
			if (bJSON) {
				reGetFields = /(\[[A-Za-z_0-9]*\])/gi;
			} // if json
			var aReResults = String(sInputValue).match(reGetFields);
			var reReplace = new RegExp('placeholder');
			var sFieldName = '', sReplaceValue = '', sReplace = '';
			if ((aReResults) && (Array.isArray(aReResults))) {
				aReResults = aReResults.filter(function (value, index, array) { return array.indexOf(value) === index; }); // do not use GlobalToolsArray, can be replaced once switch ES mode
				aReResults.forEach(function (sReResult) {
					sFieldName = sReResult.replace(/\[|\]/g, '');
					if (sFieldName == 'sValue') {
						sReplaceValue = sValue;
					} else if (bIsRecord) {
						sReplaceValue = oRecord.getValue(sFieldName);
					} else {
						sReplaceValue = oRecord[sFieldName];
					} // if fieldname is value
					if (sReplaceValue) {
						sReplace = sReResult.replace('[', '\\[').replace(']', '\\]');
						reReplace = new RegExp(sReplace, 'gi');
						sInputValue = sInputValue.replace(reReplace, sReplaceValue);
					} // if value
				}, this); // each re result
			} // if reResult
		} // if input 
		return sInputValue;
	}, // function replacePlaceholders

	convertUnderscoretoCamelCase: function (sInputValue) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (sInputValue) {
			var aResult = [];
			sInputValue.split('_').forEach(function (sWord) {
				sWord = sWord.replace(/[^a-zA-Z0-9]/g, '');
				aResult.push(sWord.charAt(0).toUpperCase() + sWord.substr(1).toLowerCase());
			}); // each word
			return aResult.join('');
		} // if name
		return sInputValue;
	}, // function convertUnderscoretoCamelCase

	getHTMLDiffFromXML: function (sXMLLeft, sXMLRight, sHeaderLeft, sHeaderRight) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((sXMLLeft) && (sXMLRight)) {
			var _DiffHelper = new global.DiffHelper();
			var oDiff = _DiffHelper.diffXMLString(sXMLLeft, sXMLRight);
			if (oDiff != null) {
				sHeaderLeft = (sHeaderLeft) ? sHeaderLeft : '';
				sHeaderRight = (sHeaderRight) ? sHeaderRight : '';
				return _DiffHelper.getTemplate(oDiff, sHeaderLeft, sHeaderRight);
			} // if diff
		} // if xmls
	}, // function getHTMLDiffFromXML

	// Schedule ScriptInclude Function
	scheduleScript: function (sScriptInclude, sFunction, iSeconds, aFunctionArgs, aClassArgs, sScheduleName, sDocument, sDocumentKey) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		function parseArgs(aArgs) {
			var aReturn = [];
			if (!aArgs) {
				return '';
			} // if no args
			for (iIndex = 0; iIndex < aArgs.length; iIndex++) {
				oItem = aArgs[iIndex];
				var sType = typeof oItem;
				if ((!oItem) && (sType != 'boolean') && (!oItem === 0)) {
					return '';
				} // if empty
				if (JSUtil.instance_of(oItem, GlideRecord)) {
					aScript.push('var grRecord_' + iIndex + " = new GlideRecord('" + oItem.getTableName() + "');");
					aScript.push('grRecord_' + iIndex + ".get('" + oItem.getUniqueValue() + "');");
					aReturn.push('grRecord_' + iIndex);
				} else if (JSUtil.instance_of(oItem, GlideDate)) {
					aScript.push('var dtDate_' + iIndex + " = new GlideDate('" + oItem + "');");
					aReturn.push('dtDate_' + iIndex);
				} else if (JSUtil.instance_of(oItem, GlideTime)) {
					aScript.push('var dtTime_' + iIndex + " = new GlideTime('" + oItem + "');");
					aReturn.push('dtTime_' + iIndex);
				} else if (JSUtil.instance_of(oItem, GlideDateTime)) {
					aScript.push('var dtDateTime_' + iIndex + " = new GlideDateTime('" + oItem + "');");
					aReturn.push('dtDateTime_' + iIndex);
				} else {
					aReturn.push(JSON.stringify(oItem));
				} // if special object
			} // each argument (HINT: forEach created StackOverflow)
			return aReturn.join(', ');
		} // function parseArgs
		iSeconds = (iSeconds) ? iSeconds : 1;
		var sScriptName = '';
		var bCalcScript = true;
		var aScript = [];
		if (Array.isArray(sScriptInclude)) {
			sScriptName = (sFunction) ? sFunction : 'Passed Script';
			bCalcScript = false;
			aScript = sScriptInclude;
		} // if is array
		if (bCalcScript) {
			var sClassArgs = (aClassArgs) ? parseArgs(aClassArgs) : '';
			var sFunctionArgs = (aFunctionArgs) ? parseArgs(aFunctionArgs) : '';
			sScriptName = 'GlobalTools.scheduleScript - ' + sScriptInclude + '.' + sFunction;
			aScript.push('new ' + sScriptInclude + '(' + sClassArgs + ').' + sFunction + '(' + sFunctionArgs + ');');
		} // if bCalcScript
		var dtDelay = new GlideDateTime();
		dtDelay.addSeconds(iSeconds);
		sScheduleName = (sScheduleName) ? sScheduleName : 'GlobalTools.ScriptScheduler - ' + sScriptName;
		var grTrigger = new GlideRecord('sys_trigger');
		grTrigger.newRecord();
		grTrigger.setValue('name', sScheduleName);
		if (sDocument) {
			grTrigger.setValue('document', sDocument);
		} // if doc
		if (sDocumentKey) {
			grTrigger.setValue('document_key', sDocumentKey);
		} // if doc id
		grTrigger.setValue('trigger_type', '0');
		grTrigger.setValue('next_action', dtDelay);
		grTrigger.setValue('script', aScript.join('\n'));
		return grTrigger.insert();
	}, // function scheduleScript

	// Convenience function to handle scheduler
	scheduleHandler: function (sEvent, sDelaySeconds, sAction, sAddlQuery, grRecord, oParam1, oParam2, sQueue) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		try {
			if (!sEvent) {
				gs.warn('global.GlobalTools.scheduleHandler called without an event.');
				return false;
			} // if not event return
			sAddlQuery = (sAddlQuery) ? '^' + sAddlQuery : '';
			grRecord = (grRecord) ? grRecord : '';
			oParam1 = (oParam1) ? String(oParam1) : '';
			oParam2 = (oParam2) ? String(oParam2) : '';
			sQueue = (sQueue) ? sQueue : '';
			var grEvent = new GlideRecord('sysevent');
			grEvent.addQuery('stateNOT INprocessed,error^name=' + sEvent + sAddlQuery);
			grEvent.query();
			if (sAction == 'stop') {
				while (grEvent.next()) {
					grEvent.setValue('processed', gs.daysAgo(0));
					grEvent.setValue('state', 'processed');
					grEvent.setValue('processing_duration', 0);
					grEvent.setWorkflow(false);
					grEvent.update();
				} // disable active events
			} else if (!grEvent.next()) {
				if ((sDelaySeconds) && (!isNaN(sDelaySeconds))) {
					var dtSchedule = new GlideDateTime();
					dtSchedule.addSeconds(sDelaySeconds);
					gs.eventQueueScheduled(sEvent, grRecord, oParam1, oParam2, dtSchedule);
				} else {
					gs.eventQueue(sEvent, grRecord, oParam1, oParam2, sQueue);
				} // if delay
			} // if action
		} catch (oExeption) {
			gs.warn('global.GlobalTools.scheduleHandler Exception during schedule sEvent: ' + sEvent, String(oExeption));
		} // catch errors
	}, // function scheduleHandler

	// Overcome scopeing issue
	sleep: function (iMilliseconds) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		gs.sleep(iMilliseconds);
	}, // function sleep

	// Overcome scopeing issue with workaround for workspaces getGlideURI issue (CS7215882)
	getUrl: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var sUrl = '';
		try {
			sUrl = String(gs.action.getGlideURI());
			if (sUrl == 'null') {
				return;
			} else if (sUrl == 'api/now/graphql?api=api') {
				var gTransaction = GlideTransaction.get();
				if (gTransaction) {
					var oRequest = gTransaction.getRequest();
					if (oRequest) {
						var sReferer = oRequest.getHeader('Referer');
						if (sReferer) {
							sUrl = sReferer;
						} else {
							return;
						} // if referer
					} // if request
				} // if transaction
			} // if 
		} catch (oExeption) {
			gs.warn('global.GlobalTools.getUrl Exception during function call.', String(oExeption));
		} // catch errors
		return sUrl;
	}, // function getUrl

	// Overcome scopeing issue
	getExecutionTrackerbyId: function (sId) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (sId) {
			return SNC.GlideExecutionTracker.getBySysID(sId);
		} // if id
	}, // function getExecutionTrackerbyId

	// Run function in a same scope
	runFunction: function (sFunction) { // function is a <script_include>.<function>.toString(), 2nd... args will be evaluated in function call
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		var gsEvaluator = new GlideScopedEvaluator();
		gsEvaluator.putVariable('result', null);
		var aArguments = [];
		for (var i = 1; i < arguments.length; i++) {
			gsEvaluator.putVariable('param_' + String(i), arguments[i]);
			aArguments.push('param_' + String(i));
		} // each argument after script and scope
		sFunction = sFunction.replace(/function\s*\(/i, 'function tempname(');
		sFunction = 'result = tempname(' + aArguments.join(',') + ');\n' + sFunction;
		var grScriptInclude = new GlideRecord('sys_script_include');
		if (grScriptInclude.get('name', 'GlobalTools')) {
			grScriptInclude.setValue('script', sFunction);
			try {
				var _oResult = gsEvaluator.evaluateScript(grScriptInclude, 'script'); // glide eval insists on a "queried" record
				var oResult = gsEvaluator.getVariable('result');
				return oResult;
			} catch (ex) {
				gs.error('GlobalTools.runFunctionInScope is had an error: ' + String(ex));
			} // catch error in code
		} // if script include
	}, // runFunction

	// Run function in a specific scope (please note the function may only use valid scoped features)
	runFunctionInScope: function (sFunction, sScopeId) { // function is a <script_include>.<function>.toString(), 3rd... args will be evaluated in function call
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (gs.getProperty('glide.record.legacy_cross_scope_access_policy_in_script') == 'true') {
			gs.warn('GlobalTools.runFunctionInScope is allowed, please validate your instance security settings!');
			var gsEvaluator = new GlideScopedEvaluator();
			gsEvaluator.putVariable('result', null);
			var aArguments = [];
			for (var i = 2; i < arguments.length; i++) {
				gsEvaluator.putVariable('param_' + String(i), arguments[i]);
				aArguments.push('param_' + String(i));
			} // each argument after script and scope
			sFunction = sFunction.replace('function (', 'function tempname(');
			sFunction = 'result = tempname(' + aArguments.join(',') + ');\n' + sFunction;
			var grScriptInclude = new GlideRecord('sys_script_include');
			if (grScriptInclude.get('name', 'GlobalTools')) {
				grScriptInclude.setValue('sys_scope', sScopeId);
				grScriptInclude.setValue('script', sFunction);
				try {
					var vResult = gsEvaluator.evaluateScript(grScriptInclude, 'script'); // glide eval insists on a "queried" record
					var oResult = gsEvaluator.getVariable('result');
					return oResult;
				} catch (ex) {
					gs.error('GlobalTools.runFunctionInScope is had an error: ' + String(ex));
				} // catch error in code
			} // if script include
		} else {
			gs.warn('GlobalTools.runFunctionInScope is not allowed in a secured instances!');
		} // if legacy scope script policy is true
	}, // function runFunctionInScope

	isPluginActive: function (sPluginId) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (sPluginId) {
			var grPluginView = new GlideRecord('v_plugin');
			grPluginView.addEncodedQuery('id=' + sPluginId + '^active=active');
			grPluginView.query();
			if (grPluginView.next()) {
				return true;
			} // if plugin is active
		} // if plugin id
		return false;
	}, // function isPluginActive

	installPlugins: function (aPlugin, bLoadDemoData, bLog, bScheduled) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		bLoadDemoData = (bLoadDemoData === false) ? false : true; // default true
		bLog = (bLog === true) ? true : false; // default false
		if ((gs.isInteractive()) || (bScheduled === true)) {
			this.scheduleScript('GlobalTools', 'installPlugins', '0', [aPlugin, bLoadDemoData, bLog], [], 'GlobalToolsinstallPlugins');
		} else {
			if ((this.getType(aPlugin) == 'array') && (aPlugin[0])) {
				aPlugin.forEach(function (sPluginId) {
					if (bLog) { gs.info('GlobalTools.installPlugins start id: ' + sPluginId); }
					if (!this.isPluginActive(sPluginId)) {
						var gpmWorker = new GlidePluginManagerWorker();
						//gpmWorker.setProgressName(progress_name);
						gpmWorker.setPluginId(sPluginId);
						gpmWorker.setBackground(true);
						//gpmWorker.setCustomizationVersion(customization_version);
						gpmWorker.setIncludeDemoData(bLoadDemoData);
						gpmWorker.start();
						var sProgressId = gpmWorker.getProgressID();
						if (bLog) { gs.info('GlobalTools.installPlugins plugin id: ' + sPluginId + ' progress id: ' + sProgressId); }
						var bDone = false, sState = '', sStateDisplayValue = '';
						var iLoop = 0, iMaxLoop = 5; // 2 hours
						while ((bDone === false) && (iLoop < iMaxLoop)) {
							iLoop++;
							var grExecution = new GlideRecord('sys_execution_tracker');
							if (grExecution.get(sProgressId)) {
								sState = grExecution.getValue('state');
								sStateDisplayValue = grExecution.getDisplayValue('state');
								if (['0', '1'].indexOf(sState) == -1) {
									bDone = true;
								} else {
									if (bLog) { gs.info('GlobalTools.installPlugins plugin id: ' + sPluginId + ' is running.'); }
									gs.sleep(60000);
								} // if not pending or running 
							} else {
								gs.error('GlobalTools.installPlugins plugin id: ' + sPluginId + ' progress id: ' + sProgressId + ' execution record not found!');
							} // if execution found
						} // while not done
					} else {
						sStateDisplayValue = 'Already Installed';
						if (bLog) {gs.info('GlobalTools.installPlugins is already installed id: ' + sPluginId);}
					} // if plugin is active
					if (bLog) { gs.info('GlobalTools.installPlugins end id: ' + sPluginId + ' with final state: ' + sStateDisplayValue); }
				}, this); // each plugin
			} else {
				gs.warn('GlobalTools.installPlugins input must be an array of plugin ids!');
			} // if array
			if (bLog) { gs.info('GlobalTools.installPlugins end'); }
		} // if scheduled
	}, // function installPlugins

	// Updates one or more plugins in the background
	updatePlugins: function (sQuery, bScheduled) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((gs.isInteractive()) || (bScheduled === true)) {
			this.scheduleScript('GlobalTools', 'updatePlugins', '0', [sQuery], [], 'GlobalToolsupdatePlugins');
		} else {
			var oResult = {}, oWorkerResult = {}, sSource = '';
			var grStoreApps = new GlideRecord('sys_store_app');
			sQuery = new global.GlobalToolsRecordRead().combineQueries('hide_on_ui=false^update_available=true', sQuery);
			grStoreApps.addEncodedQuery(sQuery);
			grStoreApps.query();
			oResult['iStoreAppsFound'] = grStoreApps.getRowCount();
			oResult['sStoreAppsQuery'] = grStoreApps.getEncodedQuery();
			oResult['aStoreAppsUpgraded'] = {};
			if (grStoreApps.hasNext()) {
				var bgWorker = new sn_appclient.AppUpgrader();
				while (grStoreApps.next()) {
					sSource = grStoreApps.getValue('source');
					oResult['aStoreAppsUpgraded'][sSource] = {};
					oResult['aStoreAppsUpgraded'][sSource]['sOldVersion'] = grStoreApps.getValue('version');
					oResult['aStoreAppsUpgraded'][sSource]['sNewVersion'] = grStoreApps.getValue('latest_version');
					oWorkerResult = bgWorker.upgrade(grStoreApps.getUniqueValue(), grStoreApps.getValue('latest_version'), false);
					oResult['aStoreAppsUpgraded'][sSource]['sWorkerResult'] = JSON.stringify(oWorkerResult);
				} // while store apps
			} // if store apps to update
			gs.warn('GlobalTools.updatePlugins result: ' + JSON.stringify(oResult));
		} // if scheduled
	}, // updatePlugins

	useTagUtil: function(sFunction) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (!this._TagUtil) {
			this._TagUtil = new global.TagUtil();
		} // if no tag util
		if ((sFunction) && (this.getType(sFunction) == 'string')) {
			var aArguments = [];
			for (var i = 1; i < arguments.length; i++) {
				aArguments.push(arguments[i]);
			} // each arg after function
			return this._TagUtil[sFunction].apply(this._TagUtil, aArguments);
		} // if function
	}, // function useTagUtil

	type: 'GlobalTools',
	version: '1.0.12',
	author: 'Tom Hauri',
	email: 'tom@hauri.biz'

};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-02-20 09:05:58</sys_created_on>
        <sys_id>f31ccf7697816110b434f5f3a253afaa</sys_id>
        <sys_mod_count>207</sys_mod_count>
        <sys_name>GlobalTools</sys_name>
        <sys_package display_value="Global Tools" source="a39b8f3697816110b434f5f3a253af25">a39b8f3697816110b434f5f3a253af25</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global Tools">a39b8f3697816110b434f5f3a253af25</sys_scope>
        <sys_update_name>sys_script_include_f31ccf7697816110b434f5f3a253afaa</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2025-05-22 15:55:46</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>f31ccf7697816110b434f5f3a253afaa</id>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2024-08-03 08:57:16</sys_created_on>
        <sys_id>5355e0e11b3b0a10e50ddc61ab4bcb90</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-08-04 09:14:52</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
