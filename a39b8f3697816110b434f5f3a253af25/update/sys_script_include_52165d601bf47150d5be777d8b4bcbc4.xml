<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.GlobalToolsObject</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Tools to support (scoped) app development&#13;
Functions are only available for global scope and specific scopes defined in the system properties "now.globaltools.access_from_scope" or "now.globaltools.access_from_scope_custom" for security reasons.&#13;
From Vancouver release onwards you can use GlideJsonPathAPI instead of getValue function.&#13;
https://docs.servicenow.com/en-US/bundle/vancouver-api-reference/page/app-store/dev_portal/API_reference/GlideJsonPath/concept/GlideJsonPathAPI.html&#13;
&#13;
If your script is in ECMA 6 mode use Object.assign instead of ObjectAssign function.</description>
        <mobile_callable>false</mobile_callable>
        <name>GlobalToolsObject</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var GlobalToolsObject = Class.create();
GlobalToolsObject.prototype = {
	initialize: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		this._gt = new global.GlobalTools();
		this._gtArray = new global.GlobalToolsArray();
	}, // function initialize

	checkAccess: function (sCallerScope) {
		var aScopes = String(gs.getProperty('now.globaltools.access_from_scope')).split(',');
		var aCustomScopes = String(gs.getProperty('now.globaltools.access_from_scope_custom')).split(',');
		if ((sCallerScope) && ((sCallerScope == 'rhino.global') || (aScopes.indexOf(sCallerScope) != -1) || (aCustomScopes.indexOf(sCallerScope) != -1))) {
			return true;
		} // if scope is allowed
	}, // function checkAccess

	// Function to check if it is an object, use GlobalTools.getType to distinuish different object types
	isObject: function (oObj) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((oObj) && (typeof oObj === 'object') && (!Array.isArray(oObj))) {
			return true;
		} // if obj
	}, // function isObject

	// Function to retrieve up to 8 levels of config
	// For recursive configs pass sub object
	getValue: function (sConfigPath, sReplace, oConfig) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((!sConfigPath) || (!oConfig)) {
			return sReplace || '';
		} // if no path or object
		sConfigPath = sConfigPath.replace(/^\//, '').replace(/\/$/, ''); // remove leading and trailing /
		var aConfigPath = sConfigPath.split('/');
		var iMaxLength = (Array.isArray(aConfigPath)) ? aConfigPath.length : 0;
		if ((iMaxLength > 0) && (oConfig) && (!gs.nil(oConfig[aConfigPath[0]]))) {
			if (iMaxLength == 1) {
				return oConfig[aConfigPath[0]];
			} else {
				if ((iMaxLength > 1) && (!gs.nil(oConfig[aConfigPath[0]][aConfigPath[1]]))) {
					if (iMaxLength == 2) {
						return oConfig[aConfigPath[0]][aConfigPath[1]];
					} else {
						if ((iMaxLength > 2) && (!gs.nil(oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]]))) {
							if (iMaxLength == 3) {
								return oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]];
							} else {
								if ((iMaxLength > 3) && (!gs.nil(oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]]))) {
									if (iMaxLength == 4) {
										return oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]];
									} else {
										if ((iMaxLength > 4) && (!gs.nil(oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]]))) {
											if (iMaxLength == 5) {
												return oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]];
											} else {
												if ((iMaxLength > 5) && (!gs.nil(oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]]))) {
													if (iMaxLength == 6) {
														return oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]];
													} else {
														if ((iMaxLength > 6) && (!gs.nil(oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][aConfigPath[6]]))) {
															if (iMaxLength == 7) {
																return oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5][aConfigPath[6]]];
															} else {
																if ((iMaxLength > 8) && (!gs.nil(oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][aConfigPath[6]][aConfigPath[7]]))) {
																	if (iMaxLength == 9) {
																		return oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5][aConfigPath[6]]][aConfigPath[7]];
																	} // if found 8 level
																} // if 8 level
															} // if found 7 level
														} // if 7 level
													} // if found 6 level
												} // if 6 level
											} // if found 5 level
										} // if 5 level
									} // if found 4 level
								} // if 4 level
							} // if found 3 level
						} // if 3 level
					} // if found 2 level
				} // if 2 level
			} // if found 1 level
		} // if 1 level
		if (typeof sReplace != 'undefined') {
			return sReplace;
		} // if replace
	}, // function getValue

	// Function to set up to 8 levels of object
	setValue: function (sConfigPath, oValue, oConfig) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((!sConfigPath) || (!oConfig)) {
			return '';
		} // if no path or object
		sConfigPath = sConfigPath.replace(/^\//, '').replace(/\/$/, ''); // remove leading and trailing /
		var aConfigPath = sConfigPath.split('/');
		var iMaxLength = (Array.isArray(aConfigPath)) ? aConfigPath.length : 0;
		aConfigPath.forEach(function (sPath, i) {
			if ((i == 0) && (iMaxLength == 1)) {
				oConfig[sPath] = oValue;
			} else if ((i == 0) && (iMaxLength > 1) && (!oConfig.hasOwnProperty(sPath))) {
				oConfig[sPath] = {};
			} else if ((i == 1) && (iMaxLength == 2)) {
				oConfig[aConfigPath[0]][sPath] = oValue;
			} else if ((i == 1) && (iMaxLength > 2) && (!oConfig[aConfigPath[0]].hasOwnProperty(sPath))) {
				oConfig[aConfigPath[0]][sPath] = {};
			} else if ((i == 2) && (iMaxLength == 3)) {
				oConfig[aConfigPath[0]][aConfigPath[1]][sPath] = oValue;
			} else if ((i == 2) && (iMaxLength > 3) && (!oConfig[aConfigPath[0]][aConfigPath[1]].hasOwnProperty(sPath))) {
				oConfig[aConfigPath[0]][aConfigPath[1]][sPath] = {};
			} else if ((i == 3) && (iMaxLength == 4)) {
				oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][sPath] = oValue;
			} else if ((i == 3) && (iMaxLength > 4) && (!oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]].hasOwnProperty(sPath))) {
				oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][sPath] = {};
			} else if ((i == 4) && (iMaxLength == 5)) {
				oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][sPath] = oValue;
			} else if ((i == 4) && (iMaxLength > 5) && (!oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]].hasOwnProperty(sPath))) {
				oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][sPath] = {};
			} else if ((i == 5) && (iMaxLength == 6)) {
				oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][sPath] = oValue;
			} else if ((i == 5) && (iMaxLength > 6) && (!oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]].hasOwnProperty(sPath))) {
				oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][sPath] = {};
			} else if ((i == 6) && (iMaxLength == 7)) {
				oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][sPath] = oValue;
			} else if ((i == 6) && (iMaxLength > 7) && (!oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]].hasOwnProperty(sPath))) {
				oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][sPath] = {};
			} else if ((i == 7) && (iMaxLength == 8)) {
				oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][aConfigPath[6]][sPath] = oValue;
			} else if ((i == 7) && (iMaxLength > 8) && (!oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][aConfigPath[6]].hasOwnProperty(sPath))) {
				oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][aConfigPath[6]][sPath] = {};
			} else if ((i == 7) && (iMaxLength == 9)) {
				oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][aConfigPath[6]][aConfigPath[7]][sPath] = oValue;
			} else if ((i == 7) && (iMaxLength > 9) && (!oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][aConfigPath[6]][aConfigPath[7]].hasOwnProperty(sPath))) {
				oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][aConfigPath[6]][aConfigPath[7]][sPath] = {};
			} // if level deep
		}, this); // each path
	}, // function setValue

	// Function to retrieve up to 8 levels of config
	// For recursive configs pass sub object
	hasValue: function (sConfigPath, sReplace, oConfig) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (!oConfig) {
			oConfig = this.oConfig;
		} // if no object
		sConfigPath = sConfigPath.replace(/^\//, '').replace(/\/$/, ''); // remove leading and trailing /
		var aConfigPath = sConfigPath.split('/');
		var iMaxLength = (Array.isArray(aConfigPath)) ? aConfigPath.length : 0;
		if ((iMaxLength > 0) && (oConfig) && (oConfig.hasOwnProperty(aConfigPath[0]))) {
			if (iMaxLength == 1) {
				return true;
			} else {
				if ((iMaxLength > 1) && (oConfig[aConfigPath[0]].hasOwnProperty(aConfigPath[1]))) {
					if (iMaxLength == 2) {
						return true;
					} else {
						if ((iMaxLength > 2) && (oConfig[aConfigPath[0]][aConfigPath[1]].hasOwnProperty(aConfigPath[2]))) {
							if (iMaxLength == 3) {
								return true;
							} else {
								if ((iMaxLength > 3) && (oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]].hasOwnProperty(aConfigPath[3]))) {
									if (iMaxLength == 4) {
										return true;
									} else {
										if ((iMaxLength > 4) && (oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]].hasOwnProperty(aConfigPath[4]))) {
											if (iMaxLength == 5) {
												return true;
											} else {
												if ((iMaxLength > 5) && (oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]].hasOwnProperty(aConfigPath[5]))) {
													if (iMaxLength == 6) {
														return true;
													} else {
														if ((iMaxLength > 6) && (oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]].hasOwnProperty(aConfigPath[6]))) {
															if (iMaxLength == 7) {
																return true;
															} else {
																if ((iMaxLength > 8) && (oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][aConfigPath[6]].hasOwnProperty(aConfigPath[7]))) {
																	if (iMaxLength == 9) {
																		return true;
																	} // if found 8 level
																} // if 8 level
															} // if found 7 level
														} // if 7 level
													} // if found 6 level
												} // if 6 level
											} // if found 5 level
										} // if 5 level
									} // if found 4 level
								} // if 4 level
							} // if found 3 level
						} // if 3 level
					} // if found 2 level
				} // if 2 level
			} // if found 1 level
		} // if 1 level
		return false;
	}, // function hasValue

	// Function to retrieve up to 8 levels of config
	// For recursive configs pass sub object
	deleteValue: function (sConfigPath, oConfig) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (!oConfig) {
			oConfig = this.oConfig;
		} // if no object
		sConfigPath = sConfigPath.replace(/^\//, '').replace(/\/$/, ''); // remove leading and trailing /
		var aConfigPath = sConfigPath.split('/');
		var iMaxLength = (Array.isArray(aConfigPath)) ? aConfigPath.length : 0;
		if ((iMaxLength > 0) && (oConfig) && (oConfig.hasOwnProperty(aConfigPath[0]))) {
			if (iMaxLength == 1) {
				delete oConfig[aConfigPath[0]];
			} else {
				if ((iMaxLength > 1) && (oConfig[aConfigPath[0]].hasOwnProperty(aConfigPath[1]))) {
					if (iMaxLength == 2) {
						delete oConfig[aConfigPath[0]][aConfigPath[1]];
					} else {
						if ((iMaxLength > 2) && (oConfig[aConfigPath[0]][aConfigPath[1]].hasOwnProperty(aConfigPath[2]))) {
							if (iMaxLength == 3) {
								delete oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]];
							} else {
								if ((iMaxLength > 3) && (oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]].hasOwnProperty(aConfigPath[3]))) {
									if (iMaxLength == 4) {
										delete oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]];
									} else {
										if ((iMaxLength > 4) && (oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]].hasOwnProperty(aConfigPath[4]))) {
											if (iMaxLength == 5) {
												delete oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]];
											} else {
												if ((iMaxLength > 5) && (oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]].hasOwnProperty(aConfigPath[5]))) {
													if (iMaxLength == 6) {
														delete oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]];
													} else {
														if ((iMaxLength > 6) && (oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]].hasOwnProperty(aConfigPath[6]))) {
															if (iMaxLength == 7) {
																delete oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][aConfigPath[6]];
															} else {
																if ((iMaxLength > 8) && (oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][aConfigPath[6]].hasOwnProperty(aConfigPath[7]))) {
																	if (iMaxLength == 9) {
																		delete oConfig[aConfigPath[0]][aConfigPath[1]][aConfigPath[2]][aConfigPath[3]][aConfigPath[4]][aConfigPath[5]][aConfigPath[6]][aConfigPath[7]];
																	} // if found 8 level
																} // if 8 level
															} // if found 7 level
														} // if 7 level
													} // if found 6 level
												} // if 6 level
											} // if found 5 level
										} // if 5 level
									} // if found 4 level
								} // if 4 level
							} // if found 3 level
						} // if 3 level
					} // if found 2 level
				} // if 2 level
			} // if found 1 level
		} // if 1 level
	}, // function deleteValue

	// Simple deep merge without recursion protection etc, using ECMA 5 because running in global
	deepMerge: function (oSource, oMerge, bMergeArrays) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((this.isObject(oSource)) && ((!this.isObject(oMerge)))) {
			return oSource;
		} else if ((!this.isObject(oSource)) && ((this.isObject(oMerge)))) {
			return oMerge;
		} else if ((!this.isObject(oSource)) && ((!this.isObject(oMerge)))) {
			return {};
		} // if source and merge
		Object.keys(oMerge).forEach(function (sKey) {
			if ((bMergeArrays) && (this._gtArray.isValidArray(oSource[sKey])) && (this._gtArray.isValidArray(oMerge[sKey]))) {
				oSource[sKey] = this._gtArray.mergeArray(oSource[sKey], oMerge[sKey]);
			} else if ((this.isObject(oSource[sKey])) && (this.isObject(oMerge[sKey]))) {
				oSource[sKey] = this.deepMerge(oSource[sKey], oMerge[sKey], bMergeArrays);
			} else {
				oSource[sKey] = oMerge[sKey];
			} // if key
		}, this); // each key
		return oSource;
	}, // function deepMerge

	// Simple object depth calc (does not check for cyclic objects as this is handled by Rhino: Cyclic {0} value not allowed.)
	getDepth: function (oObj) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if (!this.isObject(oObj)) {
			return -1;
		} else if (Object.keys(oObj).length == 0) {
			return 0;
		} // if no obj
		var aStack = [oObj];
		var aTemp = [];
		var iDepthMax = 0;
		do {
			iDepthMax++;
			aTemp = [];
			aStack.forEach(function (oStackObj) {
				Object.keys(oStackObj).some(function (sKey) {
					if ((this.isObject(oStackObj[sKey])) && (Object.keys(oStackObj[sKey]).length > 0)) {
						aTemp.push(oStackObj[sKey]);
					} // if stacked obj prop is object
				}, this); // each obj key
			}, this); // each stack obj
			aStack = aTemp;
		} while (aStack.length); // while nested objects
		return iDepthMax;
	}, // function getDepth

	parseJSON: function (sJSON) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		if ((sJSON) && (this._gt.getType(sJSON) == 'string')) {
			try {
				return JSON.parse(sJSON);
			} catch (oEx) {
				// do nothing
			} // catch error
		} // if is string
	}, // function parseJSON

	type: 'GlobalToolsObject',
	version: '1.0.8',
	author: 'Tom Hauri',
	email: 'tom@hauri.biz'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-08-18 10:36:44</sys_created_on>
        <sys_id>52165d601bf47150d5be777d8b4bcbc4</sys_id>
        <sys_mod_count>53</sys_mod_count>
        <sys_name>GlobalToolsObject</sys_name>
        <sys_package display_value="Global Tools" source="a39b8f3697816110b434f5f3a253af25">a39b8f3697816110b434f5f3a253af25</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global Tools">a39b8f3697816110b434f5f3a253af25</sys_scope>
        <sys_update_name>sys_script_include_52165d601bf47150d5be777d8b4bcbc4</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-11-25 05:49:56</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>52165d601bf47150d5be777d8b4bcbc4</id>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2024-11-23 15:07:34</sys_created_on>
        <sys_id>6f2c6221c3c252109ebe8d8dc001311c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-11-23 15:07:34</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
