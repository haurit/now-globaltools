<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.GlobalToolsRESTAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Tools to support (scoped) app development&#13;
Functions are only available for global scope and specific scopes defined in the system properties "now.globaltools.access_from_scope" or "now.globaltools.access_from_scope_custom" for security reasons.</description>
        <mobile_callable>false</mobile_callable>
        <name>GlobalToolsRESTAPI</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var GlobalToolsRESTAPI = Class.create();
GlobalToolsRESTAPI.prototype = {
	initialize: function (oConnectionAlias, bLog, bQueryNoDomain, sLogLevel) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		this.bLog = (bLog) ? bLog : false;
		this.sLogLevel = ((sLogLevel) && (['basic', 'elevated', 'all'].indexOf(sLogLevel) != -1)) ? sLogLevel : '';
		this.bValidConnectionConfig = false;
		this.sQueryNoDomain = (bQueryNoDomain === true) ? '&sysparm_query_no_domain=true' : '';
		this.iHttpTimeout = 0;
		this.sLimit = '1000';
		this._gt = new global.GlobalTools();
		this._gtTable = new global.GlobalToolsTable();
		this._gtArray = new global.GlobalToolsArray();
		this._gtObject = new global.GlobalToolsObject();
		if (oConnectionAlias) {
			this._setConnectionFromAlias(oConnectionAlias);
		} // if alias
	}, // function initialize

	checkAccess: function (sCallerScope) {
		var aScopes = String(gs.getProperty('now.globaltools.access_from_scope')).split(',');
		var aCustomScopes = String(gs.getProperty('now.globaltools.access_from_scope_custom')).split(',');
		if ((sCallerScope) && ((sCallerScope == 'rhino.global') || (aScopes.indexOf(sCallerScope) != -1) || (aCustomScopes.indexOf(sCallerScope) != -1))) {
			return true;
		} // if scope is allowed
	}, // function checkAccess

	_setConnectionFromAlias: function (oConnectionAlias) {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		this.sRemoteUrl = '';
		var sConnectionAliasId = '';
		var sConnectionAliasType = this._gt.getType(oConnectionAlias);
		if (sConnectionAliasType.indexOf('gliderecord') != -1) {
			sConnectionAliasId = oConnectionAlias.getUniqueValue();
		} else if (sConnectionAliasType == 'string') {
			var grConnAndCredAlias = new GlideRecord('sys_alias');
			if (grConnAndCredAlias.get(oConnectionAlias)) {
				sConnectionAliasId = grConnAndCredAlias.getUniqueValue();
			} else if (grConnAndCredAlias.get('name', oConnectionAlias)) {
				sConnectionAliasId = grConnAndCredAlias.getUniqueValue();
			} else if (grConnAndCredAlias.get('id', oConnectionAlias)) {
				sConnectionAliasId = grConnAndCredAlias.getUniqueValue();
			} // if sys_id or name
		} // if glide record
		if (sConnectionAliasId) {
			var _ConnectionInfoProvider = new sn_cc.ConnectionInfoProvider();
			var ccConnectionInfo = _ConnectionInfoProvider.getConnectionInfo(sConnectionAliasId);
			if (ccConnectionInfo) {
				this.sRemoteUrl = ccConnectionInfo.getAttribute('connection_url').replace(/\/$/gi, '');
				if ((ccConnectionInfo.getAttribute('protocol') == 'https') && (this.sRemoteUrl)) {
					this.bValidConnectionConfig = true;
					var iHttpTimeout = parseInt(ccConnectionInfo.getAttribute('connection_timeout'));
					this.iHttpTimeout = (iHttpTimeout) ? iHttpTimeout : this.iHttpTimeout;
					this.sCredentialId = '';
					this.sCredentialPw = '';
					this.sCredentialType = ccConnectionInfo.getCredentialAttribute('type');
					if (this.sCredentialType == 'basic_auth') {
						this.sCredentialId = ccConnectionInfo.getCredentialAttribute('user_name');
						this.sCredentialPw = ccConnectionInfo.getCredentialAttribute('password');
					} else if (this.sCredentialType == 'oauth_2_0') {
						this.sCredentialType = 'oauth2';
						this.sCredentialId = ccConnectionInfo.getCredentialAttribute('sys_id');
					} // if basic				
					this.sMutualAuthProfile = '';
					if (ccConnectionInfo.getAttribute('mutual_auth') == 'true') {
						this.sMutualAuthProfile = ccConnectionInfo.getAttribute('sys_protocol_profile.protocol');
					} // if protocol profile 
					this.sMIDServerName = '';
					if (ccConnectionInfo.getAttribute('use_mid') == 'true') {
						var sMIDServerId = '';
						var sMIDServerSelection = ccConnectionInfo.getAttribute('mid_selection');
						var grMIDServer = new GlideRecord('ecc_agent');
						if (sMIDServerSelection == 'specific_mid_server') {
							sMIDServerId = ccConnectionInfo.getAttribute('mid_server');
						} else {
							try {
								var sncMidSelector = new SNC.MidSelector();
								if (sMIDServerSelection == 'specific_mid_cluster') {
									var sMIDClusterId = ccConnectionInfo.getAttribute('mid_cluster');
									if (sMIDClusterId) {
										sMIDServerId = sncMidSelector.selectAnyDegradedOrBetterMidServerFromClusterEx('', sMIDClusterId);
									} // if mid cluster
								} else if (sMIDServerSelection == 'auto_select') {
									var oMIDServerCapabilities = this._gtObject.parseJSON(ccConnectionInfo.getAttribute('capabilities'));
									var aMIDServerHost = [ccConnectionInfo.getAttribute('host')];
									var sMIDServerApp = ccConnectionInfo.getAttribute('application');
									sMIDServerId = sncMidSelector.selectAnyMidServer(sMIDServerApp, aMIDServerHost, oMIDServerCapabilities);
								} // if mid selection
							} catch (oEx) {
								if ((sMIDServerSelection == 'auto_select') && (String(oEx).indexOf('Unable to resolve host name') != -1)) {
									try {
										oMIDServerCapabilities = this._gtObject.parseJSON(ccConnectionInfo.getAttribute('capabilities'));
										sMIDServerApp = ccConnectionInfo.getAttribute('application');
										sMIDServerId = sncMidSelector.selectAnyMidServer(sMIDServerApp, [], oMIDServerCapabilities);
									} catch (oEx) {
										gs.error('global.GlobalToolsRESTAPI._setConnectionFromAlias error selecting MID Server: ' + String(oEx));
									} // if other error
								} else {
									gs.error('global.GlobalToolsRESTAPI._setConnectionFromAlias error selecting MID Server: ' + String(oEx));
								} // if error resolved host
							} // try
						} // if specific mid
						if ((sMIDServerId) && (grMIDServer.get(sMIDServerId))) {
							this.sMIDServerName = grMIDServer.getValue('name');
						} // if mid server
					} // if mid server
				} // if valid url
			} // if connection info
		} // if valid alias
	}, // function _setConnectionFromAlias

	getConnectionConfig: function (bStringify) {
		var oConfig = {
			'bLog': this.bLog,
			'sLogLevel': this.sLogLevel,
			'bValidConnectionConfig': this.bValidConnectionConfig,
			'sQueryNoDomain': this.sQueryNoDomain,
			'iHttpTimeout': this.iHttpTimeout,
			'sLimit': this.sLimit,
			'sRemoteUrl': this.sRemoteUrl,
			'sCredentialType': this.sCredentialType,
			'sCredentialId': this.sCredentialId,
			'sMutualAuthProfile': this.sMutualAuthProfile,
			'sMIDServerName': this.sMIDServerName,
		}; // config obj
		if (bStringify) {
			return JSON.stringify(oConfig);
		} else {
			return oConfig;
		} // if stringify
	}, // function getConnectionConfig

	testNOWConnection: function () {
		if (!this.checkAccess(gs.getCallerScopeName())) { return; }
		return this.doRESTRequest('api/now/table/task?sysparm_limit=1' + this.sQueryNoDomain, 'get', '', '', '', true);
	}, // function testNOWConnection

	getRemoteRecord: function (sTable, sQuery) {
		var oRemoteResult = this.doNOWRESTQuery(sTable, sQuery, 0, 1);
		if (this._gtArray.isValidArray(oRemoteResult)) {
			var grRecord = new GlideRecord(sTable);
			grRecord.initialize();
			var sRecordFieldType = '';
			var sRemoteType = '';
			Object.keys(oRemoteResult[0]).forEach(function (sRemoteField) {
				sRemoteType = this._gt.getType(oRemoteResult[0][sRemoteField]);
				sRecordFieldType = this._gtTable.getInternalType(grRecord, sRemoteField);
				if (sRemoteField == 'sys_id') {
					grRecord.setNewGuidValue(oRemoteResult[0][sRemoteField]);
				} else if ((sRemoteType == 'object') && (oRemoteResult[0][sRemoteField].hasOwnProperty('value'))) {
					grRecord.setValue(sRemoteField, oRemoteResult[0][sRemoteField]['value']);
				} else if (sRecordFieldType == 'boolean') {
					grRecord.setValue(sRemoteField, '0');
					if (oRemoteResult[0][sRemoteField]['value'] == 'true') {
						grRecord.setValue(sRemoteField, '1');
					} // if bool
				} else {
					grRecord.setValue(sRemoteField, oRemoteResult[0][sRemoteField]);
				} // if obj
			}, this); // each remote field
			return grRecord;
		} else if ((this._gt.getType(oRemoteResult) == 'object') && (oRemoteResult.hasOwnProperty('message'))) {
			return oRemoteResult['message'];
		} // if valid response
	}, // function getRemoteRecord

	doNOWRESTQuery: function (sTable, sQuery, sOffset, sLimit, aFields, sDisplayValue, oRequestBodyOrAttachmentInfo, bIncludeRefLink) {
		if ((this.bValidConnectionConfig) && (!this.checkAccess(gs.getCallerScopeName()))) { return; }
		if (!sTable) {
			return { 'success': false, 'message': gs.getMessage('GlobalToolsRESTAPI_400_001_ErrorMessage'), 'error_code': '400' };
		} // if no table
		var sExcludeRefLink = (bIncludeRefLink) ? '' : 'sysparm_exclude_reference_link=true&';
		sOffset = (sOffset) ? '&sysparm_offset=' + sOffset : '';
		sQuery = (sQuery) ? '&sysparm_query=' + encodeURIComponent(sQuery) : '';
		sDisplayValue = String(sDisplayValue);
		sDisplayValue = ((sDisplayValue == 'true') || (sDisplayValue == 'all')) ? '&sysparm_display_value=' + sDisplayValue : '';
		sLimit = (sLimit) ? sLimit : this.sLimit;
		var sUrl = 'api/now/table/' + sTable + '?' + sExcludeRefLink + 'sysparm_limit=' + sLimit + this.sQueryNoDomain + sOffset + sQuery + sDisplayValue;
		if (this._gtArray.isValidArray(aFields)) {
			var sFields = '&sysparm_fields=' + encodeURIComponent(aFields.join(','));
			if (String(this.sRemoteUrl + sUrl + sFields).length < 2000) {
				sUrl += sFields;
			} else {
				gs.error('global.GlobalToolsRESTAPI.doNOWRESTQuery Cannot add fields parameter because URL length would exceed 2k characters (see KB0829648 for solutions).');
			} // url length > 2k
		} // if valid fields
		return this.doRESTRequest(sUrl, 'GET', oRequestBodyOrAttachmentInfo);
	}, // function doNOWRESTQuery

	doNOWRESTCount: function (sTable, sQuery, sGroupByField, bOrderByCount, sDisplayValue, bOmitEmptyValue) {
		if ((this.bValidConnectionConfig) && (!this.checkAccess(gs.getCallerScopeName()))) { return; }
		if (!sTable) {
			return { 'success': false, 'message': gs.getMessage('GlobalToolsRESTAPI_400_001_ErrorMessage'), 'error_code': '400' };
		} // if no table
		sQuery = (sQuery) ? '&sysparm_query=' + encodeURIComponent(sQuery) : '';
		sGroupByField = (sGroupByField) ? '&sysparm_group_by=' + encodeURIComponent(sGroupByField) : '';
		var sOrderBy = ((bOrderByCount) && (sGroupByField)) ? '&sysparm_order_by=' + encodeURIComponent('COUNT^DESC') : '';
		sDisplayValue = ((String(sDisplayValue) == 'true') || (sDisplayValue == 'all')) ? '&sysparm_display_value=' + sDisplayValue : '';
		bOmitEmptyValue = (bOmitEmptyValue === true) ? true : false;
		var sUrl = 'api/now/stats/' + sTable + '?sysparm_count=true' + sQuery + sGroupByField + sOrderBy + sDisplayValue;
		var oRESTResults = this.doRESTRequest(sUrl);
		if ((typeof oRESTResults == 'object') && (oRESTResults.hasOwnProperty('error_code'))) {
			return oRESTResults;
		} else {
			if ((oRESTResults) && (!Array.isArray(oRESTResults)) && (oRESTResults.hasOwnProperty('stats')) && (oRESTResults['stats'].hasOwnProperty('count'))) {
				var sResult = oRESTResults['stats']['count'];
				if ((sResult) && (isNaN(sResult) === false)) {
					return Number(sResult);
				} // if result is number
			} else if ((oRESTResults) && (Array.isArray(oRESTResults))) {
				var oResult = {};
				oRESTResults.forEach(function (oRESTResult) {
					if ((oRESTResult) && (oRESTResult.hasOwnProperty('stats')) && (oRESTResult['stats'].hasOwnProperty('count')) && (oRESTResult.hasOwnProperty('groupby_fields')) && ((bOmitEmptyValue === false) || (oRESTResult['groupby_fields'][0].hasOwnProperty('value')))) {
						var sResult = oRESTResult['stats']['count'];
						var sValue = oRESTResult['groupby_fields'][0]['value'];
						if ((sResult) && (isNaN(sResult) === false) && ((bOmitEmptyValue === false) || (sValue))) {
							oResult[sValue] = Number(sResult);
						} // if result is number
					} // if rest result has properties
				}, this); // each result
				return oResult;
			} // if result
		} // if success
	}, // function doRESTCount

	doRESTRequest: function (sUrl, sMethod, oRequestBodyOrAttachmentInfo, oHeader, sLogLevel, bTestConnection, bRunAsynch, iWaitForResponseSeconds) {
		if ((this.bValidConnectionConfig) && (!this.checkAccess(gs.getCallerScopeName()))) { return; }
		sMethod = (['put', 'post', 'patch'].indexOf(sMethod.toLowerCase()) != -1) ? sMethod : 'get';
		var bSaveResponseBodyAsAttachment = false;
		var oRequest = new sn_ws.RESTMessageV2();
		oRequest.setHttpMethod(sMethod);
		sUrl = sUrl.replace(/^\//gi, '');
		sUrl = (sUrl.charAt(0) == '?') ? sUrl : '/' + sUrl;
		oRequest.setEndpoint(this.sRemoteUrl + sUrl);
		if (this.iHttpTimeout > 0) {
			oRequest.setHttpTimeout(this.iHttpTimeout);
		} // if time out
		if ((sLogLevel) && (['basic', 'elevated', 'all'].indexOf(sLogLevel) != -1)) {
			oRequest.setLogLevel(sLogLevel);
		} else if (this.sLogLevel) {
			oRequest.setLogLevel(this.sLogLevel);
		} // if log level
		if ((sMethod == 'get') && (oRequestBodyOrAttachmentInfo)) {
			var sAttachmentRecordTable = (oRequestBodyOrAttachmentInfo.hasOwnProperty('sTable')) ? oRequestBodyOrAttachmentInfo['sTable'] : '';
			var sAttachmentRecordSysId = (oRequestBodyOrAttachmentInfo.hasOwnProperty('sSysId')) ? oRequestBodyOrAttachmentInfo['sSysId'] : '';
			var sAttachmentFilename = (oRequestBodyOrAttachmentInfo.hasOwnProperty('sFilename')) ? oRequestBodyOrAttachmentInfo['sFilename'] : '';
			if ((sAttachmentRecordTable) && (sAttachmentRecordSysId) && (sAttachmentFilename)) {
				oRequest.saveResponseBodyAsAttachment(sAttachmentRecordTable, sAttachmentRecordSysId, sAttachmentFilename);
				bSaveResponseBodyAsAttachment = true;
			} // if valid attachment info
		} else if ((sMethod != 'get') && (oRequestBodyOrAttachmentInfo)) {
			var sRequestBodyType = this._gt.getType(oRequestBodyOrAttachmentInfo);
			var grAttachment = new GlideRecord('sys_attachment');
			if (sRequestBodyType == 'object') {
				oRequest.setRequestBody(JSON.stringify(oRequestBodyOrAttachmentInfo));
			} else if ((sRequestBodyType == 'string') && (oRequestBodyOrAttachmentInfo.length == 32) && (grAttachment.get(oRequestBodyOrAttachmentInfo))) {
				oRequest.setRequestBodyFromAttachment(oRequestBodyOrAttachmentInfo);
			} else {
				oRequest.setRequestBody(String(oRequestBodyOrAttachmentInfo));
			} // if obj or attachment
		} // if body or attachment
		oRequest.setRequestHeader('Accept', 'application/json');
		oRequest.setRequestHeader('User-Agent', 'servicenow');
		if (oHeader) {
			if (this._gtArray.isValidArray(oHeader)) {
				oHeader.forEach(function (oHeaderTmp) {
					if (this._gtArray.isValidArray(oHeaderTmp)) {
						oRequest.setRequestHeader(oHeaderTmp[0], oHeaderTmp[1]);
					} else if (this._gt.getType(oHeaderTmp) == 'object') {
						var sHeaderKey = Object.keys(oHeaderTmp)[0];
						if (sHeaderKey) {
							oRequest.setRequestHeader(sHeaderKey, oHeaderTmp[sHeaderKey]);
						} // if header key
					} // if obj
				}, this); // each header
			} else if (this._gt.getType(oHeader) == 'object') {
				Object.keys(oHeader).forEach(function (sHeaderKey) {
					oRequest.setRequestHeader(sHeaderKey, oHeader[sHeaderKey]);
				}, this); // each header key
			} // if header is array
		} // if header
		if (this.sMIDServerName) {
			oRequest.setMIDServer(this.sMIDServerName);
		} // if mid server
		if (this.sCredentialType == 'basic_auth') {
			oRequest.setBasicAuth(this.sCredentialId, this.sCredentialPw);
		} else if ((this.sCredentialType) && (this.sCredentialId)) {
			oRequest.setAuthenticationProfile(this.sCredentialType, this.sCredentialId);
		} // if credential
		if (this.sMutualAuthProfile) {
			oRequest.setMutualAuth(this.sMutualAuthProfile);
		} // if protocol profile
		if (bRunAsynch) {
			iWaitForResponseSeconds = (iWaitForResponseSeconds) ? parseInt(iWaitForResponseSeconds) : 5;
			oResponse = oRequest.executeAsync();
		} else {
			oResponse = oRequest.execute();
		} // if asynch
		if (oResponse) {
			var sStatus = String(oResponse.getStatusCode());
			var sErrorCode = this._gtObject.parseJSON(oResponse.getErrorCode());
			var sErrorMsg = oResponse.getErrorMessage();
			if (sStatus.startsWith('20')) {
				if (bSaveResponseBodyAsAttachment) {
					return oResponse.getResponseAttachmentSysid();
				} else {
					var sResponseBody = oResponse.getBody();
					if (sResponseBody.indexOf('currently in a suspended state') != -1) {
						return { 'success': false, 'message': gs.getMessage('GlobalToolsRESTAPI_404_001_ErrorMessage'), 'error_code': '404' };
					} // if instance suspended
					try {
						var oResponseBody = JSON.parse(sResponseBody);
						if (bTestConnection) {
							return { 'success': true, 'message': '' };
						} else {
							return oResponseBody['result'];
						} // if test connection
					} catch (oEx) {
						gs.error('global.GlobalToolsRESTAPI.doRESTRequest error parsing response for sUrl: ' + this.sRemoteUrl + sUrl + ' sError: "' + String(oEx) + '" sResponseBody: ' + sResponseBody);
						return { 'success': false, 'message': String(oEx), 'error_code': '-99' };
					} // if response cannot be parsed
				} // if get response as attachment
			} else {
				gs.error('global.GlobalToolsRESTAPI.doRESTRequest sUrl: ' + this.sRemoteUrl + sUrl + ' sErrorCode: ' + sErrorCode + ' sErrorMsg: ' + sErrorMsg);
				return { 'success': false, 'message': sErrorMsg, 'error_code': sStatus };
			} // if status 20
		} // if response
	}, // function doRESTRequest

	type: 'GlobalToolsRESTAPI',
	version: '1.0.8.1',
	author: 'Tom Hauri',
	email: 'tom@hauri.biz'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2023-12-14 11:42:21</sys_created_on>
        <sys_id>a95f09e21b0731105e14b8449b4bcb29</sys_id>
        <sys_mod_count>103</sys_mod_count>
        <sys_name>GlobalToolsRESTAPI</sys_name>
        <sys_package display_value="Global Tools" source="a39b8f3697816110b434f5f3a253af25">a39b8f3697816110b434f5f3a253af25</sys_package>
        <sys_policy/>
        <sys_scope display_value="Global Tools">a39b8f3697816110b434f5f3a253af25</sys_scope>
        <sys_update_name>sys_script_include_a95f09e21b0731105e14b8449b4bcb29</sys_update_name>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-12-06 06:09:13</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>a95f09e21b0731105e14b8449b4bcb29</id>
        <sys_created_by>tom.hauri</sys_created_by>
        <sys_created_on>2024-11-24 07:09:28</sys_created_on>
        <sys_id>b15802bdc34292109ebe8d8dc00131bf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>tom.hauri</sys_updated_by>
        <sys_updated_on>2024-11-24 07:09:28</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
